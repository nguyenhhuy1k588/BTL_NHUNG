
PID_DCMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08009f78  08009f78  00019f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4b4  0800a4b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4b4  0800a4b4  0001a4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4bc  0800a4bc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4bc  0800a4bc  0001a4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4c0  0800a4c0  0001a4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e4  0800a6a8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800a6a8  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e16a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc1  00000000  00000000  0002e37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00030340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00031068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dc7  00000000  00000000  00031cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d859  00000000  00000000  00053a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc0be  00000000  00000000  000612f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d3b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f38  00000000  00000000  0012d40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f60 	.word	0x08009f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009f60 	.word	0x08009f60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <read_encoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_encoder()
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
	EncVel = (int16_t)(htim1.Instance->CNT * -1);//Do cấm dây ngu nên nhân -1 đảo lại chiều quay cho đúng
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <read_encoder+0x3c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <read_encoder+0x40>)
 8001000:	801a      	strh	r2, [r3, #0]
	EncPos += EncVel;
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <read_encoder+0x40>)
 8001004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001008:	461a      	mov	r2, r3
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <read_encoder+0x44>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <read_encoder+0x44>)
 8001012:	6013      	str	r3, [r2, #0]
	htim1.Instance->CNT=0;
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <read_encoder+0x3c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200002a8 	.word	0x200002a8
 800102c:	200002f0 	.word	0x200002f0
 8001030:	2000036c 	.word	0x2000036c
 8001034:	00000000 	.word	0x00000000

08001038 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d141      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x96>
	{
		read_encoder();
 800104a:	f7ff ffcf 	bl	8000fec <read_encoder>
		speed[0] = EncVel * 60.0f/ Ts / PPR;
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80010f0 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8001060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001064:	eddf 6a23 	vldr	s13, [pc, #140]	; 80010f4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001068:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800106c:	eddf 6a22 	vldr	s13, [pc, #136]	; 80010f8 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001070:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001076:	edc3 7a00 	vstr	s15, [r3]
		speed[1] = 0.1 * speed[1] + 0.9 * speed[0];
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa62 	bl	8000548 <__aeabi_f2d>
 8001084:	a314      	add	r3, pc, #80	; (adr r3, 80010d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fab5 	bl	80005f8 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4614      	mov	r4, r2
 8001094:	461d      	mov	r5, r3
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa54 	bl	8000548 <__aeabi_f2d>
 80010a0:	a30f      	add	r3, pc, #60	; (adr r3, 80010e0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff faa7 	bl	80005f8 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4620      	mov	r0, r4
 80010b0:	4629      	mov	r1, r5
 80010b2:	f7ff f8eb 	bl	800028c <__adddf3>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd93 	bl	8000be8 <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010c6:	6053      	str	r3, [r2, #4]
		ProcessFlag=1;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
	}
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bdb0      	pop	{r4, r5, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	cccccccd 	.word	0xcccccccd
 80010e4:	3feccccc 	.word	0x3feccccc
 80010e8:	40000400 	.word	0x40000400
 80010ec:	200002f0 	.word	0x200002f0
 80010f0:	42700000 	.word	0x42700000
 80010f4:	3cf5c28f 	.word	0x3cf5c28f
 80010f8:	44a50000 	.word	0x44a50000
 80010fc:	20000364 	.word	0x20000364
 8001100:	20000201 	.word	0x20000201

08001104 <PID_controller>:

void PID_controller(float SP, float PV, PID_t *pid, float *u)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	ed87 0a03 	vstr	s0, [r7, #12]
 800110e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	float ek;
	ek = SP - PV;
 8001116:	ed97 7a03 	vldr	s14, [r7, #12]
 800111a:	edd7 7a02 	vldr	s15, [r7, #8]
 800111e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001122:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->I_part += Ts*ek;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	ed93 7a04 	vldr	s14, [r3, #16]
 800112c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001130:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80011a0 <PID_controller+0x9c>
 8001134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	edc3 7a04 	vstr	s15, [r3, #16]
	*u = pid->Kp*ek + pid->Ki*pid->I_part + pid->Kd*(ek-pid->ek_1)/Ts;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	edd7 7a05 	vldr	s15, [r7, #20]
 800114c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	edd3 6a01 	vldr	s13, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	edd3 7a04 	vldr	s15, [r3, #16]
 800115c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 6a02 	vldr	s13, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001170:	ed97 6a05 	vldr	s12, [r7, #20]
 8001174:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001178:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800117c:	ed9f 6a08 	vldr	s12, [pc, #32]	; 80011a0 <PID_controller+0x9c>
 8001180:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	edc3 7a00 	vstr	s15, [r3]
//	if (ek > 0.02 * setpoint)
//	{
//		pid->I_part += Ts*ek;
//		*u += pid->Ki*pid->I_part;
//	}
	pid->ek_1 = ek;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	60da      	str	r2, [r3, #12]
}
 8001194:	bf00      	nop
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	3cf5c28f 	.word	0x3cf5c28f

080011a4 <xuat_PWM>:

void xuat_PWM(float duty)  //use timer 9 to export PWM, 50KHz
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	ed87 0a01 	vstr	s0, [r7, #4]
	if (duty > 1) duty = 1;
 80011ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	dd03      	ble.n	80011c8 <xuat_PWM+0x24>
 80011c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e00a      	b.n	80011de <xuat_PWM+0x3a>
	else if (duty < -1) duty = -1;
 80011c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80011d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d501      	bpl.n	80011de <xuat_PWM+0x3a>
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <xuat_PWM+0x94>)
 80011dc:	607b      	str	r3, [r7, #4]
	int16_t pwm = duty*900;
 80011de:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800123c <xuat_PWM+0x98>
 80011e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ee:	ee17 3a90 	vmov	r3, s15
 80011f2:	81fb      	strh	r3, [r7, #14]
	if (pwm>0)
 80011f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dd09      	ble.n	8001210 <xuat_PWM+0x6c>
		{
			htim9.Instance->CCR1=0;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <xuat_PWM+0x9c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2200      	movs	r2, #0
 8001202:	635a      	str	r2, [r3, #52]	; 0x34
			htim9.Instance->CCR2=pwm;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <xuat_PWM+0x9c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
		{
			pwm *= -1;
			htim9.Instance->CCR2=0;
			htim9.Instance->CCR1=pwm;
		}
}
 800120e:	e00c      	b.n	800122a <xuat_PWM+0x86>
			pwm *= -1;
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	425b      	negs	r3, r3
 8001214:	b29b      	uxth	r3, r3
 8001216:	81fb      	strh	r3, [r7, #14]
			htim9.Instance->CCR2=0;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <xuat_PWM+0x9c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
			htim9.Instance->CCR1=pwm;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <xuat_PWM+0x9c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	bf800000 	.word	0xbf800000
 800123c:	44610000 	.word	0x44610000
 8001240:	200002f4 	.word	0x200002f4

08001244 <process_RXData>:

void process_RXData(void)
{
 8001244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001248:	b088      	sub	sp, #32
 800124a:	af08      	add	r7, sp, #32
	if(RXData_Buff[0] == '0')
 800124c:	4b5c      	ldr	r3, [pc, #368]	; (80013c0 <process_RXData+0x17c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b30      	cmp	r3, #48	; 0x30
 8001252:	d168      	bne.n	8001326 <process_RXData+0xe2>
	{
		sscanf(RXData_Buff, "%u %u %u", &Temp, &SysQuest, &ProcessMode);
 8001254:	4b5b      	ldr	r3, [pc, #364]	; (80013c4 <process_RXData+0x180>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <process_RXData+0x184>)
 800125a:	4a5c      	ldr	r2, [pc, #368]	; (80013cc <process_RXData+0x188>)
 800125c:	495c      	ldr	r1, [pc, #368]	; (80013d0 <process_RXData+0x18c>)
 800125e:	4858      	ldr	r0, [pc, #352]	; (80013c0 <process_RXData+0x17c>)
 8001260:	f004 fcbc 	bl	8005bdc <siscanf>
		if (SysQuest == 0)
 8001264:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <process_RXData+0x184>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d110      	bne.n	800128e <process_RXData+0x4a>
		{
			sprintf(TXData, "%u %u\n", 1, SysQuest);
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <process_RXData+0x184>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4958      	ldr	r1, [pc, #352]	; (80013d4 <process_RXData+0x190>)
 8001274:	4858      	ldr	r0, [pc, #352]	; (80013d8 <process_RXData+0x194>)
 8001276:	f004 fc91 	bl	8005b9c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 800127a:	4857      	ldr	r0, [pc, #348]	; (80013d8 <process_RXData+0x194>)
 800127c:	f7fe ffa8 	bl	80001d0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	231e      	movs	r3, #30
 8001286:	4954      	ldr	r1, [pc, #336]	; (80013d8 <process_RXData+0x194>)
 8001288:	4854      	ldr	r0, [pc, #336]	; (80013dc <process_RXData+0x198>)
 800128a:	f002 ffba 	bl	8004202 <HAL_UART_Transmit>
		}
		if (SysQuest == 1)
 800128e:	4b4e      	ldr	r3, [pc, #312]	; (80013c8 <process_RXData+0x184>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d116      	bne.n	80012c4 <process_RXData+0x80>
		{
			EncPos = 0;
 8001296:	4b52      	ldr	r3, [pc, #328]	; (80013e0 <process_RXData+0x19c>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
			EncVel = 0;
 800129c:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <process_RXData+0x1a0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
			sprintf(TXData, "%u %u\n", 1, SysQuest);
 80012a2:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <process_RXData+0x184>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2201      	movs	r2, #1
 80012a8:	494a      	ldr	r1, [pc, #296]	; (80013d4 <process_RXData+0x190>)
 80012aa:	484b      	ldr	r0, [pc, #300]	; (80013d8 <process_RXData+0x194>)
 80012ac:	f004 fc76 	bl	8005b9c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 80012b0:	4849      	ldr	r0, [pc, #292]	; (80013d8 <process_RXData+0x194>)
 80012b2:	f7fe ff8d 	bl	80001d0 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	231e      	movs	r3, #30
 80012bc:	4946      	ldr	r1, [pc, #280]	; (80013d8 <process_RXData+0x194>)
 80012be:	4847      	ldr	r0, [pc, #284]	; (80013dc <process_RXData+0x198>)
 80012c0:	f002 ff9f 	bl	8004202 <HAL_UART_Transmit>
		}
		if (SysQuest == 2)
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <process_RXData+0x184>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d12c      	bne.n	8001326 <process_RXData+0xe2>
		{
			memset(&ParaPID, 0, sizeof(PID_t));
 80012cc:	2214      	movs	r2, #20
 80012ce:	2100      	movs	r1, #0
 80012d0:	4845      	ldr	r0, [pc, #276]	; (80013e8 <process_RXData+0x1a4>)
 80012d2:	f003 fddb 	bl	8004e8c <memset>
			memset(speed, 0, strlen(TXData));
 80012d6:	4840      	ldr	r0, [pc, #256]	; (80013d8 <process_RXData+0x194>)
 80012d8:	f7fe ff7a 	bl	80001d0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	2100      	movs	r1, #0
 80012e2:	4842      	ldr	r0, [pc, #264]	; (80013ec <process_RXData+0x1a8>)
 80012e4:	f003 fdd2 	bl	8004e8c <memset>
			setpoint = 0;
 80012e8:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <process_RXData+0x1ac>)
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
			EncPos = 0;
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <process_RXData+0x19c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
			EncVel = 0;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <process_RXData+0x1a0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	801a      	strh	r2, [r3, #0]
			u_control = 0;
 80012fc:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <process_RXData+0x1b0>)
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
			sprintf(TXData, "%u %u\n", 1, SysQuest);
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <process_RXData+0x184>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	4932      	ldr	r1, [pc, #200]	; (80013d4 <process_RXData+0x190>)
 800130c:	4832      	ldr	r0, [pc, #200]	; (80013d8 <process_RXData+0x194>)
 800130e:	f004 fc45 	bl	8005b9c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 8001312:	4831      	ldr	r0, [pc, #196]	; (80013d8 <process_RXData+0x194>)
 8001314:	f7fe ff5c 	bl	80001d0 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	231e      	movs	r3, #30
 800131e:	492e      	ldr	r1, [pc, #184]	; (80013d8 <process_RXData+0x194>)
 8001320:	482e      	ldr	r0, [pc, #184]	; (80013dc <process_RXData+0x198>)
 8001322:	f002 ff6e 	bl	8004202 <HAL_UART_Transmit>
		}
	}
	if(RXData_Buff[0] == '1')
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <process_RXData+0x17c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b31      	cmp	r3, #49	; 0x31
 800132c:	d13e      	bne.n	80013ac <process_RXData+0x168>
	{
		sscanf(RXData_Buff, "%u %f %f %f %f", &Temp, &ParaPID.Kp, &ParaPID.Ki, &ParaPID.Kd, &setpoint);
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <process_RXData+0x1ac>)
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <process_RXData+0x1b4>)
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <process_RXData+0x1b8>)
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <process_RXData+0x1a4>)
 800133c:	4a23      	ldr	r2, [pc, #140]	; (80013cc <process_RXData+0x188>)
 800133e:	4930      	ldr	r1, [pc, #192]	; (8001400 <process_RXData+0x1bc>)
 8001340:	481f      	ldr	r0, [pc, #124]	; (80013c0 <process_RXData+0x17c>)
 8001342:	f004 fc4b 	bl	8005bdc <siscanf>
  		sprintf(TXData, "%u %.2f %.2f %.2f %.2f\n", 2, ParaPID.Kp, ParaPID.Ki, ParaPID.Kd, setpoint);
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <process_RXData+0x1a4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8fc 	bl	8000548 <__aeabi_f2d>
 8001350:	4604      	mov	r4, r0
 8001352:	460d      	mov	r5, r1
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <process_RXData+0x1a4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8f5 	bl	8000548 <__aeabi_f2d>
 800135e:	4680      	mov	r8, r0
 8001360:	4689      	mov	r9, r1
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <process_RXData+0x1a4>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8ee 	bl	8000548 <__aeabi_f2d>
 800136c:	4682      	mov	sl, r0
 800136e:	468b      	mov	fp, r1
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <process_RXData+0x1ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8e7 	bl	8000548 <__aeabi_f2d>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001382:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001386:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800138a:	e9cd 4500 	strd	r4, r5, [sp]
 800138e:	2202      	movs	r2, #2
 8001390:	491c      	ldr	r1, [pc, #112]	; (8001404 <process_RXData+0x1c0>)
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <process_RXData+0x194>)
 8001394:	f004 fc02 	bl	8005b9c <siprintf>
  		HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 8001398:	480f      	ldr	r0, [pc, #60]	; (80013d8 <process_RXData+0x194>)
 800139a:	f7fe ff19 	bl	80001d0 <strlen>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	231e      	movs	r3, #30
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <process_RXData+0x194>)
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <process_RXData+0x198>)
 80013a8:	f002 ff2b 	bl	8004202 <HAL_UART_Transmit>
	}
	memset(TXData, 0, 20);
 80013ac:	2214      	movs	r2, #20
 80013ae:	2100      	movs	r1, #0
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <process_RXData+0x194>)
 80013b2:	f003 fd6b 	bl	8004e8c <memset>
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013be:	bf00      	nop
 80013c0:	2000033c 	.word	0x2000033c
 80013c4:	20000200 	.word	0x20000200
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000230 	.word	0x20000230
 80013d0:	08009f78 	.word	0x08009f78
 80013d4:	08009f84 	.word	0x08009f84
 80013d8:	20000280 	.word	0x20000280
 80013dc:	20000370 	.word	0x20000370
 80013e0:	2000036c 	.word	0x2000036c
 80013e4:	200002f0 	.word	0x200002f0
 80013e8:	20000218 	.word	0x20000218
 80013ec:	20000364 	.word	0x20000364
 80013f0:	2000022c 	.word	0x2000022c
 80013f4:	20000214 	.word	0x20000214
 80013f8:	20000220 	.word	0x20000220
 80013fc:	2000021c 	.word	0x2000021c
 8001400:	08009f8c 	.word	0x08009f8c
 8001404:	08009f9c 	.word	0x08009f9c

08001408 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_UART_RxCpltCallback+0x58>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d11d      	bne.n	8001458 <HAL_UART_RxCpltCallback+0x50>
	{
		if(RXData != '\n') //line feed Ascii
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_UART_RxCpltCallback+0x5c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b0a      	cmp	r3, #10
 8001422:	d00b      	beq.n	800143c <HAL_UART_RxCpltCallback+0x34>
		{
			RXData_Buff[RXIndex++] = RXData; //Save data in Rxbuff
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_UART_RxCpltCallback+0x60>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	b2d1      	uxtb	r1, r2
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <HAL_UART_RxCpltCallback+0x60>)
 800142e:	7011      	strb	r1, [r2, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_UART_RxCpltCallback+0x5c>)
 8001434:	7819      	ldrb	r1, [r3, #0]
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_UART_RxCpltCallback+0x64>)
 8001438:	5499      	strb	r1, [r3, r2]
 800143a:	e008      	b.n	800144e <HAL_UART_RxCpltCallback+0x46>
		}
		else if (RXData == '\n')
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_UART_RxCpltCallback+0x5c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b0a      	cmp	r3, #10
 8001442:	d104      	bne.n	800144e <HAL_UART_RxCpltCallback+0x46>
		{
			RXIndex = 0;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_UART_RxCpltCallback+0x60>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
			process_RXData();
 800144a:	f7ff fefb 	bl	8001244 <process_RXData>
		}
		HAL_UART_Receive_IT(&huart2, &RXData, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	4904      	ldr	r1, [pc, #16]	; (8001464 <HAL_UART_RxCpltCallback+0x5c>)
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <HAL_UART_RxCpltCallback+0x58>)
 8001454:	f002 ff67 	bl	8004326 <HAL_UART_Receive_IT>
	}
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000370 	.word	0x20000370
 8001464:	2000027c 	.word	0x2000027c
 8001468:	20000202 	.word	0x20000202
 800146c:	2000033c 	.word	0x2000033c

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001476:	f000 fcf3 	bl	8001e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147a:	f000 f8a5 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147e:	f000 fa2f 	bl	80018e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001482:	f000 f90b 	bl	800169c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001486:	f000 f961 	bl	800174c <MX_TIM3_Init>
  MX_TIM9_Init();
 800148a:	f000 f9ad 	bl	80017e8 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 800148e:	f000 f9fd 	bl	800188c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8001492:	483e      	ldr	r0, [pc, #248]	; (800158c <main+0x11c>)
 8001494:	f001 fd5a 	bl	8002f4c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001498:	2104      	movs	r1, #4
 800149a:	483d      	ldr	r0, [pc, #244]	; (8001590 <main+0x120>)
 800149c:	f001 ff84 	bl	80033a8 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80014a0:	2100      	movs	r1, #0
 80014a2:	483c      	ldr	r0, [pc, #240]	; (8001594 <main+0x124>)
 80014a4:	f001 fe12 	bl	80030cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80014a8:	2104      	movs	r1, #4
 80014aa:	483a      	ldr	r0, [pc, #232]	; (8001594 <main+0x124>)
 80014ac:	f001 fe0e 	bl	80030cc <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart2, &RXData, 1);
 80014b0:	2201      	movs	r2, #1
 80014b2:	4939      	ldr	r1, [pc, #228]	; (8001598 <main+0x128>)
 80014b4:	4839      	ldr	r0, [pc, #228]	; (800159c <main+0x12c>)
 80014b6:	f002 ff36 	bl	8004326 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  xuat_PWM(u_control);
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <main+0x130>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	eeb0 0a67 	vmov.f32	s0, s15
 80014c4:	f7ff fe6e 	bl	80011a4 <xuat_PWM>
	  if (ProcessFlag)
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <main+0x134>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f4      	beq.n	80014ba <main+0x4a>
		  {
			  ProcessFlag = 0;
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <main+0x134>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
			  switch(ProcessMode)
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <main+0x138>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <main+0x74>
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d005      	beq.n	80014ee <main+0x7e>
 80014e2:	e04c      	b.n	800157e <main+0x10e>
			  {
				  case ModeIdle:
					  u_control = 0;
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <main+0x130>)
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
					  break;
 80014ec:	e047      	b.n	800157e <main+0x10e>
				  case ModePidPos:
					  PID_controller(setpoint,((float)EncPos/PPR*360),&ParaPID, &u_control);
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <main+0x13c>)
 80014f0:	edd3 6a00 	vldr	s13, [r3]
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <main+0x140>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001500:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80015b4 <main+0x144>
 8001504:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8001508:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80015b8 <main+0x148>
 800150c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001510:	4923      	ldr	r1, [pc, #140]	; (80015a0 <main+0x130>)
 8001512:	482a      	ldr	r0, [pc, #168]	; (80015bc <main+0x14c>)
 8001514:	eef0 0a67 	vmov.f32	s1, s15
 8001518:	eeb0 0a66 	vmov.f32	s0, s13
 800151c:	f7ff fdf2 	bl	8001104 <PID_controller>
					  sprintf(TXData, "%u %.1f %.2f\n", 0, ((float)EncPos/PPR*360), u_control);
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <main+0x140>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80015b4 <main+0x144>
 8001530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001534:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80015b8 <main+0x148>
 8001538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153c:	ee17 0a90 	vmov	r0, s15
 8001540:	f7ff f802 	bl	8000548 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <main+0x130>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800155a:	e9cd 4500 	strd	r4, r5, [sp]
 800155e:	2200      	movs	r2, #0
 8001560:	4917      	ldr	r1, [pc, #92]	; (80015c0 <main+0x150>)
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <main+0x154>)
 8001564:	f004 fb1a 	bl	8005b9c <siprintf>
					  HAL_UART_Transmit(&huart2, (uint8_t *)TXData, strlen(TXData), 30);
 8001568:	4816      	ldr	r0, [pc, #88]	; (80015c4 <main+0x154>)
 800156a:	f7fe fe31 	bl	80001d0 <strlen>
 800156e:	4603      	mov	r3, r0
 8001570:	b29a      	uxth	r2, r3
 8001572:	231e      	movs	r3, #30
 8001574:	4913      	ldr	r1, [pc, #76]	; (80015c4 <main+0x154>)
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <main+0x12c>)
 8001578:	f002 fe43 	bl	8004202 <HAL_UART_Transmit>
					  break;
 800157c:	bf00      	nop
			  }
			  memset(TXData, 0, 20);
 800157e:	2214      	movs	r2, #20
 8001580:	2100      	movs	r1, #0
 8001582:	4810      	ldr	r0, [pc, #64]	; (80015c4 <main+0x154>)
 8001584:	f003 fc82 	bl	8004e8c <memset>
	  xuat_PWM(u_control);
 8001588:	e797      	b.n	80014ba <main+0x4a>
 800158a:	bf00      	nop
 800158c:	20000234 	.word	0x20000234
 8001590:	200002a8 	.word	0x200002a8
 8001594:	200002f4 	.word	0x200002f4
 8001598:	2000027c 	.word	0x2000027c
 800159c:	20000370 	.word	0x20000370
 80015a0:	20000214 	.word	0x20000214
 80015a4:	20000201 	.word	0x20000201
 80015a8:	20000200 	.word	0x20000200
 80015ac:	2000022c 	.word	0x2000022c
 80015b0:	2000036c 	.word	0x2000036c
 80015b4:	44a50000 	.word	0x44a50000
 80015b8:	43b40000 	.word	0x43b40000
 80015bc:	20000218 	.word	0x20000218
 80015c0:	08009fb4 	.word	0x08009fb4
 80015c4:	20000280 	.word	0x20000280

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	; 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	2230      	movs	r2, #48	; 0x30
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 fc58 	bl	8004e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <SystemClock_Config+0xcc>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a27      	ldr	r2, [pc, #156]	; (8001694 <SystemClock_Config+0xcc>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <SystemClock_Config+0xcc>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <SystemClock_Config+0xd0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <SystemClock_Config+0xd0>)
 8001612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <SystemClock_Config+0xd0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001638:	2308      	movs	r3, #8
 800163a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800163c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001640:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001646:	2304      	movs	r3, #4
 8001648:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	4618      	mov	r0, r3
 8001650:	f000 ffb8 	bl	80025c4 <HAL_RCC_OscConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800165a:	f000 f977 	bl	800194c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001662:	2302      	movs	r3, #2
 8001664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800166a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800166e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001670:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	2105      	movs	r1, #5
 800167c:	4618      	mov	r0, r3
 800167e:	f001 fa19 	bl	8002ab4 <HAL_RCC_ClockConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001688:	f000 f960 	bl	800194c <Error_Handler>
  }
}
 800168c:	bf00      	nop
 800168e:	3750      	adds	r7, #80	; 0x50
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2224      	movs	r2, #36	; 0x24
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 fbee 	bl	8004e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <MX_TIM1_Init+0xa8>)
 80016ba:	4a23      	ldr	r2, [pc, #140]	; (8001748 <MX_TIM1_Init+0xac>)
 80016bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <MX_TIM1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_TIM1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <MX_TIM1_Init+0xa8>)
 80016cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_TIM1_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_TIM1_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_TIM1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016e4:	2303      	movs	r3, #3
 80016e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ec:	2301      	movs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016fc:	2301      	movs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4619      	mov	r1, r3
 800170e:	480d      	ldr	r0, [pc, #52]	; (8001744 <MX_TIM1_Init+0xa8>)
 8001710:	f001 fda4 	bl	800325c <HAL_TIM_Encoder_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800171a:	f000 f917 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <MX_TIM1_Init+0xa8>)
 800172c:	f002 fc8c 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001736:	f000 f909 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	3730      	adds	r7, #48	; 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200002a8 	.word	0x200002a8
 8001748:	40010000 	.word	0x40010000

0800174c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <MX_TIM3_Init+0x94>)
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <MX_TIM3_Init+0x98>)
 800176c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_TIM3_Init+0x94>)
 8001770:	f240 3247 	movw	r2, #839	; 0x347
 8001774:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_TIM3_Init+0x94>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_TIM3_Init+0x94>)
 800177e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_TIM3_Init+0x94>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_TIM3_Init+0x94>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <MX_TIM3_Init+0x94>)
 8001792:	f001 fb8b 	bl	8002eac <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800179c:	f000 f8d6 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <MX_TIM3_Init+0x94>)
 80017ae:	f002 f84f 	bl	8003850 <HAL_TIM_ConfigClockSource>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017b8:	f000 f8c8 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_TIM3_Init+0x94>)
 80017ca:	f002 fc3d 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017d4:	f000 f8ba 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000234 	.word	0x20000234
 80017e4:	40000400 	.word	0x40000400

080017e8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_TIM9_Init+0x9c>)
 8001802:	4a21      	ldr	r2, [pc, #132]	; (8001888 <MX_TIM9_Init+0xa0>)
 8001804:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1679;
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_TIM9_Init+0x9c>)
 8001808:	f240 628f 	movw	r2, #1679	; 0x68f
 800180c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_TIM9_Init+0x9c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <MX_TIM9_Init+0x9c>)
 8001816:	f240 32e7 	movw	r2, #999	; 0x3e7
 800181a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <MX_TIM9_Init+0x9c>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_TIM9_Init+0x9c>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001828:	4816      	ldr	r0, [pc, #88]	; (8001884 <MX_TIM9_Init+0x9c>)
 800182a:	f001 fbff 	bl	800302c <HAL_TIM_PWM_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8001834:	f000 f88a 	bl	800194c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001838:	2360      	movs	r3, #96	; 0x60
 800183a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_TIM9_Init+0x9c>)
 8001850:	f001 ff40 	bl	80036d4 <HAL_TIM_PWM_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800185a:	f000 f877 	bl	800194c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2204      	movs	r2, #4
 8001862:	4619      	mov	r1, r3
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <MX_TIM9_Init+0x9c>)
 8001866:	f001 ff35 	bl	80036d4 <HAL_TIM_PWM_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8001870:	f000 f86c 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001874:	4803      	ldr	r0, [pc, #12]	; (8001884 <MX_TIM9_Init+0x9c>)
 8001876:	f000 f929 	bl	8001acc <HAL_TIM_MspPostInit>

}
 800187a:	bf00      	nop
 800187c:	3720      	adds	r7, #32
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002f4 	.word	0x200002f4
 8001888:	40014000 	.word	0x40014000

0800188c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_USART2_UART_Init+0x50>)
 8001894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 8001898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800189c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018b2:	220c      	movs	r2, #12
 80018b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018c4:	f002 fc50 	bl	8004168 <HAL_UART_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ce:	f000 f83d 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000370 	.word	0x20000370
 80018dc:	40004400 	.word	0x40004400

080018e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_GPIO_Init+0x68>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a16      	ldr	r2, [pc, #88]	; (8001948 <MX_GPIO_Init+0x68>)
 80018f0:	f043 0310 	orr.w	r3, r3, #16
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_GPIO_Init+0x68>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MX_GPIO_Init+0x68>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <MX_GPIO_Init+0x68>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <MX_GPIO_Init+0x68>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_GPIO_Init+0x68>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <MX_GPIO_Init+0x68>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_GPIO_Init+0x68>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_MspInit+0x4c>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <HAL_TIM_Encoder_MspInit+0x84>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d12c      	bne.n	8001a24 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x88>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x88>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x88>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x88>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_TIM_Encoder_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001a02:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a14:	2301      	movs	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a20:	f000 fc34 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <HAL_TIM_Base_MspInit+0x48>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d115      	bne.n	8001a76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_TIM_Base_MspInit+0x4c>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_TIM_Base_MspInit+0x4c>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_TIM_Base_MspInit+0x4c>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	201d      	movs	r0, #29
 8001a6c:	f000 fb45 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a70:	201d      	movs	r0, #29
 8001a72:	f000 fb5e 	bl	8002132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40000400 	.word	0x40000400
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10d      	bne.n	8001ab6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x40>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x40>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x40>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40014000 	.word	0x40014000
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <HAL_TIM_MspPostInit+0x68>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d11d      	bne.n	8001b2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_TIM_MspPostInit+0x6c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_TIM_MspPostInit+0x6c>)
 8001af8:	f043 0310 	orr.w	r3, r3, #16
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_TIM_MspPostInit+0x6c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b0a:	2360      	movs	r3, #96	; 0x60
 8001b0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <HAL_TIM_MspPostInit+0x70>)
 8001b26:	f000 fbb1 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40014000 	.word	0x40014000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_UART_MspInit+0x94>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d133      	bne.n	8001bca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_UART_MspInit+0x98>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_UART_MspInit+0x98>)
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_UART_MspInit+0x98>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_UART_MspInit+0x98>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <HAL_UART_MspInit+0x98>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_UART_MspInit+0x98>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001baa:	2307      	movs	r3, #7
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <HAL_UART_MspInit+0x9c>)
 8001bb6:	f000 fb69 	bl	800228c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2026      	movs	r0, #38	; 0x26
 8001bc0:	f000 fa9b 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bc4:	2026      	movs	r0, #38	; 0x26
 8001bc6:	f000 fab4 	bl	8002132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40004400 	.word	0x40004400
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler+0x4>

08001bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2c:	f000 f96a 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM3_IRQHandler+0x10>)
 8001c3a:	f001 fc43 	bl	80034c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000234 	.word	0x20000234

08001c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <USART2_IRQHandler+0x10>)
 8001c4e:	f002 fb9b 	bl	8004388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000370 	.word	0x20000370

08001c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
	return 1;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_kill>:

int _kill(int pid, int sig)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c76:	f003 f8df 	bl	8004e38 <__errno>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2216      	movs	r2, #22
 8001c7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_exit>:

void _exit (int status)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ffe7 	bl	8001c6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c9e:	e7fe      	b.n	8001c9e <_exit+0x12>

08001ca0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e00a      	b.n	8001cc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cb2:	f3af 8000 	nop.w
 8001cb6:	4601      	mov	r1, r0
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	60ba      	str	r2, [r7, #8]
 8001cbe:	b2ca      	uxtb	r2, r1
 8001cc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dbf0      	blt.n	8001cb2 <_read+0x12>
	}

return len;
 8001cd0:	687b      	ldr	r3, [r7, #4]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e009      	b.n	8001d00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	60ba      	str	r2, [r7, #8]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dbf1      	blt.n	8001cec <_write+0x12>
	}
	return len;
 8001d08:	687b      	ldr	r3, [r7, #4]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_close>:

int _close(int file)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	return -1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_isatty>:

int _isatty(int file)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
	return 1;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <_sbrk+0x5c>)
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <_sbrk+0x60>)
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <_sbrk+0x64>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <_sbrk+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d207      	bcs.n	8001dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dac:	f003 f844 	bl	8004e38 <__errno>
 8001db0:	4603      	mov	r3, r0
 8001db2:	220c      	movs	r2, #12
 8001db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	e009      	b.n	8001dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <_sbrk+0x64>)
 8001dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20020000 	.word	0x20020000
 8001ddc:	00000400 	.word	0x00000400
 8001de0:	20000204 	.word	0x20000204
 8001de4:	200003c8 	.word	0x200003c8

08001de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <SystemInit+0x20>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <SystemInit+0x20>)
 8001df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e10:	480d      	ldr	r0, [pc, #52]	; (8001e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e12:	490e      	ldr	r1, [pc, #56]	; (8001e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e14:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e28:	4c0b      	ldr	r4, [pc, #44]	; (8001e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e36:	f7ff ffd7 	bl	8001de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e3a:	f003 f803 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3e:	f7ff fb17 	bl	8001470 <main>
  bx  lr    
 8001e42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e4c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e50:	0800a4c4 	.word	0x0800a4c4
  ldr r2, =_sbss
 8001e54:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e58:	200003c8 	.word	0x200003c8

08001e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC_IRQHandler>
	...

08001e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <HAL_Init+0x40>)
 8001e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_Init+0x40>)
 8001e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_Init+0x40>)
 8001e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f92b 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 f808 	bl	8001ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e94:	f7ff fd60 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023c00 	.word	0x40023c00

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x54>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x58>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f943 	bl	800214e <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00e      	b.n	8001ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80a      	bhi.n	8001eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f000 f90b 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_InitTick+0x5c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	2000000c 	.word	0x2000000c
 8001f00:	20000008 	.word	0x20000008

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	2000000c 	.word	0x2000000c
 8001f28:	200003b4 	.word	0x200003b4

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	200003b4 	.word	0x200003b4

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff8e 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff29 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff3e 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff8e 	bl	8002038 <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5d 	bl	8001fe4 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff31 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffa2 	bl	80020a0 <SysTick_Config>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff feda 	bl	8001f2c <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d008      	beq.n	8002198 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e052      	b.n	800223e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0216 	bic.w	r2, r2, #22
 80021a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d103      	bne.n	80021c8 <HAL_DMA_Abort+0x62>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0208 	bic.w	r2, r2, #8
 80021d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e8:	e013      	b.n	8002212 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ea:	f7ff fe9f 	bl	8001f2c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d90c      	bls.n	8002212 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e015      	b.n	800223e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e4      	bne.n	80021ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	223f      	movs	r2, #63	; 0x3f
 8002226:	409a      	lsls	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d004      	beq.n	8002264 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e00c      	b.n	800227e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2205      	movs	r2, #5
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e16b      	b.n	8002580 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f040 815a 	bne.w	800257a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d005      	beq.n	80022de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d130      	bne.n	8002340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 0201 	and.w	r2, r3, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b03      	cmp	r3, #3
 800234a:	d017      	beq.n	800237c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d123      	bne.n	80023d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	08da      	lsrs	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	69b9      	ldr	r1, [r7, #24]
 80023cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80b4 	beq.w	800257a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b60      	ldr	r3, [pc, #384]	; (8002598 <HAL_GPIO_Init+0x30c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4a5f      	ldr	r2, [pc, #380]	; (8002598 <HAL_GPIO_Init+0x30c>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	6453      	str	r3, [r2, #68]	; 0x44
 8002422:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <HAL_GPIO_Init+0x30c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242e:	4a5b      	ldr	r2, [pc, #364]	; (800259c <HAL_GPIO_Init+0x310>)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	220f      	movs	r2, #15
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_GPIO_Init+0x314>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d02b      	beq.n	80024b2 <HAL_GPIO_Init+0x226>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a51      	ldr	r2, [pc, #324]	; (80025a4 <HAL_GPIO_Init+0x318>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d025      	beq.n	80024ae <HAL_GPIO_Init+0x222>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a50      	ldr	r2, [pc, #320]	; (80025a8 <HAL_GPIO_Init+0x31c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <HAL_GPIO_Init+0x21e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <HAL_GPIO_Init+0x320>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d019      	beq.n	80024a6 <HAL_GPIO_Init+0x21a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4e      	ldr	r2, [pc, #312]	; (80025b0 <HAL_GPIO_Init+0x324>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x216>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <HAL_GPIO_Init+0x328>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x212>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4c      	ldr	r2, [pc, #304]	; (80025b8 <HAL_GPIO_Init+0x32c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x20e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4b      	ldr	r2, [pc, #300]	; (80025bc <HAL_GPIO_Init+0x330>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x20a>
 8002492:	2307      	movs	r3, #7
 8002494:	e00e      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 8002496:	2308      	movs	r3, #8
 8002498:	e00c      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 800249a:	2306      	movs	r3, #6
 800249c:	e00a      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 800249e:	2305      	movs	r3, #5
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x228>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	; (800259c <HAL_GPIO_Init+0x310>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d2:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_GPIO_Init+0x334>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f6:	4a32      	ldr	r2, [pc, #200]	; (80025c0 <HAL_GPIO_Init+0x334>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_GPIO_Init+0x334>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002520:	4a27      	ldr	r2, [pc, #156]	; (80025c0 <HAL_GPIO_Init+0x334>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_GPIO_Init+0x334>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <HAL_GPIO_Init+0x334>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_GPIO_Init+0x334>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <HAL_GPIO_Init+0x334>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f ae90 	bls.w	80022a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40021400 	.word	0x40021400
 80025b8:	40021800 	.word	0x40021800
 80025bc:	40021c00 	.word	0x40021c00
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e264      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d075      	beq.n	80026ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025e2:	4ba3      	ldr	r3, [pc, #652]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d00c      	beq.n	8002608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4ba0      	ldr	r3, [pc, #640]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d112      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b9d      	ldr	r3, [pc, #628]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002606:	d10b      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4b99      	ldr	r3, [pc, #612]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05b      	beq.n	80026cc <HAL_RCC_OscConfig+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d157      	bne.n	80026cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e23f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x74>
 800262a:	4b91      	ldr	r3, [pc, #580]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a90      	ldr	r2, [pc, #576]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x98>
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a8a      	ldr	r2, [pc, #552]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a87      	ldr	r2, [pc, #540]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 800265c:	4b84      	ldr	r3, [pc, #528]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a83      	ldr	r2, [pc, #524]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b81      	ldr	r3, [pc, #516]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a80      	ldr	r2, [pc, #512]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff fc56 	bl	8001f2c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff fc52 	bl	8001f2c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e204      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b76      	ldr	r3, [pc, #472]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xc0>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fc42 	bl	8001f2c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff fc3e 	bl	8001f2c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1f0      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0xe8>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026da:	4b65      	ldr	r3, [pc, #404]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1c4      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4952      	ldr	r1, [pc, #328]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b4f      	ldr	r3, [pc, #316]	; (8002874 <HAL_RCC_OscConfig+0x2b0>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff fbf7 	bl	8001f2c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002742:	f7ff fbf3 	bl	8001f2c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1a5      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4940      	ldr	r1, [pc, #256]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <HAL_RCC_OscConfig+0x2b0>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7ff fbd6 	bl	8001f2c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002784:	f7ff fbd2 	bl	8001f2c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e184      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d030      	beq.n	8002810 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCC_OscConfig+0x2b4>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7ff fbb6 	bl	8001f2c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c4:	f7ff fbb2 	bl	8001f2c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e164      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x200>
 80027e2:	e015      	b.n	8002810 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x2b4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff fb9f 	bl	8001f2c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f2:	f7ff fb9b 	bl	8001f2c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e14d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a0 	beq.w	800295e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x2b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d121      	bne.n	800289e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_RCC_OscConfig+0x2b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_RCC_OscConfig+0x2b8>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7ff fb61 	bl	8001f2c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	e011      	b.n	8002892 <HAL_RCC_OscConfig+0x2ce>
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	42470000 	.word	0x42470000
 8002878:	42470e80 	.word	0x42470e80
 800287c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7ff fb54 	bl	8001f2c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e106      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCC_OscConfig+0x4e4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d106      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2f0>
 80028a6:	4b81      	ldr	r3, [pc, #516]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a80      	ldr	r2, [pc, #512]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
 80028b2:	e01c      	b.n	80028ee <HAL_RCC_OscConfig+0x32a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x312>
 80028bc:	4b7b      	ldr	r3, [pc, #492]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a7a      	ldr	r2, [pc, #488]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	4b78      	ldr	r3, [pc, #480]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a77      	ldr	r2, [pc, #476]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x32a>
 80028d6:	4b75      	ldr	r3, [pc, #468]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a74      	ldr	r2, [pc, #464]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
 80028e2:	4b72      	ldr	r3, [pc, #456]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a71      	ldr	r2, [pc, #452]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d015      	beq.n	8002922 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7ff fb19 	bl	8001f2c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7ff fb15 	bl	8001f2c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0c5      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b65      	ldr	r3, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ee      	beq.n	80028fe <HAL_RCC_OscConfig+0x33a>
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7ff fb03 	bl	8001f2c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7ff faff 	bl	8001f2c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0af      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	4b5a      	ldr	r3, [pc, #360]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ee      	bne.n	800292a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b56      	ldr	r3, [pc, #344]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a55      	ldr	r2, [pc, #340]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 809b 	beq.w	8002a9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002968:	4b50      	ldr	r3, [pc, #320]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d05c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d141      	bne.n	8002a00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <HAL_RCC_OscConfig+0x4ec>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7ff fad3 	bl	8001f2c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298a:	f7ff facf 	bl	8001f2c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e081      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d2:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <HAL_RCC_OscConfig+0x4ec>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff faa8 	bl	8001f2c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7ff faa4 	bl	8001f2c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e056      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x41c>
 80029fe:	e04e      	b.n	8002a9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_RCC_OscConfig+0x4ec>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7ff fa91 	bl	8001f2c <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff fa8d 	bl	8001f2c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e03f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	4b22      	ldr	r3, [pc, #136]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x44a>
 8002a2c:	e037      	b.n	8002a9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e032      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d028      	beq.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d121      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d11a      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d111      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	42470060 	.word	0x42470060

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0cc      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d90c      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d044      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d119      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e067      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4934      	ldr	r1, [pc, #208]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7ff f9c2 	bl	8001f2c <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7ff f9be 	bl	8001f2c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d20c      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff f922 	bl	8001ea4 <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023c00 	.word	0x40023c00
 8002c70:	40023800 	.word	0x40023800
 8002c74:	08009fd0 	.word	0x08009fd0
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	20000008 	.word	0x20000008

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	2300      	movs	r3, #0
 8002c92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c98:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	f200 80bd 	bhi.w	8002e24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x3a>
 8002cb2:	e0b7      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cb6:	60bb      	str	r3, [r7, #8]
       break;
 8002cb8:	e0b7      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cba:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002cbc:	60bb      	str	r3, [r7, #8]
      break;
 8002cbe:	e0b4      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d04d      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd6:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	ea02 0800 	and.w	r8, r2, r0
 8002cee:	ea03 0901 	and.w	r9, r3, r1
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	014b      	lsls	r3, r1, #5
 8002d00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d04:	0142      	lsls	r2, r0, #5
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	ebb0 0008 	subs.w	r0, r0, r8
 8002d0e:	eb61 0109 	sbc.w	r1, r1, r9
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	018b      	lsls	r3, r1, #6
 8002d1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d20:	0182      	lsls	r2, r0, #6
 8002d22:	1a12      	subs	r2, r2, r0
 8002d24:	eb63 0301 	sbc.w	r3, r3, r1
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	00d9      	lsls	r1, r3, #3
 8002d32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d36:	00d0      	lsls	r0, r2, #3
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	eb12 0208 	adds.w	r2, r2, r8
 8002d40:	eb43 0309 	adc.w	r3, r3, r9
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	0259      	lsls	r1, r3, #9
 8002d4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d52:	0250      	lsls	r0, r2, #9
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	f7fd ff90 	bl	8000c88 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e04a      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	ea02 0400 	and.w	r4, r2, r0
 8002d8a:	ea03 0501 	and.w	r5, r3, r1
 8002d8e:	4620      	mov	r0, r4
 8002d90:	4629      	mov	r1, r5
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	014b      	lsls	r3, r1, #5
 8002d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002da0:	0142      	lsls	r2, r0, #5
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	1b00      	subs	r0, r0, r4
 8002da8:	eb61 0105 	sbc.w	r1, r1, r5
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	018b      	lsls	r3, r1, #6
 8002db6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dba:	0182      	lsls	r2, r0, #6
 8002dbc:	1a12      	subs	r2, r2, r0
 8002dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	00d9      	lsls	r1, r3, #3
 8002dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dd0:	00d0      	lsls	r0, r2, #3
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	1912      	adds	r2, r2, r4
 8002dd8:	eb45 0303 	adc.w	r3, r5, r3
 8002ddc:	f04f 0000 	mov.w	r0, #0
 8002de0:	f04f 0100 	mov.w	r1, #0
 8002de4:	0299      	lsls	r1, r3, #10
 8002de6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dea:	0290      	lsls	r0, r2, #10
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	f7fd ff44 	bl	8000c88 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4613      	mov	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	3301      	adds	r3, #1
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	60bb      	str	r3, [r7, #8]
      break;
 8002e22:	e002      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e26:	60bb      	str	r3, [r7, #8]
      break;
 8002e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	00f42400 	.word	0x00f42400
 8002e40:	007a1200 	.word	0x007a1200

08002e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000004 	.word	0x20000004

08002e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e60:	f7ff fff0 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	0a9b      	lsrs	r3, r3, #10
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4903      	ldr	r1, [pc, #12]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	08009fe0 	.word	0x08009fe0

08002e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e88:	f7ff ffdc 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	0b5b      	lsrs	r3, r3, #13
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4903      	ldr	r1, [pc, #12]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	08009fe0 	.word	0x08009fe0

08002eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e041      	b.n	8002f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fdb0 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 fd9c 	bl	8003a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d001      	beq.n	8002f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e04e      	b.n	8003002 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a23      	ldr	r2, [pc, #140]	; (8003010 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d022      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d01d      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1f      	ldr	r2, [pc, #124]	; (8003014 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	; (800301c <HAL_TIM_Base_Start_IT+0xd0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	; (8003024 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x80>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a18      	ldr	r2, [pc, #96]	; (8003028 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d111      	bne.n	8002ff0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d010      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	e007      	b.n	8003000 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40010000 	.word	0x40010000
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800
 800301c:	40000c00 	.word	0x40000c00
 8003020:	40010400 	.word	0x40010400
 8003024:	40014000 	.word	0x40014000
 8003028:	40001800 	.word	0x40001800

0800302c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e041      	b.n	80030c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe fd18 	bl	8001a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f000 fcdc 	bl	8003a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x24>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e022      	b.n	8003136 <HAL_TIM_PWM_Start+0x6a>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d109      	bne.n	800310a <HAL_TIM_PWM_Start+0x3e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e015      	b.n	8003136 <HAL_TIM_PWM_Start+0x6a>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d109      	bne.n	8003124 <HAL_TIM_PWM_Start+0x58>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e008      	b.n	8003136 <HAL_TIM_PWM_Start+0x6a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07c      	b.n	8003238 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_TIM_PWM_Start+0x82>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800314c:	e013      	b.n	8003176 <HAL_TIM_PWM_Start+0xaa>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0x92>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800315c:	e00b      	b.n	8003176 <HAL_TIM_PWM_Start+0xaa>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0xa2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316c:	e003      	b.n	8003176 <HAL_TIM_PWM_Start+0xaa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2201      	movs	r2, #1
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 ff3c 	bl	8003ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <HAL_TIM_PWM_Start+0x174>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_TIM_PWM_Start+0xcc>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <HAL_TIM_PWM_Start+0x178>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_TIM_PWM_Start+0xd0>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_TIM_PWM_Start+0xd2>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a22      	ldr	r2, [pc, #136]	; (8003240 <HAL_TIM_PWM_Start+0x174>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d022      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d01d      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <HAL_TIM_PWM_Start+0x17c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d018      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <HAL_TIM_PWM_Start+0x180>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_TIM_PWM_Start+0x184>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00e      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a16      	ldr	r2, [pc, #88]	; (8003244 <HAL_TIM_PWM_Start+0x178>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a18      	ldr	r2, [pc, #96]	; (8003254 <HAL_TIM_PWM_Start+0x188>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_TIM_PWM_Start+0x136>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a16      	ldr	r2, [pc, #88]	; (8003258 <HAL_TIM_PWM_Start+0x18c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d111      	bne.n	8003226 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b06      	cmp	r3, #6
 8003212:	d010      	beq.n	8003236 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003224:	e007      	b.n	8003236 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40010000 	.word	0x40010000
 8003244:	40010400 	.word	0x40010400
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40014000 	.word	0x40014000
 8003258:	40001800 	.word	0x40001800

0800325c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e097      	b.n	80033a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fe fb8f 	bl	80019a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a0:	f023 0307 	bic.w	r3, r3, #7
 80032a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f000 fbb9 	bl	8003a28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	4313      	orrs	r3, r2
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80032fc:	f023 030c 	bic.w	r3, r3, #12
 8003300:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800330c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	4313      	orrs	r3, r2
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	011a      	lsls	r2, r3, #4
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	031b      	lsls	r3, r3, #12
 800332c:	4313      	orrs	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	4313      	orrs	r3, r2
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80033d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d110      	bne.n	80033fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d102      	bne.n	80033e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80033de:	7b7b      	ldrb	r3, [r7, #13]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d001      	beq.n	80033e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e069      	b.n	80034bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f8:	e031      	b.n	800345e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d110      	bne.n	8003422 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003400:	7bbb      	ldrb	r3, [r7, #14]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d102      	bne.n	800340c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003406:	7b3b      	ldrb	r3, [r7, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e055      	b.n	80034bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003420:	e01d      	b.n	800345e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d108      	bne.n	800343a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003428:	7bbb      	ldrb	r3, [r7, #14]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800342e:	7b7b      	ldrb	r3, [r7, #13]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d102      	bne.n	800343a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003434:	7b3b      	ldrb	r3, [r7, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e03e      	b.n	80034bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_TIM_Encoder_Start+0xc4>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b04      	cmp	r3, #4
 8003468:	d008      	beq.n	800347c <HAL_TIM_Encoder_Start+0xd4>
 800346a:	e00f      	b.n	800348c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2201      	movs	r2, #1
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fdc1 	bl	8003ffc <TIM_CCxChannelCmd>
      break;
 800347a:	e016      	b.n	80034aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2201      	movs	r2, #1
 8003482:	2104      	movs	r1, #4
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fdb9 	bl	8003ffc <TIM_CCxChannelCmd>
      break;
 800348a:	e00e      	b.n	80034aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fdb1 	bl	8003ffc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	2104      	movs	r1, #4
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fdaa 	bl	8003ffc <TIM_CCxChannelCmd>
      break;
 80034a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d122      	bne.n	8003520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d11b      	bne.n	8003520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0202 	mvn.w	r2, #2
 80034f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa70 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa62 	bl	80039d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fa73 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0204 	mvn.w	r2, #4
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa46 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fa38 	bl	80039d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fa49 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b08      	cmp	r3, #8
 8003580:	d122      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d11b      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0208 	mvn.w	r2, #8
 8003598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2204      	movs	r2, #4
 800359e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa1c 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fa0e 	bl	80039d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fa1f 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d122      	bne.n	800361c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d11b      	bne.n	800361c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0210 	mvn.w	r2, #16
 80035ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2208      	movs	r2, #8
 80035f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f9f2 	bl	80039ec <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f9e4 	bl	80039d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f9f5 	bl	8003a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0201 	mvn.w	r2, #1
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fcf8 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fd70 	bl	8004154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d10e      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d107      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f9ba 	bl	8003a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d10e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d107      	bne.n	80036cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0220 	mvn.w	r2, #32
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fd3a 	bl	8004140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e0ac      	b.n	8003848 <HAL_TIM_PWM_ConfigChannel+0x174>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	f200 809f 	bhi.w	800383c <HAL_TIM_PWM_ConfigChannel+0x168>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003739 	.word	0x08003739
 8003708:	0800383d 	.word	0x0800383d
 800370c:	0800383d 	.word	0x0800383d
 8003710:	0800383d 	.word	0x0800383d
 8003714:	08003779 	.word	0x08003779
 8003718:	0800383d 	.word	0x0800383d
 800371c:	0800383d 	.word	0x0800383d
 8003720:	0800383d 	.word	0x0800383d
 8003724:	080037bb 	.word	0x080037bb
 8003728:	0800383d 	.word	0x0800383d
 800372c:	0800383d 	.word	0x0800383d
 8003730:	0800383d 	.word	0x0800383d
 8003734:	080037fb 	.word	0x080037fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fa12 	bl	8003b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0208 	orr.w	r2, r2, #8
 8003752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6999      	ldr	r1, [r3, #24]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	619a      	str	r2, [r3, #24]
      break;
 8003776:	e062      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fa62 	bl	8003c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	619a      	str	r2, [r3, #24]
      break;
 80037b8:	e041      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fab7 	bl	8003d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0208 	orr.w	r2, r2, #8
 80037d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0204 	bic.w	r2, r2, #4
 80037e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69d9      	ldr	r1, [r3, #28]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	61da      	str	r2, [r3, #28]
      break;
 80037f8:	e021      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fb0b 	bl	8003e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	021a      	lsls	r2, r3, #8
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	61da      	str	r2, [r3, #28]
      break;
 800383a:	e000      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800383c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIM_ConfigClockSource+0x18>
 8003864:	2302      	movs	r3, #2
 8003866:	e0b3      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x180>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800388e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a0:	d03e      	beq.n	8003920 <HAL_TIM_ConfigClockSource+0xd0>
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a6:	f200 8087 	bhi.w	80039b8 <HAL_TIM_ConfigClockSource+0x168>
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ae:	f000 8085 	beq.w	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b6:	d87f      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x168>
 80038b8:	2b70      	cmp	r3, #112	; 0x70
 80038ba:	d01a      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0xa2>
 80038bc:	2b70      	cmp	r3, #112	; 0x70
 80038be:	d87b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x168>
 80038c0:	2b60      	cmp	r3, #96	; 0x60
 80038c2:	d050      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x116>
 80038c4:	2b60      	cmp	r3, #96	; 0x60
 80038c6:	d877      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x168>
 80038c8:	2b50      	cmp	r3, #80	; 0x50
 80038ca:	d03c      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0xf6>
 80038cc:	2b50      	cmp	r3, #80	; 0x50
 80038ce:	d873      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x168>
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d058      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x136>
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d86f      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x168>
 80038d8:	2b30      	cmp	r3, #48	; 0x30
 80038da:	d064      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x156>
 80038dc:	2b30      	cmp	r3, #48	; 0x30
 80038de:	d86b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x168>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d060      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x156>
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d867      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x168>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d05c      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x156>
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d05a      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038f0:	e062      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f000 fb5b 	bl	8003fbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003914:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	609a      	str	r2, [r3, #8]
      break;
 800391e:	e04e      	b.n	80039be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f000 fb44 	bl	8003fbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003942:	609a      	str	r2, [r3, #8]
      break;
 8003944:	e03b      	b.n	80039be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	461a      	mov	r2, r3
 8003954:	f000 fab8 	bl	8003ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2150      	movs	r1, #80	; 0x50
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fb11 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003964:	e02b      	b.n	80039be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	461a      	mov	r2, r3
 8003974:	f000 fad7 	bl	8003f26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2160      	movs	r1, #96	; 0x60
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fb01 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003984:	e01b      	b.n	80039be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	461a      	mov	r2, r3
 8003994:	f000 fa98 	bl	8003ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2140      	movs	r1, #64	; 0x40
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 faf1 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 80039a4:	e00b      	b.n	80039be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f000 fae8 	bl	8003f86 <TIM_ITRx_SetConfig>
        break;
 80039b6:	e002      	b.n	80039be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a40      	ldr	r2, [pc, #256]	; (8003b3c <TIM_Base_SetConfig+0x114>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d00f      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3d      	ldr	r2, [pc, #244]	; (8003b40 <TIM_Base_SetConfig+0x118>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3c      	ldr	r2, [pc, #240]	; (8003b44 <TIM_Base_SetConfig+0x11c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3b      	ldr	r2, [pc, #236]	; (8003b48 <TIM_Base_SetConfig+0x120>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_Base_SetConfig+0x40>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a3a      	ldr	r2, [pc, #232]	; (8003b4c <TIM_Base_SetConfig+0x124>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d108      	bne.n	8003a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2f      	ldr	r2, [pc, #188]	; (8003b3c <TIM_Base_SetConfig+0x114>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02b      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d027      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2c      	ldr	r2, [pc, #176]	; (8003b40 <TIM_Base_SetConfig+0x118>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d023      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a2b      	ldr	r2, [pc, #172]	; (8003b44 <TIM_Base_SetConfig+0x11c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01f      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2a      	ldr	r2, [pc, #168]	; (8003b48 <TIM_Base_SetConfig+0x120>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01b      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <TIM_Base_SetConfig+0x124>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d017      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <TIM_Base_SetConfig+0x128>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a27      	ldr	r2, [pc, #156]	; (8003b54 <TIM_Base_SetConfig+0x12c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a26      	ldr	r2, [pc, #152]	; (8003b58 <TIM_Base_SetConfig+0x130>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <TIM_Base_SetConfig+0x134>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <TIM_Base_SetConfig+0x138>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <TIM_Base_SetConfig+0x13c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d108      	bne.n	8003aec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <TIM_Base_SetConfig+0x114>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0xf8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <TIM_Base_SetConfig+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d103      	bne.n	8003b28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	615a      	str	r2, [r3, #20]
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40010400 	.word	0x40010400
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800
 8003b5c:	40001800 	.word	0x40001800
 8003b60:	40001c00 	.word	0x40001c00
 8003b64:	40002000 	.word	0x40002000

08003b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f023 0201 	bic.w	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <TIM_OC1_SetConfig+0xd8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC1_SetConfig+0x64>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <TIM_OC1_SetConfig+0xdc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10c      	bne.n	8003be6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0308 	bic.w	r3, r3, #8
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <TIM_OC1_SetConfig+0xd8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC1_SetConfig+0x8e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <TIM_OC1_SetConfig+0xdc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d111      	bne.n	8003c1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	621a      	str	r2, [r3, #32]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40010400 	.word	0x40010400

08003c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f023 0210 	bic.w	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0320 	bic.w	r3, r3, #32
 8003c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <TIM_OC2_SetConfig+0xe4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC2_SetConfig+0x68>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <TIM_OC2_SetConfig+0xe8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10d      	bne.n	8003ccc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <TIM_OC2_SetConfig+0xe4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_OC2_SetConfig+0x94>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <TIM_OC2_SetConfig+0xe8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d113      	bne.n	8003d04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010400 	.word	0x40010400

08003d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <TIM_OC3_SetConfig+0xe0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_OC3_SetConfig+0x66>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <TIM_OC3_SetConfig+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d10d      	bne.n	8003db6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <TIM_OC3_SetConfig+0xe0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_OC3_SetConfig+0x92>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <TIM_OC3_SetConfig+0xe4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d113      	bne.n	8003dee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	621a      	str	r2, [r3, #32]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40010400 	.word	0x40010400

08003e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <TIM_OC4_SetConfig+0xa4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_OC4_SetConfig+0x68>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <TIM_OC4_SetConfig+0xa8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d109      	bne.n	8003e98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f023 030a 	bic.w	r3, r3, #10
 8003f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f023 0210 	bic.w	r2, r3, #16
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	031b      	lsls	r3, r3, #12
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f043 0307 	orr.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2201      	movs	r2, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	43db      	mvns	r3, r3
 800401e:	401a      	ands	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e05a      	b.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a21      	ldr	r2, [pc, #132]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d022      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d01d      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d018      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a17      	ldr	r2, [pc, #92]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10c      	bne.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40010400 	.word	0x40010400
 8004138:	40014000 	.word	0x40014000
 800413c:	40001800 	.word	0x40001800

08004140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e03f      	b.n	80041fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fd fcd6 	bl	8001b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	; 0x24
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fc7b 	bl	8004aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b08a      	sub	sp, #40	; 0x28
 8004206:	af02      	add	r7, sp, #8
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d17c      	bne.n	800431c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_UART_Transmit+0x2c>
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e075      	b.n	800431e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_UART_Transmit+0x3e>
 800423c:	2302      	movs	r3, #2
 800423e:	e06e      	b.n	800431e <HAL_UART_Transmit+0x11c>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2221      	movs	r2, #33	; 0x21
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004256:	f7fd fe69 	bl	8001f2c <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d108      	bne.n	8004284 <HAL_UART_Transmit+0x82>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004294:	e02a      	b.n	80042ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fa3d 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e036      	b.n	800431e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3302      	adds	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e007      	b.n	80042de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1cf      	bne.n	8004296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2140      	movs	r1, #64	; 0x40
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fa0d 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e006      	b.n	800431e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	4613      	mov	r3, r2
 8004332:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b20      	cmp	r3, #32
 800433e:	d11d      	bne.n	800437c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_UART_Receive_IT+0x26>
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e016      	b.n	800437e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_UART_Receive_IT+0x38>
 800435a:	2302      	movs	r3, #2
 800435c:	e00f      	b.n	800437e <HAL_UART_Receive_IT+0x58>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	461a      	mov	r2, r3
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fa1e 	bl	80047b4 <UART_Start_Receive_IT>
 8004378:	4603      	mov	r3, r0
 800437a:	e000      	b.n	800437e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_UART_IRQHandler+0x52>
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fad1 	bl	800497a <UART_Receive_IT>
      return;
 80043d8:	e17c      	b.n	80046d4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80b1 	beq.w	8004544 <HAL_UART_IRQHandler+0x1bc>
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d105      	bne.n	80043f8 <HAL_UART_IRQHandler+0x70>
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80a6 	beq.w	8004544 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_UART_IRQHandler+0x90>
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_UART_IRQHandler+0xb0>
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	f043 0202 	orr.w	r2, r3, #2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_UART_IRQHandler+0xd0>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	f043 0204 	orr.w	r2, r3, #4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00f      	beq.n	8004482 <HAL_UART_IRQHandler+0xfa>
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_UART_IRQHandler+0xee>
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f043 0208 	orr.w	r2, r3, #8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 811f 	beq.w	80046ca <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_UART_IRQHandler+0x11e>
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fa6a 	bl	800497a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d102      	bne.n	80044ce <HAL_UART_IRQHandler+0x146>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d031      	beq.n	8004532 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f9aa 	bl	8004828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d123      	bne.n	800452a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d013      	beq.n	8004522 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	4a77      	ldr	r2, [pc, #476]	; (80046dc <HAL_UART_IRQHandler+0x354>)
 8004500:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd fe9d 	bl	8002246 <HAL_DMA_Abort_IT>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800451c:	4610      	mov	r0, r2
 800451e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004520:	e00e      	b.n	8004540 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8e6 	bl	80046f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	e00a      	b.n	8004540 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8e2 	bl	80046f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004530:	e006      	b.n	8004540 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f8de 	bl	80046f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800453e:	e0c4      	b.n	80046ca <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	bf00      	nop
    return;
 8004542:	e0c2      	b.n	80046ca <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b01      	cmp	r3, #1
 800454a:	f040 80a2 	bne.w	8004692 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 809c 	beq.w	8004692 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8096 	beq.w	8004692 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	d14f      	bne.n	800462a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004594:	8a3b      	ldrh	r3, [r7, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8099 	beq.w	80046ce <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045a0:	8a3a      	ldrh	r2, [r7, #16]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	f080 8093 	bcs.w	80046ce <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8a3a      	ldrh	r2, [r7, #16]
 80045ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b8:	d02b      	beq.n	8004612 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0210 	bic.w	r2, r2, #16
 8004606:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	4618      	mov	r0, r3
 800460e:	f7fd fdaa 	bl	8002166 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800461a:	b29b      	uxth	r3, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	b29b      	uxth	r3, r3
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f870 	bl	8004708 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004628:	e051      	b.n	80046ce <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004632:	b29b      	uxth	r3, r3
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d047      	beq.n	80046d2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004642:	8a7b      	ldrh	r3, [r7, #18]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d044      	beq.n	80046d2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004656:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0210 	bic.w	r2, r2, #16
 8004684:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004686:	8a7b      	ldrh	r3, [r7, #18]
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f83c 	bl	8004708 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004690:	e01f      	b.n	80046d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_UART_IRQHandler+0x326>
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8ff 	bl	80048aa <UART_Transmit_IT>
    return;
 80046ac:	e012      	b.n	80046d4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <HAL_UART_IRQHandler+0x34c>
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f941 	bl	800494a <UART_EndTransmit_IT>
    return;
 80046c8:	e004      	b.n	80046d4 <HAL_UART_IRQHandler+0x34c>
    return;
 80046ca:	bf00      	nop
 80046cc:	e002      	b.n	80046d4 <HAL_UART_IRQHandler+0x34c>
      return;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <HAL_UART_IRQHandler+0x34c>
      return;
 80046d2:	bf00      	nop
  }
}
 80046d4:	3728      	adds	r7, #40	; 0x28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	08004883 	.word	0x08004883

080046e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004730:	e02c      	b.n	800478c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d028      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <UART_WaitOnFlagUntilTimeout+0x30>
 8004740:	f7fd fbf4 	bl	8001f2c <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	429a      	cmp	r2, r3
 800474e:	d21d      	bcs.n	800478c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800475e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e00f      	b.n	80047ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4013      	ands	r3, r2
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	429a      	cmp	r2, r3
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d0c3      	beq.n	8004732 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	88fa      	ldrh	r2, [r7, #6]
 80047d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2222      	movs	r2, #34	; 0x22
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0220 	orr.w	r2, r2, #32
 8004818:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800483e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b01      	cmp	r3, #1
 8004856:	d107      	bne.n	8004868 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0210 	bic.w	r2, r2, #16
 8004866:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f7ff ff29 	bl	80046f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b21      	cmp	r3, #33	; 0x21
 80048bc:	d13e      	bne.n	800493c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c6:	d114      	bne.n	80048f2 <UART_Transmit_IT+0x48>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d110      	bne.n	80048f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	1c9a      	adds	r2, r3, #2
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	621a      	str	r2, [r3, #32]
 80048f0:	e008      	b.n	8004904 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	1c59      	adds	r1, r3, #1
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6211      	str	r1, [r2, #32]
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29b      	uxth	r3, r3
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4619      	mov	r1, r3
 8004912:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10f      	bne.n	8004938 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004926:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004936:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e000      	b.n	800493e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004960:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff feb8 	bl	80046e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b22      	cmp	r3, #34	; 0x22
 800498c:	f040 8087 	bne.w	8004a9e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d117      	bne.n	80049ca <UART_Receive_IT+0x50>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d113      	bne.n	80049ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	1c9a      	adds	r2, r3, #2
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28
 80049c8:	e026      	b.n	8004a18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049dc:	d007      	beq.n	80049ee <UART_Receive_IT+0x74>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <UART_Receive_IT+0x82>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e008      	b.n	8004a0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4619      	mov	r1, r3
 8004a26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d136      	bne.n	8004a9a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0220 	bic.w	r2, r2, #32
 8004a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d10e      	bne.n	8004a8a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0210 	bic.w	r2, r2, #16
 8004a7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fe40 	bl	8004708 <HAL_UARTEx_RxEventCallback>
 8004a88:	e002      	b.n	8004a90 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc fcbc 	bl	8001408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e002      	b.n	8004aa0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e000      	b.n	8004aa0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	b09f      	sub	sp, #124	; 0x7c
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	68d9      	ldr	r1, [r3, #12]
 8004ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	ea40 0301 	orr.w	r3, r0, r1
 8004ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004aec:	f021 010c 	bic.w	r1, r1, #12
 8004af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004af6:	430b      	orrs	r3, r1
 8004af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b06:	6999      	ldr	r1, [r3, #24]
 8004b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	ea40 0301 	orr.w	r3, r0, r1
 8004b10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4bc5      	ldr	r3, [pc, #788]	; (8004e2c <UART_SetConfig+0x384>)
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d004      	beq.n	8004b26 <UART_SetConfig+0x7e>
 8004b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4bc3      	ldr	r3, [pc, #780]	; (8004e30 <UART_SetConfig+0x388>)
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d103      	bne.n	8004b2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b26:	f7fe f9ad 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 8004b2a:	6778      	str	r0, [r7, #116]	; 0x74
 8004b2c:	e002      	b.n	8004b34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b2e:	f7fe f995 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8004b32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3c:	f040 80b6 	bne.w	8004cac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b42:	461c      	mov	r4, r3
 8004b44:	f04f 0500 	mov.w	r5, #0
 8004b48:	4622      	mov	r2, r4
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	1891      	adds	r1, r2, r2
 8004b4e:	6439      	str	r1, [r7, #64]	; 0x40
 8004b50:	415b      	adcs	r3, r3
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
 8004b54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b58:	1912      	adds	r2, r2, r4
 8004b5a:	eb45 0303 	adc.w	r3, r5, r3
 8004b5e:	f04f 0000 	mov.w	r0, #0
 8004b62:	f04f 0100 	mov.w	r1, #0
 8004b66:	00d9      	lsls	r1, r3, #3
 8004b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b6c:	00d0      	lsls	r0, r2, #3
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	1911      	adds	r1, r2, r4
 8004b74:	6639      	str	r1, [r7, #96]	; 0x60
 8004b76:	416b      	adcs	r3, r5
 8004b78:	667b      	str	r3, [r7, #100]	; 0x64
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	1891      	adds	r1, r2, r2
 8004b86:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b88:	415b      	adcs	r3, r3
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b94:	f7fc f878 	bl	8000c88 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4ba5      	ldr	r3, [pc, #660]	; (8004e34 <UART_SetConfig+0x38c>)
 8004b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	011e      	lsls	r6, r3, #4
 8004ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ba8:	461c      	mov	r4, r3
 8004baa:	f04f 0500 	mov.w	r5, #0
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	1891      	adds	r1, r2, r2
 8004bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bb6:	415b      	adcs	r3, r3
 8004bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bbe:	1912      	adds	r2, r2, r4
 8004bc0:	eb45 0303 	adc.w	r3, r5, r3
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f04f 0100 	mov.w	r1, #0
 8004bcc:	00d9      	lsls	r1, r3, #3
 8004bce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bd2:	00d0      	lsls	r0, r2, #3
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	1911      	adds	r1, r2, r4
 8004bda:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bdc:	416b      	adcs	r3, r5
 8004bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	461a      	mov	r2, r3
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	1891      	adds	r1, r2, r2
 8004bec:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bee:	415b      	adcs	r3, r3
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004bfa:	f7fc f845 	bl	8000c88 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4b8c      	ldr	r3, [pc, #560]	; (8004e34 <UART_SetConfig+0x38c>)
 8004c04:	fba3 1302 	umull	r1, r3, r3, r2
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	2164      	movs	r1, #100	; 0x64
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	3332      	adds	r3, #50	; 0x32
 8004c16:	4a87      	ldr	r2, [pc, #540]	; (8004e34 <UART_SetConfig+0x38c>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c24:	441e      	add	r6, r3
 8004c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	1894      	adds	r4, r2, r2
 8004c34:	623c      	str	r4, [r7, #32]
 8004c36:	415b      	adcs	r3, r3
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c3e:	1812      	adds	r2, r2, r0
 8004c40:	eb41 0303 	adc.w	r3, r1, r3
 8004c44:	f04f 0400 	mov.w	r4, #0
 8004c48:	f04f 0500 	mov.w	r5, #0
 8004c4c:	00dd      	lsls	r5, r3, #3
 8004c4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c52:	00d4      	lsls	r4, r2, #3
 8004c54:	4622      	mov	r2, r4
 8004c56:	462b      	mov	r3, r5
 8004c58:	1814      	adds	r4, r2, r0
 8004c5a:	653c      	str	r4, [r7, #80]	; 0x50
 8004c5c:	414b      	adcs	r3, r1
 8004c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	461a      	mov	r2, r3
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	1891      	adds	r1, r2, r2
 8004c6c:	61b9      	str	r1, [r7, #24]
 8004c6e:	415b      	adcs	r3, r3
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c7a:	f7fc f805 	bl	8000c88 <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4b6c      	ldr	r3, [pc, #432]	; (8004e34 <UART_SetConfig+0x38c>)
 8004c84:	fba3 1302 	umull	r1, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	2164      	movs	r1, #100	; 0x64
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	3332      	adds	r3, #50	; 0x32
 8004c96:	4a67      	ldr	r2, [pc, #412]	; (8004e34 <UART_SetConfig+0x38c>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	f003 0207 	and.w	r2, r3, #7
 8004ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4432      	add	r2, r6
 8004ca8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004caa:	e0b9      	b.n	8004e20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cae:	461c      	mov	r4, r3
 8004cb0:	f04f 0500 	mov.w	r5, #0
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	1891      	adds	r1, r2, r2
 8004cba:	6139      	str	r1, [r7, #16]
 8004cbc:	415b      	adcs	r3, r3
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cc4:	1912      	adds	r2, r2, r4
 8004cc6:	eb45 0303 	adc.w	r3, r5, r3
 8004cca:	f04f 0000 	mov.w	r0, #0
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	00d9      	lsls	r1, r3, #3
 8004cd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cd8:	00d0      	lsls	r0, r2, #3
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	eb12 0804 	adds.w	r8, r2, r4
 8004ce2:	eb43 0905 	adc.w	r9, r3, r5
 8004ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f04f 0100 	mov.w	r1, #0
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	008b      	lsls	r3, r1, #2
 8004cfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cfe:	0082      	lsls	r2, r0, #2
 8004d00:	4640      	mov	r0, r8
 8004d02:	4649      	mov	r1, r9
 8004d04:	f7fb ffc0 	bl	8000c88 <__aeabi_uldivmod>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <UART_SetConfig+0x38c>)
 8004d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	011e      	lsls	r6, r3, #4
 8004d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f04f 0100 	mov.w	r1, #0
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	1894      	adds	r4, r2, r2
 8004d24:	60bc      	str	r4, [r7, #8]
 8004d26:	415b      	adcs	r3, r3
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d2e:	1812      	adds	r2, r2, r0
 8004d30:	eb41 0303 	adc.w	r3, r1, r3
 8004d34:	f04f 0400 	mov.w	r4, #0
 8004d38:	f04f 0500 	mov.w	r5, #0
 8004d3c:	00dd      	lsls	r5, r3, #3
 8004d3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d42:	00d4      	lsls	r4, r2, #3
 8004d44:	4622      	mov	r2, r4
 8004d46:	462b      	mov	r3, r5
 8004d48:	1814      	adds	r4, r2, r0
 8004d4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d4c:	414b      	adcs	r3, r1
 8004d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f04f 0100 	mov.w	r1, #0
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	008b      	lsls	r3, r1, #2
 8004d64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d68:	0082      	lsls	r2, r0, #2
 8004d6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d6e:	f7fb ff8b 	bl	8000c88 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <UART_SetConfig+0x38c>)
 8004d78:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	2164      	movs	r1, #100	; 0x64
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	3332      	adds	r3, #50	; 0x32
 8004d8a:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <UART_SetConfig+0x38c>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d96:	441e      	add	r6, r3
 8004d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	1894      	adds	r4, r2, r2
 8004da6:	603c      	str	r4, [r7, #0]
 8004da8:	415b      	adcs	r3, r3
 8004daa:	607b      	str	r3, [r7, #4]
 8004dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004db0:	1812      	adds	r2, r2, r0
 8004db2:	eb41 0303 	adc.w	r3, r1, r3
 8004db6:	f04f 0400 	mov.w	r4, #0
 8004dba:	f04f 0500 	mov.w	r5, #0
 8004dbe:	00dd      	lsls	r5, r3, #3
 8004dc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dc4:	00d4      	lsls	r4, r2, #3
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	462b      	mov	r3, r5
 8004dca:	eb12 0a00 	adds.w	sl, r2, r0
 8004dce:	eb43 0b01 	adc.w	fp, r3, r1
 8004dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f04f 0100 	mov.w	r1, #0
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	008b      	lsls	r3, r1, #2
 8004de6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dea:	0082      	lsls	r2, r0, #2
 8004dec:	4650      	mov	r0, sl
 8004dee:	4659      	mov	r1, fp
 8004df0:	f7fb ff4a 	bl	8000c88 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <UART_SetConfig+0x38c>)
 8004dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	2164      	movs	r1, #100	; 0x64
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	3332      	adds	r3, #50	; 0x32
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <UART_SetConfig+0x38c>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	f003 020f 	and.w	r2, r3, #15
 8004e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4432      	add	r2, r6
 8004e1e:	609a      	str	r2, [r3, #8]
}
 8004e20:	bf00      	nop
 8004e22:	377c      	adds	r7, #124	; 0x7c
 8004e24:	46bd      	mov	sp, r7
 8004e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40011000 	.word	0x40011000
 8004e30:	40011400 	.word	0x40011400
 8004e34:	51eb851f 	.word	0x51eb851f

08004e38 <__errno>:
 8004e38:	4b01      	ldr	r3, [pc, #4]	; (8004e40 <__errno+0x8>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000010 	.word	0x20000010

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4d0d      	ldr	r5, [pc, #52]	; (8004e7c <__libc_init_array+0x38>)
 8004e48:	4c0d      	ldr	r4, [pc, #52]	; (8004e80 <__libc_init_array+0x3c>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	2600      	movs	r6, #0
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	4d0b      	ldr	r5, [pc, #44]	; (8004e84 <__libc_init_array+0x40>)
 8004e56:	4c0c      	ldr	r4, [pc, #48]	; (8004e88 <__libc_init_array+0x44>)
 8004e58:	f005 f882 	bl	8009f60 <_init>
 8004e5c:	1b64      	subs	r4, r4, r5
 8004e5e:	10a4      	asrs	r4, r4, #2
 8004e60:	2600      	movs	r6, #0
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	0800a4bc 	.word	0x0800a4bc
 8004e80:	0800a4bc 	.word	0x0800a4bc
 8004e84:	0800a4bc 	.word	0x0800a4bc
 8004e88:	0800a4c0 	.word	0x0800a4c0

08004e8c <memset>:
 8004e8c:	4402      	add	r2, r0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d100      	bne.n	8004e96 <memset+0xa>
 8004e94:	4770      	bx	lr
 8004e96:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9a:	e7f9      	b.n	8004e90 <memset+0x4>

08004e9c <__cvt>:
 8004e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea0:	ec55 4b10 	vmov	r4, r5, d0
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	460e      	mov	r6, r1
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	462b      	mov	r3, r5
 8004eac:	bfbb      	ittet	lt
 8004eae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004eb2:	461d      	movlt	r5, r3
 8004eb4:	2300      	movge	r3, #0
 8004eb6:	232d      	movlt	r3, #45	; 0x2d
 8004eb8:	700b      	strb	r3, [r1, #0]
 8004eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ebc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ec0:	4691      	mov	r9, r2
 8004ec2:	f023 0820 	bic.w	r8, r3, #32
 8004ec6:	bfbc      	itt	lt
 8004ec8:	4622      	movlt	r2, r4
 8004eca:	4614      	movlt	r4, r2
 8004ecc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ed0:	d005      	beq.n	8004ede <__cvt+0x42>
 8004ed2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ed6:	d100      	bne.n	8004eda <__cvt+0x3e>
 8004ed8:	3601      	adds	r6, #1
 8004eda:	2102      	movs	r1, #2
 8004edc:	e000      	b.n	8004ee0 <__cvt+0x44>
 8004ede:	2103      	movs	r1, #3
 8004ee0:	ab03      	add	r3, sp, #12
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	ab02      	add	r3, sp, #8
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	ec45 4b10 	vmov	d0, r4, r5
 8004eec:	4653      	mov	r3, sl
 8004eee:	4632      	mov	r2, r6
 8004ef0:	f001 fe46 	bl	8006b80 <_dtoa_r>
 8004ef4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ef8:	4607      	mov	r7, r0
 8004efa:	d102      	bne.n	8004f02 <__cvt+0x66>
 8004efc:	f019 0f01 	tst.w	r9, #1
 8004f00:	d022      	beq.n	8004f48 <__cvt+0xac>
 8004f02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f06:	eb07 0906 	add.w	r9, r7, r6
 8004f0a:	d110      	bne.n	8004f2e <__cvt+0x92>
 8004f0c:	783b      	ldrb	r3, [r7, #0]
 8004f0e:	2b30      	cmp	r3, #48	; 0x30
 8004f10:	d10a      	bne.n	8004f28 <__cvt+0x8c>
 8004f12:	2200      	movs	r2, #0
 8004f14:	2300      	movs	r3, #0
 8004f16:	4620      	mov	r0, r4
 8004f18:	4629      	mov	r1, r5
 8004f1a:	f7fb fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f1e:	b918      	cbnz	r0, 8004f28 <__cvt+0x8c>
 8004f20:	f1c6 0601 	rsb	r6, r6, #1
 8004f24:	f8ca 6000 	str.w	r6, [sl]
 8004f28:	f8da 3000 	ldr.w	r3, [sl]
 8004f2c:	4499      	add	r9, r3
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2300      	movs	r3, #0
 8004f32:	4620      	mov	r0, r4
 8004f34:	4629      	mov	r1, r5
 8004f36:	f7fb fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f3a:	b108      	cbz	r0, 8004f40 <__cvt+0xa4>
 8004f3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f40:	2230      	movs	r2, #48	; 0x30
 8004f42:	9b03      	ldr	r3, [sp, #12]
 8004f44:	454b      	cmp	r3, r9
 8004f46:	d307      	bcc.n	8004f58 <__cvt+0xbc>
 8004f48:	9b03      	ldr	r3, [sp, #12]
 8004f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f4c:	1bdb      	subs	r3, r3, r7
 8004f4e:	4638      	mov	r0, r7
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	b004      	add	sp, #16
 8004f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f58:	1c59      	adds	r1, r3, #1
 8004f5a:	9103      	str	r1, [sp, #12]
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e7f0      	b.n	8004f42 <__cvt+0xa6>

08004f60 <__exponent>:
 8004f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f62:	4603      	mov	r3, r0
 8004f64:	2900      	cmp	r1, #0
 8004f66:	bfb8      	it	lt
 8004f68:	4249      	neglt	r1, r1
 8004f6a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f6e:	bfb4      	ite	lt
 8004f70:	222d      	movlt	r2, #45	; 0x2d
 8004f72:	222b      	movge	r2, #43	; 0x2b
 8004f74:	2909      	cmp	r1, #9
 8004f76:	7042      	strb	r2, [r0, #1]
 8004f78:	dd2a      	ble.n	8004fd0 <__exponent+0x70>
 8004f7a:	f10d 0407 	add.w	r4, sp, #7
 8004f7e:	46a4      	mov	ip, r4
 8004f80:	270a      	movs	r7, #10
 8004f82:	46a6      	mov	lr, r4
 8004f84:	460a      	mov	r2, r1
 8004f86:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f8a:	fb07 1516 	mls	r5, r7, r6, r1
 8004f8e:	3530      	adds	r5, #48	; 0x30
 8004f90:	2a63      	cmp	r2, #99	; 0x63
 8004f92:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	dcf1      	bgt.n	8004f82 <__exponent+0x22>
 8004f9e:	3130      	adds	r1, #48	; 0x30
 8004fa0:	f1ae 0502 	sub.w	r5, lr, #2
 8004fa4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004fa8:	1c44      	adds	r4, r0, #1
 8004faa:	4629      	mov	r1, r5
 8004fac:	4561      	cmp	r1, ip
 8004fae:	d30a      	bcc.n	8004fc6 <__exponent+0x66>
 8004fb0:	f10d 0209 	add.w	r2, sp, #9
 8004fb4:	eba2 020e 	sub.w	r2, r2, lr
 8004fb8:	4565      	cmp	r5, ip
 8004fba:	bf88      	it	hi
 8004fbc:	2200      	movhi	r2, #0
 8004fbe:	4413      	add	r3, r2
 8004fc0:	1a18      	subs	r0, r3, r0
 8004fc2:	b003      	add	sp, #12
 8004fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004fce:	e7ed      	b.n	8004fac <__exponent+0x4c>
 8004fd0:	2330      	movs	r3, #48	; 0x30
 8004fd2:	3130      	adds	r1, #48	; 0x30
 8004fd4:	7083      	strb	r3, [r0, #2]
 8004fd6:	70c1      	strb	r1, [r0, #3]
 8004fd8:	1d03      	adds	r3, r0, #4
 8004fda:	e7f1      	b.n	8004fc0 <__exponent+0x60>

08004fdc <_printf_float>:
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	ed2d 8b02 	vpush	{d8}
 8004fe4:	b08d      	sub	sp, #52	; 0x34
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fec:	4616      	mov	r6, r2
 8004fee:	461f      	mov	r7, r3
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	f002 ff21 	bl	8007e38 <_localeconv_r>
 8004ff6:	f8d0 a000 	ldr.w	sl, [r0]
 8004ffa:	4650      	mov	r0, sl
 8004ffc:	f7fb f8e8 	bl	80001d0 <strlen>
 8005000:	2300      	movs	r3, #0
 8005002:	930a      	str	r3, [sp, #40]	; 0x28
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	9305      	str	r3, [sp, #20]
 8005008:	f8d8 3000 	ldr.w	r3, [r8]
 800500c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005010:	3307      	adds	r3, #7
 8005012:	f023 0307 	bic.w	r3, r3, #7
 8005016:	f103 0208 	add.w	r2, r3, #8
 800501a:	f8c8 2000 	str.w	r2, [r8]
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005026:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800502a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800502e:	9307      	str	r3, [sp, #28]
 8005030:	f8cd 8018 	str.w	r8, [sp, #24]
 8005034:	ee08 0a10 	vmov	s16, r0
 8005038:	4b9f      	ldr	r3, [pc, #636]	; (80052b8 <_printf_float+0x2dc>)
 800503a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800503e:	f04f 32ff 	mov.w	r2, #4294967295
 8005042:	f7fb fd73 	bl	8000b2c <__aeabi_dcmpun>
 8005046:	bb88      	cbnz	r0, 80050ac <_printf_float+0xd0>
 8005048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800504c:	4b9a      	ldr	r3, [pc, #616]	; (80052b8 <_printf_float+0x2dc>)
 800504e:	f04f 32ff 	mov.w	r2, #4294967295
 8005052:	f7fb fd4d 	bl	8000af0 <__aeabi_dcmple>
 8005056:	bb48      	cbnz	r0, 80050ac <_printf_float+0xd0>
 8005058:	2200      	movs	r2, #0
 800505a:	2300      	movs	r3, #0
 800505c:	4640      	mov	r0, r8
 800505e:	4649      	mov	r1, r9
 8005060:	f7fb fd3c 	bl	8000adc <__aeabi_dcmplt>
 8005064:	b110      	cbz	r0, 800506c <_printf_float+0x90>
 8005066:	232d      	movs	r3, #45	; 0x2d
 8005068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800506c:	4b93      	ldr	r3, [pc, #588]	; (80052bc <_printf_float+0x2e0>)
 800506e:	4894      	ldr	r0, [pc, #592]	; (80052c0 <_printf_float+0x2e4>)
 8005070:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005074:	bf94      	ite	ls
 8005076:	4698      	movls	r8, r3
 8005078:	4680      	movhi	r8, r0
 800507a:	2303      	movs	r3, #3
 800507c:	6123      	str	r3, [r4, #16]
 800507e:	9b05      	ldr	r3, [sp, #20]
 8005080:	f023 0204 	bic.w	r2, r3, #4
 8005084:	6022      	str	r2, [r4, #0]
 8005086:	f04f 0900 	mov.w	r9, #0
 800508a:	9700      	str	r7, [sp, #0]
 800508c:	4633      	mov	r3, r6
 800508e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005090:	4621      	mov	r1, r4
 8005092:	4628      	mov	r0, r5
 8005094:	f000 f9d8 	bl	8005448 <_printf_common>
 8005098:	3001      	adds	r0, #1
 800509a:	f040 8090 	bne.w	80051be <_printf_float+0x1e2>
 800509e:	f04f 30ff 	mov.w	r0, #4294967295
 80050a2:	b00d      	add	sp, #52	; 0x34
 80050a4:	ecbd 8b02 	vpop	{d8}
 80050a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	4640      	mov	r0, r8
 80050b2:	4649      	mov	r1, r9
 80050b4:	f7fb fd3a 	bl	8000b2c <__aeabi_dcmpun>
 80050b8:	b140      	cbz	r0, 80050cc <_printf_float+0xf0>
 80050ba:	464b      	mov	r3, r9
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bfbc      	itt	lt
 80050c0:	232d      	movlt	r3, #45	; 0x2d
 80050c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050c6:	487f      	ldr	r0, [pc, #508]	; (80052c4 <_printf_float+0x2e8>)
 80050c8:	4b7f      	ldr	r3, [pc, #508]	; (80052c8 <_printf_float+0x2ec>)
 80050ca:	e7d1      	b.n	8005070 <_printf_float+0x94>
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050d2:	9206      	str	r2, [sp, #24]
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	d13f      	bne.n	8005158 <_printf_float+0x17c>
 80050d8:	2306      	movs	r3, #6
 80050da:	6063      	str	r3, [r4, #4]
 80050dc:	9b05      	ldr	r3, [sp, #20]
 80050de:	6861      	ldr	r1, [r4, #4]
 80050e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050e4:	2300      	movs	r3, #0
 80050e6:	9303      	str	r3, [sp, #12]
 80050e8:	ab0a      	add	r3, sp, #40	; 0x28
 80050ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050ee:	ab09      	add	r3, sp, #36	; 0x24
 80050f0:	ec49 8b10 	vmov	d0, r8, r9
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	6022      	str	r2, [r4, #0]
 80050f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050fc:	4628      	mov	r0, r5
 80050fe:	f7ff fecd 	bl	8004e9c <__cvt>
 8005102:	9b06      	ldr	r3, [sp, #24]
 8005104:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005106:	2b47      	cmp	r3, #71	; 0x47
 8005108:	4680      	mov	r8, r0
 800510a:	d108      	bne.n	800511e <_printf_float+0x142>
 800510c:	1cc8      	adds	r0, r1, #3
 800510e:	db02      	blt.n	8005116 <_printf_float+0x13a>
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	4299      	cmp	r1, r3
 8005114:	dd41      	ble.n	800519a <_printf_float+0x1be>
 8005116:	f1ab 0b02 	sub.w	fp, fp, #2
 800511a:	fa5f fb8b 	uxtb.w	fp, fp
 800511e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005122:	d820      	bhi.n	8005166 <_printf_float+0x18a>
 8005124:	3901      	subs	r1, #1
 8005126:	465a      	mov	r2, fp
 8005128:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800512c:	9109      	str	r1, [sp, #36]	; 0x24
 800512e:	f7ff ff17 	bl	8004f60 <__exponent>
 8005132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005134:	1813      	adds	r3, r2, r0
 8005136:	2a01      	cmp	r2, #1
 8005138:	4681      	mov	r9, r0
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	dc02      	bgt.n	8005144 <_printf_float+0x168>
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	07d2      	lsls	r2, r2, #31
 8005142:	d501      	bpl.n	8005148 <_printf_float+0x16c>
 8005144:	3301      	adds	r3, #1
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800514c:	2b00      	cmp	r3, #0
 800514e:	d09c      	beq.n	800508a <_printf_float+0xae>
 8005150:	232d      	movs	r3, #45	; 0x2d
 8005152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005156:	e798      	b.n	800508a <_printf_float+0xae>
 8005158:	9a06      	ldr	r2, [sp, #24]
 800515a:	2a47      	cmp	r2, #71	; 0x47
 800515c:	d1be      	bne.n	80050dc <_printf_float+0x100>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1bc      	bne.n	80050dc <_printf_float+0x100>
 8005162:	2301      	movs	r3, #1
 8005164:	e7b9      	b.n	80050da <_printf_float+0xfe>
 8005166:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800516a:	d118      	bne.n	800519e <_printf_float+0x1c2>
 800516c:	2900      	cmp	r1, #0
 800516e:	6863      	ldr	r3, [r4, #4]
 8005170:	dd0b      	ble.n	800518a <_printf_float+0x1ae>
 8005172:	6121      	str	r1, [r4, #16]
 8005174:	b913      	cbnz	r3, 800517c <_printf_float+0x1a0>
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	07d0      	lsls	r0, r2, #31
 800517a:	d502      	bpl.n	8005182 <_printf_float+0x1a6>
 800517c:	3301      	adds	r3, #1
 800517e:	440b      	add	r3, r1
 8005180:	6123      	str	r3, [r4, #16]
 8005182:	65a1      	str	r1, [r4, #88]	; 0x58
 8005184:	f04f 0900 	mov.w	r9, #0
 8005188:	e7de      	b.n	8005148 <_printf_float+0x16c>
 800518a:	b913      	cbnz	r3, 8005192 <_printf_float+0x1b6>
 800518c:	6822      	ldr	r2, [r4, #0]
 800518e:	07d2      	lsls	r2, r2, #31
 8005190:	d501      	bpl.n	8005196 <_printf_float+0x1ba>
 8005192:	3302      	adds	r3, #2
 8005194:	e7f4      	b.n	8005180 <_printf_float+0x1a4>
 8005196:	2301      	movs	r3, #1
 8005198:	e7f2      	b.n	8005180 <_printf_float+0x1a4>
 800519a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a0:	4299      	cmp	r1, r3
 80051a2:	db05      	blt.n	80051b0 <_printf_float+0x1d4>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	6121      	str	r1, [r4, #16]
 80051a8:	07d8      	lsls	r0, r3, #31
 80051aa:	d5ea      	bpl.n	8005182 <_printf_float+0x1a6>
 80051ac:	1c4b      	adds	r3, r1, #1
 80051ae:	e7e7      	b.n	8005180 <_printf_float+0x1a4>
 80051b0:	2900      	cmp	r1, #0
 80051b2:	bfd4      	ite	le
 80051b4:	f1c1 0202 	rsble	r2, r1, #2
 80051b8:	2201      	movgt	r2, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	e7e0      	b.n	8005180 <_printf_float+0x1a4>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	055a      	lsls	r2, r3, #21
 80051c2:	d407      	bmi.n	80051d4 <_printf_float+0x1f8>
 80051c4:	6923      	ldr	r3, [r4, #16]
 80051c6:	4642      	mov	r2, r8
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	47b8      	blx	r7
 80051ce:	3001      	adds	r0, #1
 80051d0:	d12c      	bne.n	800522c <_printf_float+0x250>
 80051d2:	e764      	b.n	800509e <_printf_float+0xc2>
 80051d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051d8:	f240 80e0 	bls.w	800539c <_printf_float+0x3c0>
 80051dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051e0:	2200      	movs	r2, #0
 80051e2:	2300      	movs	r3, #0
 80051e4:	f7fb fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d034      	beq.n	8005256 <_printf_float+0x27a>
 80051ec:	4a37      	ldr	r2, [pc, #220]	; (80052cc <_printf_float+0x2f0>)
 80051ee:	2301      	movs	r3, #1
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	f43f af51 	beq.w	800509e <_printf_float+0xc2>
 80051fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005200:	429a      	cmp	r2, r3
 8005202:	db02      	blt.n	800520a <_printf_float+0x22e>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	07d8      	lsls	r0, r3, #31
 8005208:	d510      	bpl.n	800522c <_printf_float+0x250>
 800520a:	ee18 3a10 	vmov	r3, s16
 800520e:	4652      	mov	r2, sl
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f af41 	beq.w	800509e <_printf_float+0xc2>
 800521c:	f04f 0800 	mov.w	r8, #0
 8005220:	f104 091a 	add.w	r9, r4, #26
 8005224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005226:	3b01      	subs	r3, #1
 8005228:	4543      	cmp	r3, r8
 800522a:	dc09      	bgt.n	8005240 <_printf_float+0x264>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	079b      	lsls	r3, r3, #30
 8005230:	f100 8105 	bmi.w	800543e <_printf_float+0x462>
 8005234:	68e0      	ldr	r0, [r4, #12]
 8005236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005238:	4298      	cmp	r0, r3
 800523a:	bfb8      	it	lt
 800523c:	4618      	movlt	r0, r3
 800523e:	e730      	b.n	80050a2 <_printf_float+0xc6>
 8005240:	2301      	movs	r3, #1
 8005242:	464a      	mov	r2, r9
 8005244:	4631      	mov	r1, r6
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	f43f af27 	beq.w	800509e <_printf_float+0xc2>
 8005250:	f108 0801 	add.w	r8, r8, #1
 8005254:	e7e6      	b.n	8005224 <_printf_float+0x248>
 8005256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	dc39      	bgt.n	80052d0 <_printf_float+0x2f4>
 800525c:	4a1b      	ldr	r2, [pc, #108]	; (80052cc <_printf_float+0x2f0>)
 800525e:	2301      	movs	r3, #1
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f af19 	beq.w	800509e <_printf_float+0xc2>
 800526c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005270:	4313      	orrs	r3, r2
 8005272:	d102      	bne.n	800527a <_printf_float+0x29e>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	07d9      	lsls	r1, r3, #31
 8005278:	d5d8      	bpl.n	800522c <_printf_float+0x250>
 800527a:	ee18 3a10 	vmov	r3, s16
 800527e:	4652      	mov	r2, sl
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f af09 	beq.w	800509e <_printf_float+0xc2>
 800528c:	f04f 0900 	mov.w	r9, #0
 8005290:	f104 0a1a 	add.w	sl, r4, #26
 8005294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005296:	425b      	negs	r3, r3
 8005298:	454b      	cmp	r3, r9
 800529a:	dc01      	bgt.n	80052a0 <_printf_float+0x2c4>
 800529c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800529e:	e792      	b.n	80051c6 <_printf_float+0x1ea>
 80052a0:	2301      	movs	r3, #1
 80052a2:	4652      	mov	r2, sl
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	f43f aef7 	beq.w	800509e <_printf_float+0xc2>
 80052b0:	f109 0901 	add.w	r9, r9, #1
 80052b4:	e7ee      	b.n	8005294 <_printf_float+0x2b8>
 80052b6:	bf00      	nop
 80052b8:	7fefffff 	.word	0x7fefffff
 80052bc:	08009fec 	.word	0x08009fec
 80052c0:	08009ff0 	.word	0x08009ff0
 80052c4:	08009ff8 	.word	0x08009ff8
 80052c8:	08009ff4 	.word	0x08009ff4
 80052cc:	0800a401 	.word	0x0800a401
 80052d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052d4:	429a      	cmp	r2, r3
 80052d6:	bfa8      	it	ge
 80052d8:	461a      	movge	r2, r3
 80052da:	2a00      	cmp	r2, #0
 80052dc:	4691      	mov	r9, r2
 80052de:	dc37      	bgt.n	8005350 <_printf_float+0x374>
 80052e0:	f04f 0b00 	mov.w	fp, #0
 80052e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052e8:	f104 021a 	add.w	r2, r4, #26
 80052ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052ee:	9305      	str	r3, [sp, #20]
 80052f0:	eba3 0309 	sub.w	r3, r3, r9
 80052f4:	455b      	cmp	r3, fp
 80052f6:	dc33      	bgt.n	8005360 <_printf_float+0x384>
 80052f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052fc:	429a      	cmp	r2, r3
 80052fe:	db3b      	blt.n	8005378 <_printf_float+0x39c>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	07da      	lsls	r2, r3, #31
 8005304:	d438      	bmi.n	8005378 <_printf_float+0x39c>
 8005306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005308:	9b05      	ldr	r3, [sp, #20]
 800530a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	eba2 0901 	sub.w	r9, r2, r1
 8005312:	4599      	cmp	r9, r3
 8005314:	bfa8      	it	ge
 8005316:	4699      	movge	r9, r3
 8005318:	f1b9 0f00 	cmp.w	r9, #0
 800531c:	dc35      	bgt.n	800538a <_printf_float+0x3ae>
 800531e:	f04f 0800 	mov.w	r8, #0
 8005322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005326:	f104 0a1a 	add.w	sl, r4, #26
 800532a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	eba3 0309 	sub.w	r3, r3, r9
 8005334:	4543      	cmp	r3, r8
 8005336:	f77f af79 	ble.w	800522c <_printf_float+0x250>
 800533a:	2301      	movs	r3, #1
 800533c:	4652      	mov	r2, sl
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f aeaa 	beq.w	800509e <_printf_float+0xc2>
 800534a:	f108 0801 	add.w	r8, r8, #1
 800534e:	e7ec      	b.n	800532a <_printf_float+0x34e>
 8005350:	4613      	mov	r3, r2
 8005352:	4631      	mov	r1, r6
 8005354:	4642      	mov	r2, r8
 8005356:	4628      	mov	r0, r5
 8005358:	47b8      	blx	r7
 800535a:	3001      	adds	r0, #1
 800535c:	d1c0      	bne.n	80052e0 <_printf_float+0x304>
 800535e:	e69e      	b.n	800509e <_printf_float+0xc2>
 8005360:	2301      	movs	r3, #1
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	9205      	str	r2, [sp, #20]
 8005368:	47b8      	blx	r7
 800536a:	3001      	adds	r0, #1
 800536c:	f43f ae97 	beq.w	800509e <_printf_float+0xc2>
 8005370:	9a05      	ldr	r2, [sp, #20]
 8005372:	f10b 0b01 	add.w	fp, fp, #1
 8005376:	e7b9      	b.n	80052ec <_printf_float+0x310>
 8005378:	ee18 3a10 	vmov	r3, s16
 800537c:	4652      	mov	r2, sl
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	d1be      	bne.n	8005306 <_printf_float+0x32a>
 8005388:	e689      	b.n	800509e <_printf_float+0xc2>
 800538a:	9a05      	ldr	r2, [sp, #20]
 800538c:	464b      	mov	r3, r9
 800538e:	4442      	add	r2, r8
 8005390:	4631      	mov	r1, r6
 8005392:	4628      	mov	r0, r5
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	d1c1      	bne.n	800531e <_printf_float+0x342>
 800539a:	e680      	b.n	800509e <_printf_float+0xc2>
 800539c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800539e:	2a01      	cmp	r2, #1
 80053a0:	dc01      	bgt.n	80053a6 <_printf_float+0x3ca>
 80053a2:	07db      	lsls	r3, r3, #31
 80053a4:	d538      	bpl.n	8005418 <_printf_float+0x43c>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4642      	mov	r2, r8
 80053aa:	4631      	mov	r1, r6
 80053ac:	4628      	mov	r0, r5
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	f43f ae74 	beq.w	800509e <_printf_float+0xc2>
 80053b6:	ee18 3a10 	vmov	r3, s16
 80053ba:	4652      	mov	r2, sl
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	f43f ae6b 	beq.w	800509e <_printf_float+0xc2>
 80053c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053cc:	2200      	movs	r2, #0
 80053ce:	2300      	movs	r3, #0
 80053d0:	f7fb fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80053d4:	b9d8      	cbnz	r0, 800540e <_printf_float+0x432>
 80053d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d8:	f108 0201 	add.w	r2, r8, #1
 80053dc:	3b01      	subs	r3, #1
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	d10e      	bne.n	8005406 <_printf_float+0x42a>
 80053e8:	e659      	b.n	800509e <_printf_float+0xc2>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4652      	mov	r2, sl
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	f43f ae52 	beq.w	800509e <_printf_float+0xc2>
 80053fa:	f108 0801 	add.w	r8, r8, #1
 80053fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005400:	3b01      	subs	r3, #1
 8005402:	4543      	cmp	r3, r8
 8005404:	dcf1      	bgt.n	80053ea <_printf_float+0x40e>
 8005406:	464b      	mov	r3, r9
 8005408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800540c:	e6dc      	b.n	80051c8 <_printf_float+0x1ec>
 800540e:	f04f 0800 	mov.w	r8, #0
 8005412:	f104 0a1a 	add.w	sl, r4, #26
 8005416:	e7f2      	b.n	80053fe <_printf_float+0x422>
 8005418:	2301      	movs	r3, #1
 800541a:	4642      	mov	r2, r8
 800541c:	e7df      	b.n	80053de <_printf_float+0x402>
 800541e:	2301      	movs	r3, #1
 8005420:	464a      	mov	r2, r9
 8005422:	4631      	mov	r1, r6
 8005424:	4628      	mov	r0, r5
 8005426:	47b8      	blx	r7
 8005428:	3001      	adds	r0, #1
 800542a:	f43f ae38 	beq.w	800509e <_printf_float+0xc2>
 800542e:	f108 0801 	add.w	r8, r8, #1
 8005432:	68e3      	ldr	r3, [r4, #12]
 8005434:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005436:	1a5b      	subs	r3, r3, r1
 8005438:	4543      	cmp	r3, r8
 800543a:	dcf0      	bgt.n	800541e <_printf_float+0x442>
 800543c:	e6fa      	b.n	8005234 <_printf_float+0x258>
 800543e:	f04f 0800 	mov.w	r8, #0
 8005442:	f104 0919 	add.w	r9, r4, #25
 8005446:	e7f4      	b.n	8005432 <_printf_float+0x456>

08005448 <_printf_common>:
 8005448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	4616      	mov	r6, r2
 800544e:	4699      	mov	r9, r3
 8005450:	688a      	ldr	r2, [r1, #8]
 8005452:	690b      	ldr	r3, [r1, #16]
 8005454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005458:	4293      	cmp	r3, r2
 800545a:	bfb8      	it	lt
 800545c:	4613      	movlt	r3, r2
 800545e:	6033      	str	r3, [r6, #0]
 8005460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005464:	4607      	mov	r7, r0
 8005466:	460c      	mov	r4, r1
 8005468:	b10a      	cbz	r2, 800546e <_printf_common+0x26>
 800546a:	3301      	adds	r3, #1
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	0699      	lsls	r1, r3, #26
 8005472:	bf42      	ittt	mi
 8005474:	6833      	ldrmi	r3, [r6, #0]
 8005476:	3302      	addmi	r3, #2
 8005478:	6033      	strmi	r3, [r6, #0]
 800547a:	6825      	ldr	r5, [r4, #0]
 800547c:	f015 0506 	ands.w	r5, r5, #6
 8005480:	d106      	bne.n	8005490 <_printf_common+0x48>
 8005482:	f104 0a19 	add.w	sl, r4, #25
 8005486:	68e3      	ldr	r3, [r4, #12]
 8005488:	6832      	ldr	r2, [r6, #0]
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	42ab      	cmp	r3, r5
 800548e:	dc26      	bgt.n	80054de <_printf_common+0x96>
 8005490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005494:	1e13      	subs	r3, r2, #0
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	bf18      	it	ne
 800549a:	2301      	movne	r3, #1
 800549c:	0692      	lsls	r2, r2, #26
 800549e:	d42b      	bmi.n	80054f8 <_printf_common+0xb0>
 80054a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054a4:	4649      	mov	r1, r9
 80054a6:	4638      	mov	r0, r7
 80054a8:	47c0      	blx	r8
 80054aa:	3001      	adds	r0, #1
 80054ac:	d01e      	beq.n	80054ec <_printf_common+0xa4>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	68e5      	ldr	r5, [r4, #12]
 80054b2:	6832      	ldr	r2, [r6, #0]
 80054b4:	f003 0306 	and.w	r3, r3, #6
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	bf08      	it	eq
 80054bc:	1aad      	subeq	r5, r5, r2
 80054be:	68a3      	ldr	r3, [r4, #8]
 80054c0:	6922      	ldr	r2, [r4, #16]
 80054c2:	bf0c      	ite	eq
 80054c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054c8:	2500      	movne	r5, #0
 80054ca:	4293      	cmp	r3, r2
 80054cc:	bfc4      	itt	gt
 80054ce:	1a9b      	subgt	r3, r3, r2
 80054d0:	18ed      	addgt	r5, r5, r3
 80054d2:	2600      	movs	r6, #0
 80054d4:	341a      	adds	r4, #26
 80054d6:	42b5      	cmp	r5, r6
 80054d8:	d11a      	bne.n	8005510 <_printf_common+0xc8>
 80054da:	2000      	movs	r0, #0
 80054dc:	e008      	b.n	80054f0 <_printf_common+0xa8>
 80054de:	2301      	movs	r3, #1
 80054e0:	4652      	mov	r2, sl
 80054e2:	4649      	mov	r1, r9
 80054e4:	4638      	mov	r0, r7
 80054e6:	47c0      	blx	r8
 80054e8:	3001      	adds	r0, #1
 80054ea:	d103      	bne.n	80054f4 <_printf_common+0xac>
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295
 80054f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f4:	3501      	adds	r5, #1
 80054f6:	e7c6      	b.n	8005486 <_printf_common+0x3e>
 80054f8:	18e1      	adds	r1, r4, r3
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	2030      	movs	r0, #48	; 0x30
 80054fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005502:	4422      	add	r2, r4
 8005504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800550c:	3302      	adds	r3, #2
 800550e:	e7c7      	b.n	80054a0 <_printf_common+0x58>
 8005510:	2301      	movs	r3, #1
 8005512:	4622      	mov	r2, r4
 8005514:	4649      	mov	r1, r9
 8005516:	4638      	mov	r0, r7
 8005518:	47c0      	blx	r8
 800551a:	3001      	adds	r0, #1
 800551c:	d0e6      	beq.n	80054ec <_printf_common+0xa4>
 800551e:	3601      	adds	r6, #1
 8005520:	e7d9      	b.n	80054d6 <_printf_common+0x8e>
	...

08005524 <_printf_i>:
 8005524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005528:	460c      	mov	r4, r1
 800552a:	4691      	mov	r9, r2
 800552c:	7e27      	ldrb	r7, [r4, #24]
 800552e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005530:	2f78      	cmp	r7, #120	; 0x78
 8005532:	4680      	mov	r8, r0
 8005534:	469a      	mov	sl, r3
 8005536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800553a:	d807      	bhi.n	800554c <_printf_i+0x28>
 800553c:	2f62      	cmp	r7, #98	; 0x62
 800553e:	d80a      	bhi.n	8005556 <_printf_i+0x32>
 8005540:	2f00      	cmp	r7, #0
 8005542:	f000 80d8 	beq.w	80056f6 <_printf_i+0x1d2>
 8005546:	2f58      	cmp	r7, #88	; 0x58
 8005548:	f000 80a3 	beq.w	8005692 <_printf_i+0x16e>
 800554c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005554:	e03a      	b.n	80055cc <_printf_i+0xa8>
 8005556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800555a:	2b15      	cmp	r3, #21
 800555c:	d8f6      	bhi.n	800554c <_printf_i+0x28>
 800555e:	a001      	add	r0, pc, #4	; (adr r0, 8005564 <_printf_i+0x40>)
 8005560:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005564:	080055bd 	.word	0x080055bd
 8005568:	080055d1 	.word	0x080055d1
 800556c:	0800554d 	.word	0x0800554d
 8005570:	0800554d 	.word	0x0800554d
 8005574:	0800554d 	.word	0x0800554d
 8005578:	0800554d 	.word	0x0800554d
 800557c:	080055d1 	.word	0x080055d1
 8005580:	0800554d 	.word	0x0800554d
 8005584:	0800554d 	.word	0x0800554d
 8005588:	0800554d 	.word	0x0800554d
 800558c:	0800554d 	.word	0x0800554d
 8005590:	080056dd 	.word	0x080056dd
 8005594:	08005601 	.word	0x08005601
 8005598:	080056bf 	.word	0x080056bf
 800559c:	0800554d 	.word	0x0800554d
 80055a0:	0800554d 	.word	0x0800554d
 80055a4:	080056ff 	.word	0x080056ff
 80055a8:	0800554d 	.word	0x0800554d
 80055ac:	08005601 	.word	0x08005601
 80055b0:	0800554d 	.word	0x0800554d
 80055b4:	0800554d 	.word	0x0800554d
 80055b8:	080056c7 	.word	0x080056c7
 80055bc:	680b      	ldr	r3, [r1, #0]
 80055be:	1d1a      	adds	r2, r3, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	600a      	str	r2, [r1, #0]
 80055c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0a3      	b.n	8005718 <_printf_i+0x1f4>
 80055d0:	6825      	ldr	r5, [r4, #0]
 80055d2:	6808      	ldr	r0, [r1, #0]
 80055d4:	062e      	lsls	r6, r5, #24
 80055d6:	f100 0304 	add.w	r3, r0, #4
 80055da:	d50a      	bpl.n	80055f2 <_printf_i+0xce>
 80055dc:	6805      	ldr	r5, [r0, #0]
 80055de:	600b      	str	r3, [r1, #0]
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	da03      	bge.n	80055ec <_printf_i+0xc8>
 80055e4:	232d      	movs	r3, #45	; 0x2d
 80055e6:	426d      	negs	r5, r5
 80055e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ec:	485e      	ldr	r0, [pc, #376]	; (8005768 <_printf_i+0x244>)
 80055ee:	230a      	movs	r3, #10
 80055f0:	e019      	b.n	8005626 <_printf_i+0x102>
 80055f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055f6:	6805      	ldr	r5, [r0, #0]
 80055f8:	600b      	str	r3, [r1, #0]
 80055fa:	bf18      	it	ne
 80055fc:	b22d      	sxthne	r5, r5
 80055fe:	e7ef      	b.n	80055e0 <_printf_i+0xbc>
 8005600:	680b      	ldr	r3, [r1, #0]
 8005602:	6825      	ldr	r5, [r4, #0]
 8005604:	1d18      	adds	r0, r3, #4
 8005606:	6008      	str	r0, [r1, #0]
 8005608:	0628      	lsls	r0, r5, #24
 800560a:	d501      	bpl.n	8005610 <_printf_i+0xec>
 800560c:	681d      	ldr	r5, [r3, #0]
 800560e:	e002      	b.n	8005616 <_printf_i+0xf2>
 8005610:	0669      	lsls	r1, r5, #25
 8005612:	d5fb      	bpl.n	800560c <_printf_i+0xe8>
 8005614:	881d      	ldrh	r5, [r3, #0]
 8005616:	4854      	ldr	r0, [pc, #336]	; (8005768 <_printf_i+0x244>)
 8005618:	2f6f      	cmp	r7, #111	; 0x6f
 800561a:	bf0c      	ite	eq
 800561c:	2308      	moveq	r3, #8
 800561e:	230a      	movne	r3, #10
 8005620:	2100      	movs	r1, #0
 8005622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005626:	6866      	ldr	r6, [r4, #4]
 8005628:	60a6      	str	r6, [r4, #8]
 800562a:	2e00      	cmp	r6, #0
 800562c:	bfa2      	ittt	ge
 800562e:	6821      	ldrge	r1, [r4, #0]
 8005630:	f021 0104 	bicge.w	r1, r1, #4
 8005634:	6021      	strge	r1, [r4, #0]
 8005636:	b90d      	cbnz	r5, 800563c <_printf_i+0x118>
 8005638:	2e00      	cmp	r6, #0
 800563a:	d04d      	beq.n	80056d8 <_printf_i+0x1b4>
 800563c:	4616      	mov	r6, r2
 800563e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005642:	fb03 5711 	mls	r7, r3, r1, r5
 8005646:	5dc7      	ldrb	r7, [r0, r7]
 8005648:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800564c:	462f      	mov	r7, r5
 800564e:	42bb      	cmp	r3, r7
 8005650:	460d      	mov	r5, r1
 8005652:	d9f4      	bls.n	800563e <_printf_i+0x11a>
 8005654:	2b08      	cmp	r3, #8
 8005656:	d10b      	bne.n	8005670 <_printf_i+0x14c>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	07df      	lsls	r7, r3, #31
 800565c:	d508      	bpl.n	8005670 <_printf_i+0x14c>
 800565e:	6923      	ldr	r3, [r4, #16]
 8005660:	6861      	ldr	r1, [r4, #4]
 8005662:	4299      	cmp	r1, r3
 8005664:	bfde      	ittt	le
 8005666:	2330      	movle	r3, #48	; 0x30
 8005668:	f806 3c01 	strble.w	r3, [r6, #-1]
 800566c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005670:	1b92      	subs	r2, r2, r6
 8005672:	6122      	str	r2, [r4, #16]
 8005674:	f8cd a000 	str.w	sl, [sp]
 8005678:	464b      	mov	r3, r9
 800567a:	aa03      	add	r2, sp, #12
 800567c:	4621      	mov	r1, r4
 800567e:	4640      	mov	r0, r8
 8005680:	f7ff fee2 	bl	8005448 <_printf_common>
 8005684:	3001      	adds	r0, #1
 8005686:	d14c      	bne.n	8005722 <_printf_i+0x1fe>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	b004      	add	sp, #16
 800568e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005692:	4835      	ldr	r0, [pc, #212]	; (8005768 <_printf_i+0x244>)
 8005694:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	680e      	ldr	r6, [r1, #0]
 800569c:	061f      	lsls	r7, r3, #24
 800569e:	f856 5b04 	ldr.w	r5, [r6], #4
 80056a2:	600e      	str	r6, [r1, #0]
 80056a4:	d514      	bpl.n	80056d0 <_printf_i+0x1ac>
 80056a6:	07d9      	lsls	r1, r3, #31
 80056a8:	bf44      	itt	mi
 80056aa:	f043 0320 	orrmi.w	r3, r3, #32
 80056ae:	6023      	strmi	r3, [r4, #0]
 80056b0:	b91d      	cbnz	r5, 80056ba <_printf_i+0x196>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	f023 0320 	bic.w	r3, r3, #32
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	2310      	movs	r3, #16
 80056bc:	e7b0      	b.n	8005620 <_printf_i+0xfc>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	f043 0320 	orr.w	r3, r3, #32
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	2378      	movs	r3, #120	; 0x78
 80056c8:	4828      	ldr	r0, [pc, #160]	; (800576c <_printf_i+0x248>)
 80056ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ce:	e7e3      	b.n	8005698 <_printf_i+0x174>
 80056d0:	065e      	lsls	r6, r3, #25
 80056d2:	bf48      	it	mi
 80056d4:	b2ad      	uxthmi	r5, r5
 80056d6:	e7e6      	b.n	80056a6 <_printf_i+0x182>
 80056d8:	4616      	mov	r6, r2
 80056da:	e7bb      	b.n	8005654 <_printf_i+0x130>
 80056dc:	680b      	ldr	r3, [r1, #0]
 80056de:	6826      	ldr	r6, [r4, #0]
 80056e0:	6960      	ldr	r0, [r4, #20]
 80056e2:	1d1d      	adds	r5, r3, #4
 80056e4:	600d      	str	r5, [r1, #0]
 80056e6:	0635      	lsls	r5, r6, #24
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	d501      	bpl.n	80056f0 <_printf_i+0x1cc>
 80056ec:	6018      	str	r0, [r3, #0]
 80056ee:	e002      	b.n	80056f6 <_printf_i+0x1d2>
 80056f0:	0671      	lsls	r1, r6, #25
 80056f2:	d5fb      	bpl.n	80056ec <_printf_i+0x1c8>
 80056f4:	8018      	strh	r0, [r3, #0]
 80056f6:	2300      	movs	r3, #0
 80056f8:	6123      	str	r3, [r4, #16]
 80056fa:	4616      	mov	r6, r2
 80056fc:	e7ba      	b.n	8005674 <_printf_i+0x150>
 80056fe:	680b      	ldr	r3, [r1, #0]
 8005700:	1d1a      	adds	r2, r3, #4
 8005702:	600a      	str	r2, [r1, #0]
 8005704:	681e      	ldr	r6, [r3, #0]
 8005706:	6862      	ldr	r2, [r4, #4]
 8005708:	2100      	movs	r1, #0
 800570a:	4630      	mov	r0, r6
 800570c:	f7fa fd68 	bl	80001e0 <memchr>
 8005710:	b108      	cbz	r0, 8005716 <_printf_i+0x1f2>
 8005712:	1b80      	subs	r0, r0, r6
 8005714:	6060      	str	r0, [r4, #4]
 8005716:	6863      	ldr	r3, [r4, #4]
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	2300      	movs	r3, #0
 800571c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005720:	e7a8      	b.n	8005674 <_printf_i+0x150>
 8005722:	6923      	ldr	r3, [r4, #16]
 8005724:	4632      	mov	r2, r6
 8005726:	4649      	mov	r1, r9
 8005728:	4640      	mov	r0, r8
 800572a:	47d0      	blx	sl
 800572c:	3001      	adds	r0, #1
 800572e:	d0ab      	beq.n	8005688 <_printf_i+0x164>
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	079b      	lsls	r3, r3, #30
 8005734:	d413      	bmi.n	800575e <_printf_i+0x23a>
 8005736:	68e0      	ldr	r0, [r4, #12]
 8005738:	9b03      	ldr	r3, [sp, #12]
 800573a:	4298      	cmp	r0, r3
 800573c:	bfb8      	it	lt
 800573e:	4618      	movlt	r0, r3
 8005740:	e7a4      	b.n	800568c <_printf_i+0x168>
 8005742:	2301      	movs	r3, #1
 8005744:	4632      	mov	r2, r6
 8005746:	4649      	mov	r1, r9
 8005748:	4640      	mov	r0, r8
 800574a:	47d0      	blx	sl
 800574c:	3001      	adds	r0, #1
 800574e:	d09b      	beq.n	8005688 <_printf_i+0x164>
 8005750:	3501      	adds	r5, #1
 8005752:	68e3      	ldr	r3, [r4, #12]
 8005754:	9903      	ldr	r1, [sp, #12]
 8005756:	1a5b      	subs	r3, r3, r1
 8005758:	42ab      	cmp	r3, r5
 800575a:	dcf2      	bgt.n	8005742 <_printf_i+0x21e>
 800575c:	e7eb      	b.n	8005736 <_printf_i+0x212>
 800575e:	2500      	movs	r5, #0
 8005760:	f104 0619 	add.w	r6, r4, #25
 8005764:	e7f5      	b.n	8005752 <_printf_i+0x22e>
 8005766:	bf00      	nop
 8005768:	08009ffc 	.word	0x08009ffc
 800576c:	0800a00d 	.word	0x0800a00d

08005770 <_scanf_float>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	b087      	sub	sp, #28
 8005776:	4617      	mov	r7, r2
 8005778:	9303      	str	r3, [sp, #12]
 800577a:	688b      	ldr	r3, [r1, #8]
 800577c:	1e5a      	subs	r2, r3, #1
 800577e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005782:	bf83      	ittte	hi
 8005784:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005788:	195b      	addhi	r3, r3, r5
 800578a:	9302      	strhi	r3, [sp, #8]
 800578c:	2300      	movls	r3, #0
 800578e:	bf86      	itte	hi
 8005790:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005794:	608b      	strhi	r3, [r1, #8]
 8005796:	9302      	strls	r3, [sp, #8]
 8005798:	680b      	ldr	r3, [r1, #0]
 800579a:	468b      	mov	fp, r1
 800579c:	2500      	movs	r5, #0
 800579e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80057a2:	f84b 3b1c 	str.w	r3, [fp], #28
 80057a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80057aa:	4680      	mov	r8, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	465e      	mov	r6, fp
 80057b0:	46aa      	mov	sl, r5
 80057b2:	46a9      	mov	r9, r5
 80057b4:	9501      	str	r5, [sp, #4]
 80057b6:	68a2      	ldr	r2, [r4, #8]
 80057b8:	b152      	cbz	r2, 80057d0 <_scanf_float+0x60>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b4e      	cmp	r3, #78	; 0x4e
 80057c0:	d864      	bhi.n	800588c <_scanf_float+0x11c>
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d83c      	bhi.n	8005840 <_scanf_float+0xd0>
 80057c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80057ca:	b2c8      	uxtb	r0, r1
 80057cc:	280e      	cmp	r0, #14
 80057ce:	d93a      	bls.n	8005846 <_scanf_float+0xd6>
 80057d0:	f1b9 0f00 	cmp.w	r9, #0
 80057d4:	d003      	beq.n	80057de <_scanf_float+0x6e>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057e2:	f1ba 0f01 	cmp.w	sl, #1
 80057e6:	f200 8113 	bhi.w	8005a10 <_scanf_float+0x2a0>
 80057ea:	455e      	cmp	r6, fp
 80057ec:	f200 8105 	bhi.w	80059fa <_scanf_float+0x28a>
 80057f0:	2501      	movs	r5, #1
 80057f2:	4628      	mov	r0, r5
 80057f4:	b007      	add	sp, #28
 80057f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80057fe:	2a0d      	cmp	r2, #13
 8005800:	d8e6      	bhi.n	80057d0 <_scanf_float+0x60>
 8005802:	a101      	add	r1, pc, #4	; (adr r1, 8005808 <_scanf_float+0x98>)
 8005804:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005808:	08005947 	.word	0x08005947
 800580c:	080057d1 	.word	0x080057d1
 8005810:	080057d1 	.word	0x080057d1
 8005814:	080057d1 	.word	0x080057d1
 8005818:	080059a7 	.word	0x080059a7
 800581c:	0800597f 	.word	0x0800597f
 8005820:	080057d1 	.word	0x080057d1
 8005824:	080057d1 	.word	0x080057d1
 8005828:	08005955 	.word	0x08005955
 800582c:	080057d1 	.word	0x080057d1
 8005830:	080057d1 	.word	0x080057d1
 8005834:	080057d1 	.word	0x080057d1
 8005838:	080057d1 	.word	0x080057d1
 800583c:	0800590d 	.word	0x0800590d
 8005840:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005844:	e7db      	b.n	80057fe <_scanf_float+0x8e>
 8005846:	290e      	cmp	r1, #14
 8005848:	d8c2      	bhi.n	80057d0 <_scanf_float+0x60>
 800584a:	a001      	add	r0, pc, #4	; (adr r0, 8005850 <_scanf_float+0xe0>)
 800584c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005850:	080058ff 	.word	0x080058ff
 8005854:	080057d1 	.word	0x080057d1
 8005858:	080058ff 	.word	0x080058ff
 800585c:	08005993 	.word	0x08005993
 8005860:	080057d1 	.word	0x080057d1
 8005864:	080058ad 	.word	0x080058ad
 8005868:	080058e9 	.word	0x080058e9
 800586c:	080058e9 	.word	0x080058e9
 8005870:	080058e9 	.word	0x080058e9
 8005874:	080058e9 	.word	0x080058e9
 8005878:	080058e9 	.word	0x080058e9
 800587c:	080058e9 	.word	0x080058e9
 8005880:	080058e9 	.word	0x080058e9
 8005884:	080058e9 	.word	0x080058e9
 8005888:	080058e9 	.word	0x080058e9
 800588c:	2b6e      	cmp	r3, #110	; 0x6e
 800588e:	d809      	bhi.n	80058a4 <_scanf_float+0x134>
 8005890:	2b60      	cmp	r3, #96	; 0x60
 8005892:	d8b2      	bhi.n	80057fa <_scanf_float+0x8a>
 8005894:	2b54      	cmp	r3, #84	; 0x54
 8005896:	d077      	beq.n	8005988 <_scanf_float+0x218>
 8005898:	2b59      	cmp	r3, #89	; 0x59
 800589a:	d199      	bne.n	80057d0 <_scanf_float+0x60>
 800589c:	2d07      	cmp	r5, #7
 800589e:	d197      	bne.n	80057d0 <_scanf_float+0x60>
 80058a0:	2508      	movs	r5, #8
 80058a2:	e029      	b.n	80058f8 <_scanf_float+0x188>
 80058a4:	2b74      	cmp	r3, #116	; 0x74
 80058a6:	d06f      	beq.n	8005988 <_scanf_float+0x218>
 80058a8:	2b79      	cmp	r3, #121	; 0x79
 80058aa:	e7f6      	b.n	800589a <_scanf_float+0x12a>
 80058ac:	6821      	ldr	r1, [r4, #0]
 80058ae:	05c8      	lsls	r0, r1, #23
 80058b0:	d51a      	bpl.n	80058e8 <_scanf_float+0x178>
 80058b2:	9b02      	ldr	r3, [sp, #8]
 80058b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80058b8:	6021      	str	r1, [r4, #0]
 80058ba:	f109 0901 	add.w	r9, r9, #1
 80058be:	b11b      	cbz	r3, 80058c8 <_scanf_float+0x158>
 80058c0:	3b01      	subs	r3, #1
 80058c2:	3201      	adds	r2, #1
 80058c4:	9302      	str	r3, [sp, #8]
 80058c6:	60a2      	str	r2, [r4, #8]
 80058c8:	68a3      	ldr	r3, [r4, #8]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	60a3      	str	r3, [r4, #8]
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	3301      	adds	r3, #1
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	f340 8084 	ble.w	80059e8 <_scanf_float+0x278>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	603b      	str	r3, [r7, #0]
 80058e6:	e766      	b.n	80057b6 <_scanf_float+0x46>
 80058e8:	eb1a 0f05 	cmn.w	sl, r5
 80058ec:	f47f af70 	bne.w	80057d0 <_scanf_float+0x60>
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80058f6:	6022      	str	r2, [r4, #0]
 80058f8:	f806 3b01 	strb.w	r3, [r6], #1
 80058fc:	e7e4      	b.n	80058c8 <_scanf_float+0x158>
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	0610      	lsls	r0, r2, #24
 8005902:	f57f af65 	bpl.w	80057d0 <_scanf_float+0x60>
 8005906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800590a:	e7f4      	b.n	80058f6 <_scanf_float+0x186>
 800590c:	f1ba 0f00 	cmp.w	sl, #0
 8005910:	d10e      	bne.n	8005930 <_scanf_float+0x1c0>
 8005912:	f1b9 0f00 	cmp.w	r9, #0
 8005916:	d10e      	bne.n	8005936 <_scanf_float+0x1c6>
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800591e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005922:	d108      	bne.n	8005936 <_scanf_float+0x1c6>
 8005924:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005928:	6022      	str	r2, [r4, #0]
 800592a:	f04f 0a01 	mov.w	sl, #1
 800592e:	e7e3      	b.n	80058f8 <_scanf_float+0x188>
 8005930:	f1ba 0f02 	cmp.w	sl, #2
 8005934:	d055      	beq.n	80059e2 <_scanf_float+0x272>
 8005936:	2d01      	cmp	r5, #1
 8005938:	d002      	beq.n	8005940 <_scanf_float+0x1d0>
 800593a:	2d04      	cmp	r5, #4
 800593c:	f47f af48 	bne.w	80057d0 <_scanf_float+0x60>
 8005940:	3501      	adds	r5, #1
 8005942:	b2ed      	uxtb	r5, r5
 8005944:	e7d8      	b.n	80058f8 <_scanf_float+0x188>
 8005946:	f1ba 0f01 	cmp.w	sl, #1
 800594a:	f47f af41 	bne.w	80057d0 <_scanf_float+0x60>
 800594e:	f04f 0a02 	mov.w	sl, #2
 8005952:	e7d1      	b.n	80058f8 <_scanf_float+0x188>
 8005954:	b97d      	cbnz	r5, 8005976 <_scanf_float+0x206>
 8005956:	f1b9 0f00 	cmp.w	r9, #0
 800595a:	f47f af3c 	bne.w	80057d6 <_scanf_float+0x66>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005964:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005968:	f47f af39 	bne.w	80057de <_scanf_float+0x6e>
 800596c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005970:	6022      	str	r2, [r4, #0]
 8005972:	2501      	movs	r5, #1
 8005974:	e7c0      	b.n	80058f8 <_scanf_float+0x188>
 8005976:	2d03      	cmp	r5, #3
 8005978:	d0e2      	beq.n	8005940 <_scanf_float+0x1d0>
 800597a:	2d05      	cmp	r5, #5
 800597c:	e7de      	b.n	800593c <_scanf_float+0x1cc>
 800597e:	2d02      	cmp	r5, #2
 8005980:	f47f af26 	bne.w	80057d0 <_scanf_float+0x60>
 8005984:	2503      	movs	r5, #3
 8005986:	e7b7      	b.n	80058f8 <_scanf_float+0x188>
 8005988:	2d06      	cmp	r5, #6
 800598a:	f47f af21 	bne.w	80057d0 <_scanf_float+0x60>
 800598e:	2507      	movs	r5, #7
 8005990:	e7b2      	b.n	80058f8 <_scanf_float+0x188>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	0591      	lsls	r1, r2, #22
 8005996:	f57f af1b 	bpl.w	80057d0 <_scanf_float+0x60>
 800599a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80059a4:	e7a8      	b.n	80058f8 <_scanf_float+0x188>
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80059ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80059b0:	d006      	beq.n	80059c0 <_scanf_float+0x250>
 80059b2:	0550      	lsls	r0, r2, #21
 80059b4:	f57f af0c 	bpl.w	80057d0 <_scanf_float+0x60>
 80059b8:	f1b9 0f00 	cmp.w	r9, #0
 80059bc:	f43f af0f 	beq.w	80057de <_scanf_float+0x6e>
 80059c0:	0591      	lsls	r1, r2, #22
 80059c2:	bf58      	it	pl
 80059c4:	9901      	ldrpl	r1, [sp, #4]
 80059c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80059ca:	bf58      	it	pl
 80059cc:	eba9 0101 	subpl.w	r1, r9, r1
 80059d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80059d4:	bf58      	it	pl
 80059d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80059da:	6022      	str	r2, [r4, #0]
 80059dc:	f04f 0900 	mov.w	r9, #0
 80059e0:	e78a      	b.n	80058f8 <_scanf_float+0x188>
 80059e2:	f04f 0a03 	mov.w	sl, #3
 80059e6:	e787      	b.n	80058f8 <_scanf_float+0x188>
 80059e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80059ec:	4639      	mov	r1, r7
 80059ee:	4640      	mov	r0, r8
 80059f0:	4798      	blx	r3
 80059f2:	2800      	cmp	r0, #0
 80059f4:	f43f aedf 	beq.w	80057b6 <_scanf_float+0x46>
 80059f8:	e6ea      	b.n	80057d0 <_scanf_float+0x60>
 80059fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a02:	463a      	mov	r2, r7
 8005a04:	4640      	mov	r0, r8
 8005a06:	4798      	blx	r3
 8005a08:	6923      	ldr	r3, [r4, #16]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	e6ec      	b.n	80057ea <_scanf_float+0x7a>
 8005a10:	1e6b      	subs	r3, r5, #1
 8005a12:	2b06      	cmp	r3, #6
 8005a14:	d825      	bhi.n	8005a62 <_scanf_float+0x2f2>
 8005a16:	2d02      	cmp	r5, #2
 8005a18:	d836      	bhi.n	8005a88 <_scanf_float+0x318>
 8005a1a:	455e      	cmp	r6, fp
 8005a1c:	f67f aee8 	bls.w	80057f0 <_scanf_float+0x80>
 8005a20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a28:	463a      	mov	r2, r7
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	4798      	blx	r3
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	e7f1      	b.n	8005a1a <_scanf_float+0x2aa>
 8005a36:	9802      	ldr	r0, [sp, #8]
 8005a38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005a40:	9002      	str	r0, [sp, #8]
 8005a42:	463a      	mov	r2, r7
 8005a44:	4640      	mov	r0, r8
 8005a46:	4798      	blx	r3
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	6123      	str	r3, [r4, #16]
 8005a4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a52:	fa5f fa8a 	uxtb.w	sl, sl
 8005a56:	f1ba 0f02 	cmp.w	sl, #2
 8005a5a:	d1ec      	bne.n	8005a36 <_scanf_float+0x2c6>
 8005a5c:	3d03      	subs	r5, #3
 8005a5e:	b2ed      	uxtb	r5, r5
 8005a60:	1b76      	subs	r6, r6, r5
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	05da      	lsls	r2, r3, #23
 8005a66:	d52f      	bpl.n	8005ac8 <_scanf_float+0x358>
 8005a68:	055b      	lsls	r3, r3, #21
 8005a6a:	d510      	bpl.n	8005a8e <_scanf_float+0x31e>
 8005a6c:	455e      	cmp	r6, fp
 8005a6e:	f67f aebf 	bls.w	80057f0 <_scanf_float+0x80>
 8005a72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a7a:	463a      	mov	r2, r7
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4798      	blx	r3
 8005a80:	6923      	ldr	r3, [r4, #16]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	e7f1      	b.n	8005a6c <_scanf_float+0x2fc>
 8005a88:	46aa      	mov	sl, r5
 8005a8a:	9602      	str	r6, [sp, #8]
 8005a8c:	e7df      	b.n	8005a4e <_scanf_float+0x2de>
 8005a8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	2965      	cmp	r1, #101	; 0x65
 8005a96:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	d00c      	beq.n	8005abc <_scanf_float+0x34c>
 8005aa2:	2945      	cmp	r1, #69	; 0x45
 8005aa4:	d00a      	beq.n	8005abc <_scanf_float+0x34c>
 8005aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005aaa:	463a      	mov	r2, r7
 8005aac:	4640      	mov	r0, r8
 8005aae:	4798      	blx	r3
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	1eb5      	subs	r5, r6, #2
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ac0:	463a      	mov	r2, r7
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4798      	blx	r3
 8005ac6:	462e      	mov	r6, r5
 8005ac8:	6825      	ldr	r5, [r4, #0]
 8005aca:	f015 0510 	ands.w	r5, r5, #16
 8005ace:	d158      	bne.n	8005b82 <_scanf_float+0x412>
 8005ad0:	7035      	strb	r5, [r6, #0]
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005adc:	d11c      	bne.n	8005b18 <_scanf_float+0x3a8>
 8005ade:	9b01      	ldr	r3, [sp, #4]
 8005ae0:	454b      	cmp	r3, r9
 8005ae2:	eba3 0209 	sub.w	r2, r3, r9
 8005ae6:	d124      	bne.n	8005b32 <_scanf_float+0x3c2>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4659      	mov	r1, fp
 8005aec:	4640      	mov	r0, r8
 8005aee:	f000 ff0d 	bl	800690c <_strtod_r>
 8005af2:	9b03      	ldr	r3, [sp, #12]
 8005af4:	6821      	ldr	r1, [r4, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f011 0f02 	tst.w	r1, #2
 8005afc:	ec57 6b10 	vmov	r6, r7, d0
 8005b00:	f103 0204 	add.w	r2, r3, #4
 8005b04:	d020      	beq.n	8005b48 <_scanf_float+0x3d8>
 8005b06:	9903      	ldr	r1, [sp, #12]
 8005b08:	600a      	str	r2, [r1, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	e9c3 6700 	strd	r6, r7, [r3]
 8005b10:	68e3      	ldr	r3, [r4, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	60e3      	str	r3, [r4, #12]
 8005b16:	e66c      	b.n	80057f2 <_scanf_float+0x82>
 8005b18:	9b04      	ldr	r3, [sp, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0e4      	beq.n	8005ae8 <_scanf_float+0x378>
 8005b1e:	9905      	ldr	r1, [sp, #20]
 8005b20:	230a      	movs	r3, #10
 8005b22:	462a      	mov	r2, r5
 8005b24:	3101      	adds	r1, #1
 8005b26:	4640      	mov	r0, r8
 8005b28:	f000 ff7a 	bl	8006a20 <_strtol_r>
 8005b2c:	9b04      	ldr	r3, [sp, #16]
 8005b2e:	9e05      	ldr	r6, [sp, #20]
 8005b30:	1ac2      	subs	r2, r0, r3
 8005b32:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005b36:	429e      	cmp	r6, r3
 8005b38:	bf28      	it	cs
 8005b3a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005b3e:	4912      	ldr	r1, [pc, #72]	; (8005b88 <_scanf_float+0x418>)
 8005b40:	4630      	mov	r0, r6
 8005b42:	f000 f82b 	bl	8005b9c <siprintf>
 8005b46:	e7cf      	b.n	8005ae8 <_scanf_float+0x378>
 8005b48:	f011 0f04 	tst.w	r1, #4
 8005b4c:	9903      	ldr	r1, [sp, #12]
 8005b4e:	600a      	str	r2, [r1, #0]
 8005b50:	d1db      	bne.n	8005b0a <_scanf_float+0x39a>
 8005b52:	f8d3 8000 	ldr.w	r8, [r3]
 8005b56:	ee10 2a10 	vmov	r2, s0
 8005b5a:	ee10 0a10 	vmov	r0, s0
 8005b5e:	463b      	mov	r3, r7
 8005b60:	4639      	mov	r1, r7
 8005b62:	f7fa ffe3 	bl	8000b2c <__aeabi_dcmpun>
 8005b66:	b128      	cbz	r0, 8005b74 <_scanf_float+0x404>
 8005b68:	4808      	ldr	r0, [pc, #32]	; (8005b8c <_scanf_float+0x41c>)
 8005b6a:	f000 f811 	bl	8005b90 <nanf>
 8005b6e:	ed88 0a00 	vstr	s0, [r8]
 8005b72:	e7cd      	b.n	8005b10 <_scanf_float+0x3a0>
 8005b74:	4630      	mov	r0, r6
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fb f836 	bl	8000be8 <__aeabi_d2f>
 8005b7c:	f8c8 0000 	str.w	r0, [r8]
 8005b80:	e7c6      	b.n	8005b10 <_scanf_float+0x3a0>
 8005b82:	2500      	movs	r5, #0
 8005b84:	e635      	b.n	80057f2 <_scanf_float+0x82>
 8005b86:	bf00      	nop
 8005b88:	0800a01e 	.word	0x0800a01e
 8005b8c:	0800a453 	.word	0x0800a453

08005b90 <nanf>:
 8005b90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005b98 <nanf+0x8>
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	7fc00000 	.word	0x7fc00000

08005b9c <siprintf>:
 8005b9c:	b40e      	push	{r1, r2, r3}
 8005b9e:	b500      	push	{lr}
 8005ba0:	b09c      	sub	sp, #112	; 0x70
 8005ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ba4:	9002      	str	r0, [sp, #8]
 8005ba6:	9006      	str	r0, [sp, #24]
 8005ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bac:	4809      	ldr	r0, [pc, #36]	; (8005bd4 <siprintf+0x38>)
 8005bae:	9107      	str	r1, [sp, #28]
 8005bb0:	9104      	str	r1, [sp, #16]
 8005bb2:	4909      	ldr	r1, [pc, #36]	; (8005bd8 <siprintf+0x3c>)
 8005bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb8:	9105      	str	r1, [sp, #20]
 8005bba:	6800      	ldr	r0, [r0, #0]
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	a902      	add	r1, sp, #8
 8005bc0:	f002 ff48 	bl	8008a54 <_svfiprintf_r>
 8005bc4:	9b02      	ldr	r3, [sp, #8]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	b01c      	add	sp, #112	; 0x70
 8005bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd0:	b003      	add	sp, #12
 8005bd2:	4770      	bx	lr
 8005bd4:	20000010 	.word	0x20000010
 8005bd8:	ffff0208 	.word	0xffff0208

08005bdc <siscanf>:
 8005bdc:	b40e      	push	{r1, r2, r3}
 8005bde:	b510      	push	{r4, lr}
 8005be0:	b09f      	sub	sp, #124	; 0x7c
 8005be2:	ac21      	add	r4, sp, #132	; 0x84
 8005be4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005be8:	f854 2b04 	ldr.w	r2, [r4], #4
 8005bec:	9201      	str	r2, [sp, #4]
 8005bee:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005bf2:	9004      	str	r0, [sp, #16]
 8005bf4:	9008      	str	r0, [sp, #32]
 8005bf6:	f7fa faeb 	bl	80001d0 <strlen>
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <siscanf+0x50>)
 8005bfc:	9005      	str	r0, [sp, #20]
 8005bfe:	9009      	str	r0, [sp, #36]	; 0x24
 8005c00:	930d      	str	r3, [sp, #52]	; 0x34
 8005c02:	480b      	ldr	r0, [pc, #44]	; (8005c30 <siscanf+0x54>)
 8005c04:	9a01      	ldr	r2, [sp, #4]
 8005c06:	6800      	ldr	r0, [r0, #0]
 8005c08:	9403      	str	r4, [sp, #12]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9311      	str	r3, [sp, #68]	; 0x44
 8005c0e:	9316      	str	r3, [sp, #88]	; 0x58
 8005c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005c18:	a904      	add	r1, sp, #16
 8005c1a:	4623      	mov	r3, r4
 8005c1c:	f003 f874 	bl	8008d08 <__ssvfiscanf_r>
 8005c20:	b01f      	add	sp, #124	; 0x7c
 8005c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c26:	b003      	add	sp, #12
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	08005c57 	.word	0x08005c57
 8005c30:	20000010 	.word	0x20000010

08005c34 <__sread>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	460c      	mov	r4, r1
 8005c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3c:	f003 fb28 	bl	8009290 <_read_r>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	bfab      	itete	ge
 8005c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c46:	89a3      	ldrhlt	r3, [r4, #12]
 8005c48:	181b      	addge	r3, r3, r0
 8005c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c4e:	bfac      	ite	ge
 8005c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c52:	81a3      	strhlt	r3, [r4, #12]
 8005c54:	bd10      	pop	{r4, pc}

08005c56 <__seofread>:
 8005c56:	2000      	movs	r0, #0
 8005c58:	4770      	bx	lr

08005c5a <__swrite>:
 8005c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5e:	461f      	mov	r7, r3
 8005c60:	898b      	ldrh	r3, [r1, #12]
 8005c62:	05db      	lsls	r3, r3, #23
 8005c64:	4605      	mov	r5, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	4616      	mov	r6, r2
 8005c6a:	d505      	bpl.n	8005c78 <__swrite+0x1e>
 8005c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c70:	2302      	movs	r3, #2
 8005c72:	2200      	movs	r2, #0
 8005c74:	f002 f8e4 	bl	8007e40 <_lseek_r>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	4632      	mov	r2, r6
 8005c86:	463b      	mov	r3, r7
 8005c88:	4628      	mov	r0, r5
 8005c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8e:	f000 bec9 	b.w	8006a24 <_write_r>

08005c92 <__sseek>:
 8005c92:	b510      	push	{r4, lr}
 8005c94:	460c      	mov	r4, r1
 8005c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9a:	f002 f8d1 	bl	8007e40 <_lseek_r>
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	bf15      	itete	ne
 8005ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cae:	81a3      	strheq	r3, [r4, #12]
 8005cb0:	bf18      	it	ne
 8005cb2:	81a3      	strhne	r3, [r4, #12]
 8005cb4:	bd10      	pop	{r4, pc}

08005cb6 <__sclose>:
 8005cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cba:	f000 bec5 	b.w	8006a48 <_close_r>

08005cbe <sulp>:
 8005cbe:	b570      	push	{r4, r5, r6, lr}
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	ec45 4b10 	vmov	d0, r4, r5
 8005cc8:	4616      	mov	r6, r2
 8005cca:	f002 fc5f 	bl	800858c <__ulp>
 8005cce:	ec51 0b10 	vmov	r0, r1, d0
 8005cd2:	b17e      	cbz	r6, 8005cf4 <sulp+0x36>
 8005cd4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005cd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	dd09      	ble.n	8005cf4 <sulp+0x36>
 8005ce0:	051b      	lsls	r3, r3, #20
 8005ce2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ce6:	2400      	movs	r4, #0
 8005ce8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005cec:	4622      	mov	r2, r4
 8005cee:	462b      	mov	r3, r5
 8005cf0:	f7fa fc82 	bl	80005f8 <__aeabi_dmul>
 8005cf4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cf8 <_strtod_l>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	b0a3      	sub	sp, #140	; 0x8c
 8005cfe:	461f      	mov	r7, r3
 8005d00:	2300      	movs	r3, #0
 8005d02:	931e      	str	r3, [sp, #120]	; 0x78
 8005d04:	4ba4      	ldr	r3, [pc, #656]	; (8005f98 <_strtod_l+0x2a0>)
 8005d06:	9219      	str	r2, [sp, #100]	; 0x64
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	9307      	str	r3, [sp, #28]
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	4688      	mov	r8, r1
 8005d12:	f7fa fa5d 	bl	80001d0 <strlen>
 8005d16:	f04f 0a00 	mov.w	sl, #0
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	f04f 0b00 	mov.w	fp, #0
 8005d20:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d26:	781a      	ldrb	r2, [r3, #0]
 8005d28:	2a2b      	cmp	r2, #43	; 0x2b
 8005d2a:	d04c      	beq.n	8005dc6 <_strtod_l+0xce>
 8005d2c:	d839      	bhi.n	8005da2 <_strtod_l+0xaa>
 8005d2e:	2a0d      	cmp	r2, #13
 8005d30:	d832      	bhi.n	8005d98 <_strtod_l+0xa0>
 8005d32:	2a08      	cmp	r2, #8
 8005d34:	d832      	bhi.n	8005d9c <_strtod_l+0xa4>
 8005d36:	2a00      	cmp	r2, #0
 8005d38:	d03c      	beq.n	8005db4 <_strtod_l+0xbc>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	930e      	str	r3, [sp, #56]	; 0x38
 8005d3e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005d40:	7833      	ldrb	r3, [r6, #0]
 8005d42:	2b30      	cmp	r3, #48	; 0x30
 8005d44:	f040 80b4 	bne.w	8005eb0 <_strtod_l+0x1b8>
 8005d48:	7873      	ldrb	r3, [r6, #1]
 8005d4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d4e:	2b58      	cmp	r3, #88	; 0x58
 8005d50:	d16c      	bne.n	8005e2c <_strtod_l+0x134>
 8005d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	ab1e      	add	r3, sp, #120	; 0x78
 8005d58:	9702      	str	r7, [sp, #8]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	4a8f      	ldr	r2, [pc, #572]	; (8005f9c <_strtod_l+0x2a4>)
 8005d5e:	ab1f      	add	r3, sp, #124	; 0x7c
 8005d60:	a91d      	add	r1, sp, #116	; 0x74
 8005d62:	4620      	mov	r0, r4
 8005d64:	f001 fd60 	bl	8007828 <__gethex>
 8005d68:	f010 0707 	ands.w	r7, r0, #7
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	d005      	beq.n	8005d7c <_strtod_l+0x84>
 8005d70:	2f06      	cmp	r7, #6
 8005d72:	d12a      	bne.n	8005dca <_strtod_l+0xd2>
 8005d74:	3601      	adds	r6, #1
 8005d76:	2300      	movs	r3, #0
 8005d78:	961d      	str	r6, [sp, #116]	; 0x74
 8005d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8005d7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 8596 	bne.w	80068b0 <_strtod_l+0xbb8>
 8005d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d86:	b1db      	cbz	r3, 8005dc0 <_strtod_l+0xc8>
 8005d88:	4652      	mov	r2, sl
 8005d8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d8e:	ec43 2b10 	vmov	d0, r2, r3
 8005d92:	b023      	add	sp, #140	; 0x8c
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	2a20      	cmp	r2, #32
 8005d9a:	d1ce      	bne.n	8005d3a <_strtod_l+0x42>
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	931d      	str	r3, [sp, #116]	; 0x74
 8005da0:	e7c0      	b.n	8005d24 <_strtod_l+0x2c>
 8005da2:	2a2d      	cmp	r2, #45	; 0x2d
 8005da4:	d1c9      	bne.n	8005d3a <_strtod_l+0x42>
 8005da6:	2201      	movs	r2, #1
 8005da8:	920e      	str	r2, [sp, #56]	; 0x38
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	921d      	str	r2, [sp, #116]	; 0x74
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1c4      	bne.n	8005d3e <_strtod_l+0x46>
 8005db4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005db6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f040 8576 	bne.w	80068ac <_strtod_l+0xbb4>
 8005dc0:	4652      	mov	r2, sl
 8005dc2:	465b      	mov	r3, fp
 8005dc4:	e7e3      	b.n	8005d8e <_strtod_l+0x96>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	e7ee      	b.n	8005da8 <_strtod_l+0xb0>
 8005dca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005dcc:	b13a      	cbz	r2, 8005dde <_strtod_l+0xe6>
 8005dce:	2135      	movs	r1, #53	; 0x35
 8005dd0:	a820      	add	r0, sp, #128	; 0x80
 8005dd2:	f002 fce6 	bl	80087a2 <__copybits>
 8005dd6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f002 f8ab 	bl	8007f34 <_Bfree>
 8005dde:	3f01      	subs	r7, #1
 8005de0:	2f05      	cmp	r7, #5
 8005de2:	d807      	bhi.n	8005df4 <_strtod_l+0xfc>
 8005de4:	e8df f007 	tbb	[pc, r7]
 8005de8:	1d180b0e 	.word	0x1d180b0e
 8005dec:	030e      	.short	0x030e
 8005dee:	f04f 0b00 	mov.w	fp, #0
 8005df2:	46da      	mov	sl, fp
 8005df4:	0728      	lsls	r0, r5, #28
 8005df6:	d5c1      	bpl.n	8005d7c <_strtod_l+0x84>
 8005df8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005dfc:	e7be      	b.n	8005d7c <_strtod_l+0x84>
 8005dfe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005e02:	e7f7      	b.n	8005df4 <_strtod_l+0xfc>
 8005e04:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005e08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005e0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005e12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005e16:	e7ed      	b.n	8005df4 <_strtod_l+0xfc>
 8005e18:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005fa0 <_strtod_l+0x2a8>
 8005e1c:	f04f 0a00 	mov.w	sl, #0
 8005e20:	e7e8      	b.n	8005df4 <_strtod_l+0xfc>
 8005e22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005e26:	f04f 3aff 	mov.w	sl, #4294967295
 8005e2a:	e7e3      	b.n	8005df4 <_strtod_l+0xfc>
 8005e2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	921d      	str	r2, [sp, #116]	; 0x74
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b30      	cmp	r3, #48	; 0x30
 8005e36:	d0f9      	beq.n	8005e2c <_strtod_l+0x134>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d09f      	beq.n	8005d7c <_strtod_l+0x84>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	f04f 0900 	mov.w	r9, #0
 8005e42:	9304      	str	r3, [sp, #16]
 8005e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e46:	930a      	str	r3, [sp, #40]	; 0x28
 8005e48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005e4c:	464f      	mov	r7, r9
 8005e4e:	220a      	movs	r2, #10
 8005e50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005e52:	7806      	ldrb	r6, [r0, #0]
 8005e54:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005e58:	b2d9      	uxtb	r1, r3
 8005e5a:	2909      	cmp	r1, #9
 8005e5c:	d92a      	bls.n	8005eb4 <_strtod_l+0x1bc>
 8005e5e:	9907      	ldr	r1, [sp, #28]
 8005e60:	462a      	mov	r2, r5
 8005e62:	f003 fa7b 	bl	800935c <strncmp>
 8005e66:	b398      	cbz	r0, 8005ed0 <_strtod_l+0x1d8>
 8005e68:	2000      	movs	r0, #0
 8005e6a:	4633      	mov	r3, r6
 8005e6c:	463d      	mov	r5, r7
 8005e6e:	9007      	str	r0, [sp, #28]
 8005e70:	4602      	mov	r2, r0
 8005e72:	2b65      	cmp	r3, #101	; 0x65
 8005e74:	d001      	beq.n	8005e7a <_strtod_l+0x182>
 8005e76:	2b45      	cmp	r3, #69	; 0x45
 8005e78:	d118      	bne.n	8005eac <_strtod_l+0x1b4>
 8005e7a:	b91d      	cbnz	r5, 8005e84 <_strtod_l+0x18c>
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	4303      	orrs	r3, r0
 8005e80:	d098      	beq.n	8005db4 <_strtod_l+0xbc>
 8005e82:	2500      	movs	r5, #0
 8005e84:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005e88:	f108 0301 	add.w	r3, r8, #1
 8005e8c:	931d      	str	r3, [sp, #116]	; 0x74
 8005e8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005e92:	2b2b      	cmp	r3, #43	; 0x2b
 8005e94:	d075      	beq.n	8005f82 <_strtod_l+0x28a>
 8005e96:	2b2d      	cmp	r3, #45	; 0x2d
 8005e98:	d07b      	beq.n	8005f92 <_strtod_l+0x29a>
 8005e9a:	f04f 0c00 	mov.w	ip, #0
 8005e9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005ea2:	2909      	cmp	r1, #9
 8005ea4:	f240 8082 	bls.w	8005fac <_strtod_l+0x2b4>
 8005ea8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005eac:	2600      	movs	r6, #0
 8005eae:	e09d      	b.n	8005fec <_strtod_l+0x2f4>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e7c4      	b.n	8005e3e <_strtod_l+0x146>
 8005eb4:	2f08      	cmp	r7, #8
 8005eb6:	bfd8      	it	le
 8005eb8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005eba:	f100 0001 	add.w	r0, r0, #1
 8005ebe:	bfda      	itte	le
 8005ec0:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ec4:	9309      	strle	r3, [sp, #36]	; 0x24
 8005ec6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005eca:	3701      	adds	r7, #1
 8005ecc:	901d      	str	r0, [sp, #116]	; 0x74
 8005ece:	e7bf      	b.n	8005e50 <_strtod_l+0x158>
 8005ed0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ed2:	195a      	adds	r2, r3, r5
 8005ed4:	921d      	str	r2, [sp, #116]	; 0x74
 8005ed6:	5d5b      	ldrb	r3, [r3, r5]
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	d037      	beq.n	8005f4c <_strtod_l+0x254>
 8005edc:	9007      	str	r0, [sp, #28]
 8005ede:	463d      	mov	r5, r7
 8005ee0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005ee4:	2a09      	cmp	r2, #9
 8005ee6:	d912      	bls.n	8005f0e <_strtod_l+0x216>
 8005ee8:	2201      	movs	r2, #1
 8005eea:	e7c2      	b.n	8005e72 <_strtod_l+0x17a>
 8005eec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	921d      	str	r2, [sp, #116]	; 0x74
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	2b30      	cmp	r3, #48	; 0x30
 8005ef8:	d0f8      	beq.n	8005eec <_strtod_l+0x1f4>
 8005efa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005efe:	2a08      	cmp	r2, #8
 8005f00:	f200 84db 	bhi.w	80068ba <_strtod_l+0xbc2>
 8005f04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005f06:	9007      	str	r0, [sp, #28]
 8005f08:	2000      	movs	r0, #0
 8005f0a:	920a      	str	r2, [sp, #40]	; 0x28
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	3b30      	subs	r3, #48	; 0x30
 8005f10:	f100 0201 	add.w	r2, r0, #1
 8005f14:	d014      	beq.n	8005f40 <_strtod_l+0x248>
 8005f16:	9907      	ldr	r1, [sp, #28]
 8005f18:	4411      	add	r1, r2
 8005f1a:	9107      	str	r1, [sp, #28]
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	eb00 0e05 	add.w	lr, r0, r5
 8005f22:	210a      	movs	r1, #10
 8005f24:	4572      	cmp	r2, lr
 8005f26:	d113      	bne.n	8005f50 <_strtod_l+0x258>
 8005f28:	182a      	adds	r2, r5, r0
 8005f2a:	2a08      	cmp	r2, #8
 8005f2c:	f105 0501 	add.w	r5, r5, #1
 8005f30:	4405      	add	r5, r0
 8005f32:	dc1c      	bgt.n	8005f6e <_strtod_l+0x276>
 8005f34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f36:	220a      	movs	r2, #10
 8005f38:	fb02 3301 	mla	r3, r2, r1, r3
 8005f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3e:	2200      	movs	r2, #0
 8005f40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f42:	1c59      	adds	r1, r3, #1
 8005f44:	911d      	str	r1, [sp, #116]	; 0x74
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	4610      	mov	r0, r2
 8005f4a:	e7c9      	b.n	8005ee0 <_strtod_l+0x1e8>
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	e7d2      	b.n	8005ef6 <_strtod_l+0x1fe>
 8005f50:	2a08      	cmp	r2, #8
 8005f52:	dc04      	bgt.n	8005f5e <_strtod_l+0x266>
 8005f54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f56:	434e      	muls	r6, r1
 8005f58:	9609      	str	r6, [sp, #36]	; 0x24
 8005f5a:	3201      	adds	r2, #1
 8005f5c:	e7e2      	b.n	8005f24 <_strtod_l+0x22c>
 8005f5e:	f102 0c01 	add.w	ip, r2, #1
 8005f62:	f1bc 0f10 	cmp.w	ip, #16
 8005f66:	bfd8      	it	le
 8005f68:	fb01 f909 	mulle.w	r9, r1, r9
 8005f6c:	e7f5      	b.n	8005f5a <_strtod_l+0x262>
 8005f6e:	2d10      	cmp	r5, #16
 8005f70:	bfdc      	itt	le
 8005f72:	220a      	movle	r2, #10
 8005f74:	fb02 3909 	mlale	r9, r2, r9, r3
 8005f78:	e7e1      	b.n	8005f3e <_strtod_l+0x246>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	9307      	str	r3, [sp, #28]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	e77c      	b.n	8005e7c <_strtod_l+0x184>
 8005f82:	f04f 0c00 	mov.w	ip, #0
 8005f86:	f108 0302 	add.w	r3, r8, #2
 8005f8a:	931d      	str	r3, [sp, #116]	; 0x74
 8005f8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005f90:	e785      	b.n	8005e9e <_strtod_l+0x1a6>
 8005f92:	f04f 0c01 	mov.w	ip, #1
 8005f96:	e7f6      	b.n	8005f86 <_strtod_l+0x28e>
 8005f98:	0800a278 	.word	0x0800a278
 8005f9c:	0800a024 	.word	0x0800a024
 8005fa0:	7ff00000 	.word	0x7ff00000
 8005fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	911d      	str	r1, [sp, #116]	; 0x74
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2b30      	cmp	r3, #48	; 0x30
 8005fae:	d0f9      	beq.n	8005fa4 <_strtod_l+0x2ac>
 8005fb0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005fb4:	2908      	cmp	r1, #8
 8005fb6:	f63f af79 	bhi.w	8005eac <_strtod_l+0x1b4>
 8005fba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005fbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005fc0:	9308      	str	r3, [sp, #32]
 8005fc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005fc4:	1c59      	adds	r1, r3, #1
 8005fc6:	911d      	str	r1, [sp, #116]	; 0x74
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005fce:	2e09      	cmp	r6, #9
 8005fd0:	d937      	bls.n	8006042 <_strtod_l+0x34a>
 8005fd2:	9e08      	ldr	r6, [sp, #32]
 8005fd4:	1b89      	subs	r1, r1, r6
 8005fd6:	2908      	cmp	r1, #8
 8005fd8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005fdc:	dc02      	bgt.n	8005fe4 <_strtod_l+0x2ec>
 8005fde:	4576      	cmp	r6, lr
 8005fe0:	bfa8      	it	ge
 8005fe2:	4676      	movge	r6, lr
 8005fe4:	f1bc 0f00 	cmp.w	ip, #0
 8005fe8:	d000      	beq.n	8005fec <_strtod_l+0x2f4>
 8005fea:	4276      	negs	r6, r6
 8005fec:	2d00      	cmp	r5, #0
 8005fee:	d14f      	bne.n	8006090 <_strtod_l+0x398>
 8005ff0:	9904      	ldr	r1, [sp, #16]
 8005ff2:	4301      	orrs	r1, r0
 8005ff4:	f47f aec2 	bne.w	8005d7c <_strtod_l+0x84>
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	f47f aedb 	bne.w	8005db4 <_strtod_l+0xbc>
 8005ffe:	2b69      	cmp	r3, #105	; 0x69
 8006000:	d027      	beq.n	8006052 <_strtod_l+0x35a>
 8006002:	dc24      	bgt.n	800604e <_strtod_l+0x356>
 8006004:	2b49      	cmp	r3, #73	; 0x49
 8006006:	d024      	beq.n	8006052 <_strtod_l+0x35a>
 8006008:	2b4e      	cmp	r3, #78	; 0x4e
 800600a:	f47f aed3 	bne.w	8005db4 <_strtod_l+0xbc>
 800600e:	499e      	ldr	r1, [pc, #632]	; (8006288 <_strtod_l+0x590>)
 8006010:	a81d      	add	r0, sp, #116	; 0x74
 8006012:	f001 fe61 	bl	8007cd8 <__match>
 8006016:	2800      	cmp	r0, #0
 8006018:	f43f aecc 	beq.w	8005db4 <_strtod_l+0xbc>
 800601c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b28      	cmp	r3, #40	; 0x28
 8006022:	d12d      	bne.n	8006080 <_strtod_l+0x388>
 8006024:	4999      	ldr	r1, [pc, #612]	; (800628c <_strtod_l+0x594>)
 8006026:	aa20      	add	r2, sp, #128	; 0x80
 8006028:	a81d      	add	r0, sp, #116	; 0x74
 800602a:	f001 fe69 	bl	8007d00 <__hexnan>
 800602e:	2805      	cmp	r0, #5
 8006030:	d126      	bne.n	8006080 <_strtod_l+0x388>
 8006032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006034:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006038:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800603c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006040:	e69c      	b.n	8005d7c <_strtod_l+0x84>
 8006042:	210a      	movs	r1, #10
 8006044:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006048:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800604c:	e7b9      	b.n	8005fc2 <_strtod_l+0x2ca>
 800604e:	2b6e      	cmp	r3, #110	; 0x6e
 8006050:	e7db      	b.n	800600a <_strtod_l+0x312>
 8006052:	498f      	ldr	r1, [pc, #572]	; (8006290 <_strtod_l+0x598>)
 8006054:	a81d      	add	r0, sp, #116	; 0x74
 8006056:	f001 fe3f 	bl	8007cd8 <__match>
 800605a:	2800      	cmp	r0, #0
 800605c:	f43f aeaa 	beq.w	8005db4 <_strtod_l+0xbc>
 8006060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006062:	498c      	ldr	r1, [pc, #560]	; (8006294 <_strtod_l+0x59c>)
 8006064:	3b01      	subs	r3, #1
 8006066:	a81d      	add	r0, sp, #116	; 0x74
 8006068:	931d      	str	r3, [sp, #116]	; 0x74
 800606a:	f001 fe35 	bl	8007cd8 <__match>
 800606e:	b910      	cbnz	r0, 8006076 <_strtod_l+0x37e>
 8006070:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006072:	3301      	adds	r3, #1
 8006074:	931d      	str	r3, [sp, #116]	; 0x74
 8006076:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80062a4 <_strtod_l+0x5ac>
 800607a:	f04f 0a00 	mov.w	sl, #0
 800607e:	e67d      	b.n	8005d7c <_strtod_l+0x84>
 8006080:	4885      	ldr	r0, [pc, #532]	; (8006298 <_strtod_l+0x5a0>)
 8006082:	f003 f919 	bl	80092b8 <nan>
 8006086:	ed8d 0b04 	vstr	d0, [sp, #16]
 800608a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800608e:	e675      	b.n	8005d7c <_strtod_l+0x84>
 8006090:	9b07      	ldr	r3, [sp, #28]
 8006092:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006094:	1af3      	subs	r3, r6, r3
 8006096:	2f00      	cmp	r7, #0
 8006098:	bf08      	it	eq
 800609a:	462f      	moveq	r7, r5
 800609c:	2d10      	cmp	r5, #16
 800609e:	9308      	str	r3, [sp, #32]
 80060a0:	46a8      	mov	r8, r5
 80060a2:	bfa8      	it	ge
 80060a4:	f04f 0810 	movge.w	r8, #16
 80060a8:	f7fa fa2c 	bl	8000504 <__aeabi_ui2d>
 80060ac:	2d09      	cmp	r5, #9
 80060ae:	4682      	mov	sl, r0
 80060b0:	468b      	mov	fp, r1
 80060b2:	dd13      	ble.n	80060dc <_strtod_l+0x3e4>
 80060b4:	4b79      	ldr	r3, [pc, #484]	; (800629c <_strtod_l+0x5a4>)
 80060b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80060ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80060be:	f7fa fa9b 	bl	80005f8 <__aeabi_dmul>
 80060c2:	4682      	mov	sl, r0
 80060c4:	4648      	mov	r0, r9
 80060c6:	468b      	mov	fp, r1
 80060c8:	f7fa fa1c 	bl	8000504 <__aeabi_ui2d>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4650      	mov	r0, sl
 80060d2:	4659      	mov	r1, fp
 80060d4:	f7fa f8da 	bl	800028c <__adddf3>
 80060d8:	4682      	mov	sl, r0
 80060da:	468b      	mov	fp, r1
 80060dc:	2d0f      	cmp	r5, #15
 80060de:	dc38      	bgt.n	8006152 <_strtod_l+0x45a>
 80060e0:	9b08      	ldr	r3, [sp, #32]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f43f ae4a 	beq.w	8005d7c <_strtod_l+0x84>
 80060e8:	dd24      	ble.n	8006134 <_strtod_l+0x43c>
 80060ea:	2b16      	cmp	r3, #22
 80060ec:	dc0b      	bgt.n	8006106 <_strtod_l+0x40e>
 80060ee:	4d6b      	ldr	r5, [pc, #428]	; (800629c <_strtod_l+0x5a4>)
 80060f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80060f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80060f8:	4652      	mov	r2, sl
 80060fa:	465b      	mov	r3, fp
 80060fc:	f7fa fa7c 	bl	80005f8 <__aeabi_dmul>
 8006100:	4682      	mov	sl, r0
 8006102:	468b      	mov	fp, r1
 8006104:	e63a      	b.n	8005d7c <_strtod_l+0x84>
 8006106:	9a08      	ldr	r2, [sp, #32]
 8006108:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800610c:	4293      	cmp	r3, r2
 800610e:	db20      	blt.n	8006152 <_strtod_l+0x45a>
 8006110:	4c62      	ldr	r4, [pc, #392]	; (800629c <_strtod_l+0x5a4>)
 8006112:	f1c5 050f 	rsb	r5, r5, #15
 8006116:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800611a:	4652      	mov	r2, sl
 800611c:	465b      	mov	r3, fp
 800611e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006122:	f7fa fa69 	bl	80005f8 <__aeabi_dmul>
 8006126:	9b08      	ldr	r3, [sp, #32]
 8006128:	1b5d      	subs	r5, r3, r5
 800612a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800612e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006132:	e7e3      	b.n	80060fc <_strtod_l+0x404>
 8006134:	9b08      	ldr	r3, [sp, #32]
 8006136:	3316      	adds	r3, #22
 8006138:	db0b      	blt.n	8006152 <_strtod_l+0x45a>
 800613a:	9b07      	ldr	r3, [sp, #28]
 800613c:	4a57      	ldr	r2, [pc, #348]	; (800629c <_strtod_l+0x5a4>)
 800613e:	1b9e      	subs	r6, r3, r6
 8006140:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006144:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006148:	4650      	mov	r0, sl
 800614a:	4659      	mov	r1, fp
 800614c:	f7fa fb7e 	bl	800084c <__aeabi_ddiv>
 8006150:	e7d6      	b.n	8006100 <_strtod_l+0x408>
 8006152:	9b08      	ldr	r3, [sp, #32]
 8006154:	eba5 0808 	sub.w	r8, r5, r8
 8006158:	4498      	add	r8, r3
 800615a:	f1b8 0f00 	cmp.w	r8, #0
 800615e:	dd71      	ble.n	8006244 <_strtod_l+0x54c>
 8006160:	f018 030f 	ands.w	r3, r8, #15
 8006164:	d00a      	beq.n	800617c <_strtod_l+0x484>
 8006166:	494d      	ldr	r1, [pc, #308]	; (800629c <_strtod_l+0x5a4>)
 8006168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800616c:	4652      	mov	r2, sl
 800616e:	465b      	mov	r3, fp
 8006170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006174:	f7fa fa40 	bl	80005f8 <__aeabi_dmul>
 8006178:	4682      	mov	sl, r0
 800617a:	468b      	mov	fp, r1
 800617c:	f038 080f 	bics.w	r8, r8, #15
 8006180:	d04d      	beq.n	800621e <_strtod_l+0x526>
 8006182:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006186:	dd22      	ble.n	80061ce <_strtod_l+0x4d6>
 8006188:	2500      	movs	r5, #0
 800618a:	462e      	mov	r6, r5
 800618c:	9509      	str	r5, [sp, #36]	; 0x24
 800618e:	9507      	str	r5, [sp, #28]
 8006190:	2322      	movs	r3, #34	; 0x22
 8006192:	f8df b110 	ldr.w	fp, [pc, #272]	; 80062a4 <_strtod_l+0x5ac>
 8006196:	6023      	str	r3, [r4, #0]
 8006198:	f04f 0a00 	mov.w	sl, #0
 800619c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f43f adec 	beq.w	8005d7c <_strtod_l+0x84>
 80061a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80061a6:	4620      	mov	r0, r4
 80061a8:	f001 fec4 	bl	8007f34 <_Bfree>
 80061ac:	9907      	ldr	r1, [sp, #28]
 80061ae:	4620      	mov	r0, r4
 80061b0:	f001 fec0 	bl	8007f34 <_Bfree>
 80061b4:	4631      	mov	r1, r6
 80061b6:	4620      	mov	r0, r4
 80061b8:	f001 febc 	bl	8007f34 <_Bfree>
 80061bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061be:	4620      	mov	r0, r4
 80061c0:	f001 feb8 	bl	8007f34 <_Bfree>
 80061c4:	4629      	mov	r1, r5
 80061c6:	4620      	mov	r0, r4
 80061c8:	f001 feb4 	bl	8007f34 <_Bfree>
 80061cc:	e5d6      	b.n	8005d7c <_strtod_l+0x84>
 80061ce:	2300      	movs	r3, #0
 80061d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80061d4:	4650      	mov	r0, sl
 80061d6:	4659      	mov	r1, fp
 80061d8:	4699      	mov	r9, r3
 80061da:	f1b8 0f01 	cmp.w	r8, #1
 80061de:	dc21      	bgt.n	8006224 <_strtod_l+0x52c>
 80061e0:	b10b      	cbz	r3, 80061e6 <_strtod_l+0x4ee>
 80061e2:	4682      	mov	sl, r0
 80061e4:	468b      	mov	fp, r1
 80061e6:	4b2e      	ldr	r3, [pc, #184]	; (80062a0 <_strtod_l+0x5a8>)
 80061e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80061ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80061f0:	4652      	mov	r2, sl
 80061f2:	465b      	mov	r3, fp
 80061f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80061f8:	f7fa f9fe 	bl	80005f8 <__aeabi_dmul>
 80061fc:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <_strtod_l+0x5ac>)
 80061fe:	460a      	mov	r2, r1
 8006200:	400b      	ands	r3, r1
 8006202:	4929      	ldr	r1, [pc, #164]	; (80062a8 <_strtod_l+0x5b0>)
 8006204:	428b      	cmp	r3, r1
 8006206:	4682      	mov	sl, r0
 8006208:	d8be      	bhi.n	8006188 <_strtod_l+0x490>
 800620a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800620e:	428b      	cmp	r3, r1
 8006210:	bf86      	itte	hi
 8006212:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80062ac <_strtod_l+0x5b4>
 8006216:	f04f 3aff 	movhi.w	sl, #4294967295
 800621a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800621e:	2300      	movs	r3, #0
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	e081      	b.n	8006328 <_strtod_l+0x630>
 8006224:	f018 0f01 	tst.w	r8, #1
 8006228:	d007      	beq.n	800623a <_strtod_l+0x542>
 800622a:	4b1d      	ldr	r3, [pc, #116]	; (80062a0 <_strtod_l+0x5a8>)
 800622c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f7fa f9e0 	bl	80005f8 <__aeabi_dmul>
 8006238:	2301      	movs	r3, #1
 800623a:	f109 0901 	add.w	r9, r9, #1
 800623e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006242:	e7ca      	b.n	80061da <_strtod_l+0x4e2>
 8006244:	d0eb      	beq.n	800621e <_strtod_l+0x526>
 8006246:	f1c8 0800 	rsb	r8, r8, #0
 800624a:	f018 020f 	ands.w	r2, r8, #15
 800624e:	d00a      	beq.n	8006266 <_strtod_l+0x56e>
 8006250:	4b12      	ldr	r3, [pc, #72]	; (800629c <_strtod_l+0x5a4>)
 8006252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006256:	4650      	mov	r0, sl
 8006258:	4659      	mov	r1, fp
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7fa faf5 	bl	800084c <__aeabi_ddiv>
 8006262:	4682      	mov	sl, r0
 8006264:	468b      	mov	fp, r1
 8006266:	ea5f 1828 	movs.w	r8, r8, asr #4
 800626a:	d0d8      	beq.n	800621e <_strtod_l+0x526>
 800626c:	f1b8 0f1f 	cmp.w	r8, #31
 8006270:	dd1e      	ble.n	80062b0 <_strtod_l+0x5b8>
 8006272:	2500      	movs	r5, #0
 8006274:	462e      	mov	r6, r5
 8006276:	9509      	str	r5, [sp, #36]	; 0x24
 8006278:	9507      	str	r5, [sp, #28]
 800627a:	2322      	movs	r3, #34	; 0x22
 800627c:	f04f 0a00 	mov.w	sl, #0
 8006280:	f04f 0b00 	mov.w	fp, #0
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	e789      	b.n	800619c <_strtod_l+0x4a4>
 8006288:	08009ff9 	.word	0x08009ff9
 800628c:	0800a038 	.word	0x0800a038
 8006290:	08009ff1 	.word	0x08009ff1
 8006294:	0800a17c 	.word	0x0800a17c
 8006298:	0800a453 	.word	0x0800a453
 800629c:	0800a318 	.word	0x0800a318
 80062a0:	0800a2f0 	.word	0x0800a2f0
 80062a4:	7ff00000 	.word	0x7ff00000
 80062a8:	7ca00000 	.word	0x7ca00000
 80062ac:	7fefffff 	.word	0x7fefffff
 80062b0:	f018 0310 	ands.w	r3, r8, #16
 80062b4:	bf18      	it	ne
 80062b6:	236a      	movne	r3, #106	; 0x6a
 80062b8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006670 <_strtod_l+0x978>
 80062bc:	9304      	str	r3, [sp, #16]
 80062be:	4650      	mov	r0, sl
 80062c0:	4659      	mov	r1, fp
 80062c2:	2300      	movs	r3, #0
 80062c4:	f018 0f01 	tst.w	r8, #1
 80062c8:	d004      	beq.n	80062d4 <_strtod_l+0x5dc>
 80062ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80062ce:	f7fa f993 	bl	80005f8 <__aeabi_dmul>
 80062d2:	2301      	movs	r3, #1
 80062d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80062d8:	f109 0908 	add.w	r9, r9, #8
 80062dc:	d1f2      	bne.n	80062c4 <_strtod_l+0x5cc>
 80062de:	b10b      	cbz	r3, 80062e4 <_strtod_l+0x5ec>
 80062e0:	4682      	mov	sl, r0
 80062e2:	468b      	mov	fp, r1
 80062e4:	9b04      	ldr	r3, [sp, #16]
 80062e6:	b1bb      	cbz	r3, 8006318 <_strtod_l+0x620>
 80062e8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80062ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	4659      	mov	r1, fp
 80062f4:	dd10      	ble.n	8006318 <_strtod_l+0x620>
 80062f6:	2b1f      	cmp	r3, #31
 80062f8:	f340 8128 	ble.w	800654c <_strtod_l+0x854>
 80062fc:	2b34      	cmp	r3, #52	; 0x34
 80062fe:	bfde      	ittt	le
 8006300:	3b20      	suble	r3, #32
 8006302:	f04f 32ff 	movle.w	r2, #4294967295
 8006306:	fa02 f303 	lslle.w	r3, r2, r3
 800630a:	f04f 0a00 	mov.w	sl, #0
 800630e:	bfcc      	ite	gt
 8006310:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006314:	ea03 0b01 	andle.w	fp, r3, r1
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	4650      	mov	r0, sl
 800631e:	4659      	mov	r1, fp
 8006320:	f7fa fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006324:	2800      	cmp	r0, #0
 8006326:	d1a4      	bne.n	8006272 <_strtod_l+0x57a>
 8006328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800632e:	462b      	mov	r3, r5
 8006330:	463a      	mov	r2, r7
 8006332:	4620      	mov	r0, r4
 8006334:	f001 fe6a 	bl	800800c <__s2b>
 8006338:	9009      	str	r0, [sp, #36]	; 0x24
 800633a:	2800      	cmp	r0, #0
 800633c:	f43f af24 	beq.w	8006188 <_strtod_l+0x490>
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	1b9e      	subs	r6, r3, r6
 8006344:	9b08      	ldr	r3, [sp, #32]
 8006346:	2b00      	cmp	r3, #0
 8006348:	bfb4      	ite	lt
 800634a:	4633      	movlt	r3, r6
 800634c:	2300      	movge	r3, #0
 800634e:	9310      	str	r3, [sp, #64]	; 0x40
 8006350:	9b08      	ldr	r3, [sp, #32]
 8006352:	2500      	movs	r5, #0
 8006354:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006358:	9318      	str	r3, [sp, #96]	; 0x60
 800635a:	462e      	mov	r6, r5
 800635c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800635e:	4620      	mov	r0, r4
 8006360:	6859      	ldr	r1, [r3, #4]
 8006362:	f001 fda7 	bl	8007eb4 <_Balloc>
 8006366:	9007      	str	r0, [sp, #28]
 8006368:	2800      	cmp	r0, #0
 800636a:	f43f af11 	beq.w	8006190 <_strtod_l+0x498>
 800636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006370:	691a      	ldr	r2, [r3, #16]
 8006372:	3202      	adds	r2, #2
 8006374:	f103 010c 	add.w	r1, r3, #12
 8006378:	0092      	lsls	r2, r2, #2
 800637a:	300c      	adds	r0, #12
 800637c:	f001 fd8c 	bl	8007e98 <memcpy>
 8006380:	ec4b ab10 	vmov	d0, sl, fp
 8006384:	aa20      	add	r2, sp, #128	; 0x80
 8006386:	a91f      	add	r1, sp, #124	; 0x7c
 8006388:	4620      	mov	r0, r4
 800638a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800638e:	f002 f979 	bl	8008684 <__d2b>
 8006392:	901e      	str	r0, [sp, #120]	; 0x78
 8006394:	2800      	cmp	r0, #0
 8006396:	f43f aefb 	beq.w	8006190 <_strtod_l+0x498>
 800639a:	2101      	movs	r1, #1
 800639c:	4620      	mov	r0, r4
 800639e:	f001 fecf 	bl	8008140 <__i2b>
 80063a2:	4606      	mov	r6, r0
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f43f aef3 	beq.w	8006190 <_strtod_l+0x498>
 80063aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063ac:	9904      	ldr	r1, [sp, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bfab      	itete	ge
 80063b2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80063b4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80063b6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80063b8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80063bc:	bfac      	ite	ge
 80063be:	eb03 0902 	addge.w	r9, r3, r2
 80063c2:	1ad7      	sublt	r7, r2, r3
 80063c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063c6:	eba3 0801 	sub.w	r8, r3, r1
 80063ca:	4490      	add	r8, r2
 80063cc:	4ba3      	ldr	r3, [pc, #652]	; (800665c <_strtod_l+0x964>)
 80063ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80063d2:	4598      	cmp	r8, r3
 80063d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80063d8:	f280 80cc 	bge.w	8006574 <_strtod_l+0x87c>
 80063dc:	eba3 0308 	sub.w	r3, r3, r8
 80063e0:	2b1f      	cmp	r3, #31
 80063e2:	eba2 0203 	sub.w	r2, r2, r3
 80063e6:	f04f 0101 	mov.w	r1, #1
 80063ea:	f300 80b6 	bgt.w	800655a <_strtod_l+0x862>
 80063ee:	fa01 f303 	lsl.w	r3, r1, r3
 80063f2:	9311      	str	r3, [sp, #68]	; 0x44
 80063f4:	2300      	movs	r3, #0
 80063f6:	930c      	str	r3, [sp, #48]	; 0x30
 80063f8:	eb09 0802 	add.w	r8, r9, r2
 80063fc:	9b04      	ldr	r3, [sp, #16]
 80063fe:	45c1      	cmp	r9, r8
 8006400:	4417      	add	r7, r2
 8006402:	441f      	add	r7, r3
 8006404:	464b      	mov	r3, r9
 8006406:	bfa8      	it	ge
 8006408:	4643      	movge	r3, r8
 800640a:	42bb      	cmp	r3, r7
 800640c:	bfa8      	it	ge
 800640e:	463b      	movge	r3, r7
 8006410:	2b00      	cmp	r3, #0
 8006412:	bfc2      	ittt	gt
 8006414:	eba8 0803 	subgt.w	r8, r8, r3
 8006418:	1aff      	subgt	r7, r7, r3
 800641a:	eba9 0903 	subgt.w	r9, r9, r3
 800641e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	dd17      	ble.n	8006454 <_strtod_l+0x75c>
 8006424:	4631      	mov	r1, r6
 8006426:	461a      	mov	r2, r3
 8006428:	4620      	mov	r0, r4
 800642a:	f001 ff45 	bl	80082b8 <__pow5mult>
 800642e:	4606      	mov	r6, r0
 8006430:	2800      	cmp	r0, #0
 8006432:	f43f aead 	beq.w	8006190 <_strtod_l+0x498>
 8006436:	4601      	mov	r1, r0
 8006438:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800643a:	4620      	mov	r0, r4
 800643c:	f001 fe96 	bl	800816c <__multiply>
 8006440:	900f      	str	r0, [sp, #60]	; 0x3c
 8006442:	2800      	cmp	r0, #0
 8006444:	f43f aea4 	beq.w	8006190 <_strtod_l+0x498>
 8006448:	991e      	ldr	r1, [sp, #120]	; 0x78
 800644a:	4620      	mov	r0, r4
 800644c:	f001 fd72 	bl	8007f34 <_Bfree>
 8006450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006452:	931e      	str	r3, [sp, #120]	; 0x78
 8006454:	f1b8 0f00 	cmp.w	r8, #0
 8006458:	f300 8091 	bgt.w	800657e <_strtod_l+0x886>
 800645c:	9b08      	ldr	r3, [sp, #32]
 800645e:	2b00      	cmp	r3, #0
 8006460:	dd08      	ble.n	8006474 <_strtod_l+0x77c>
 8006462:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006464:	9907      	ldr	r1, [sp, #28]
 8006466:	4620      	mov	r0, r4
 8006468:	f001 ff26 	bl	80082b8 <__pow5mult>
 800646c:	9007      	str	r0, [sp, #28]
 800646e:	2800      	cmp	r0, #0
 8006470:	f43f ae8e 	beq.w	8006190 <_strtod_l+0x498>
 8006474:	2f00      	cmp	r7, #0
 8006476:	dd08      	ble.n	800648a <_strtod_l+0x792>
 8006478:	9907      	ldr	r1, [sp, #28]
 800647a:	463a      	mov	r2, r7
 800647c:	4620      	mov	r0, r4
 800647e:	f001 ff75 	bl	800836c <__lshift>
 8006482:	9007      	str	r0, [sp, #28]
 8006484:	2800      	cmp	r0, #0
 8006486:	f43f ae83 	beq.w	8006190 <_strtod_l+0x498>
 800648a:	f1b9 0f00 	cmp.w	r9, #0
 800648e:	dd08      	ble.n	80064a2 <_strtod_l+0x7aa>
 8006490:	4631      	mov	r1, r6
 8006492:	464a      	mov	r2, r9
 8006494:	4620      	mov	r0, r4
 8006496:	f001 ff69 	bl	800836c <__lshift>
 800649a:	4606      	mov	r6, r0
 800649c:	2800      	cmp	r0, #0
 800649e:	f43f ae77 	beq.w	8006190 <_strtod_l+0x498>
 80064a2:	9a07      	ldr	r2, [sp, #28]
 80064a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80064a6:	4620      	mov	r0, r4
 80064a8:	f001 ffe8 	bl	800847c <__mdiff>
 80064ac:	4605      	mov	r5, r0
 80064ae:	2800      	cmp	r0, #0
 80064b0:	f43f ae6e 	beq.w	8006190 <_strtod_l+0x498>
 80064b4:	68c3      	ldr	r3, [r0, #12]
 80064b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80064b8:	2300      	movs	r3, #0
 80064ba:	60c3      	str	r3, [r0, #12]
 80064bc:	4631      	mov	r1, r6
 80064be:	f001 ffc1 	bl	8008444 <__mcmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	da65      	bge.n	8006592 <_strtod_l+0x89a>
 80064c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064c8:	ea53 030a 	orrs.w	r3, r3, sl
 80064cc:	f040 8087 	bne.w	80065de <_strtod_l+0x8e6>
 80064d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 8082 	bne.w	80065de <_strtod_l+0x8e6>
 80064da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064de:	0d1b      	lsrs	r3, r3, #20
 80064e0:	051b      	lsls	r3, r3, #20
 80064e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80064e6:	d97a      	bls.n	80065de <_strtod_l+0x8e6>
 80064e8:	696b      	ldr	r3, [r5, #20]
 80064ea:	b913      	cbnz	r3, 80064f2 <_strtod_l+0x7fa>
 80064ec:	692b      	ldr	r3, [r5, #16]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	dd75      	ble.n	80065de <_strtod_l+0x8e6>
 80064f2:	4629      	mov	r1, r5
 80064f4:	2201      	movs	r2, #1
 80064f6:	4620      	mov	r0, r4
 80064f8:	f001 ff38 	bl	800836c <__lshift>
 80064fc:	4631      	mov	r1, r6
 80064fe:	4605      	mov	r5, r0
 8006500:	f001 ffa0 	bl	8008444 <__mcmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	dd6a      	ble.n	80065de <_strtod_l+0x8e6>
 8006508:	9904      	ldr	r1, [sp, #16]
 800650a:	4a55      	ldr	r2, [pc, #340]	; (8006660 <_strtod_l+0x968>)
 800650c:	465b      	mov	r3, fp
 800650e:	2900      	cmp	r1, #0
 8006510:	f000 8085 	beq.w	800661e <_strtod_l+0x926>
 8006514:	ea02 010b 	and.w	r1, r2, fp
 8006518:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800651c:	dc7f      	bgt.n	800661e <_strtod_l+0x926>
 800651e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006522:	f77f aeaa 	ble.w	800627a <_strtod_l+0x582>
 8006526:	4a4f      	ldr	r2, [pc, #316]	; (8006664 <_strtod_l+0x96c>)
 8006528:	2300      	movs	r3, #0
 800652a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800652e:	4650      	mov	r0, sl
 8006530:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006534:	4659      	mov	r1, fp
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	460b      	mov	r3, r1
 800653c:	4303      	orrs	r3, r0
 800653e:	bf08      	it	eq
 8006540:	2322      	moveq	r3, #34	; 0x22
 8006542:	4682      	mov	sl, r0
 8006544:	468b      	mov	fp, r1
 8006546:	bf08      	it	eq
 8006548:	6023      	streq	r3, [r4, #0]
 800654a:	e62b      	b.n	80061a4 <_strtod_l+0x4ac>
 800654c:	f04f 32ff 	mov.w	r2, #4294967295
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	ea03 0a0a 	and.w	sl, r3, sl
 8006558:	e6de      	b.n	8006318 <_strtod_l+0x620>
 800655a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800655e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006562:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006566:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800656a:	fa01 f308 	lsl.w	r3, r1, r8
 800656e:	930c      	str	r3, [sp, #48]	; 0x30
 8006570:	9111      	str	r1, [sp, #68]	; 0x44
 8006572:	e741      	b.n	80063f8 <_strtod_l+0x700>
 8006574:	2300      	movs	r3, #0
 8006576:	930c      	str	r3, [sp, #48]	; 0x30
 8006578:	2301      	movs	r3, #1
 800657a:	9311      	str	r3, [sp, #68]	; 0x44
 800657c:	e73c      	b.n	80063f8 <_strtod_l+0x700>
 800657e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006580:	4642      	mov	r2, r8
 8006582:	4620      	mov	r0, r4
 8006584:	f001 fef2 	bl	800836c <__lshift>
 8006588:	901e      	str	r0, [sp, #120]	; 0x78
 800658a:	2800      	cmp	r0, #0
 800658c:	f47f af66 	bne.w	800645c <_strtod_l+0x764>
 8006590:	e5fe      	b.n	8006190 <_strtod_l+0x498>
 8006592:	465f      	mov	r7, fp
 8006594:	d16e      	bne.n	8006674 <_strtod_l+0x97c>
 8006596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800659c:	b342      	cbz	r2, 80065f0 <_strtod_l+0x8f8>
 800659e:	4a32      	ldr	r2, [pc, #200]	; (8006668 <_strtod_l+0x970>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d128      	bne.n	80065f6 <_strtod_l+0x8fe>
 80065a4:	9b04      	ldr	r3, [sp, #16]
 80065a6:	4650      	mov	r0, sl
 80065a8:	b1eb      	cbz	r3, 80065e6 <_strtod_l+0x8ee>
 80065aa:	4a2d      	ldr	r2, [pc, #180]	; (8006660 <_strtod_l+0x968>)
 80065ac:	403a      	ands	r2, r7
 80065ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80065b2:	f04f 31ff 	mov.w	r1, #4294967295
 80065b6:	d819      	bhi.n	80065ec <_strtod_l+0x8f4>
 80065b8:	0d12      	lsrs	r2, r2, #20
 80065ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80065be:	fa01 f303 	lsl.w	r3, r1, r3
 80065c2:	4298      	cmp	r0, r3
 80065c4:	d117      	bne.n	80065f6 <_strtod_l+0x8fe>
 80065c6:	4b29      	ldr	r3, [pc, #164]	; (800666c <_strtod_l+0x974>)
 80065c8:	429f      	cmp	r7, r3
 80065ca:	d102      	bne.n	80065d2 <_strtod_l+0x8da>
 80065cc:	3001      	adds	r0, #1
 80065ce:	f43f addf 	beq.w	8006190 <_strtod_l+0x498>
 80065d2:	4b23      	ldr	r3, [pc, #140]	; (8006660 <_strtod_l+0x968>)
 80065d4:	403b      	ands	r3, r7
 80065d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80065da:	f04f 0a00 	mov.w	sl, #0
 80065de:	9b04      	ldr	r3, [sp, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1a0      	bne.n	8006526 <_strtod_l+0x82e>
 80065e4:	e5de      	b.n	80061a4 <_strtod_l+0x4ac>
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ea:	e7ea      	b.n	80065c2 <_strtod_l+0x8ca>
 80065ec:	460b      	mov	r3, r1
 80065ee:	e7e8      	b.n	80065c2 <_strtod_l+0x8ca>
 80065f0:	ea53 030a 	orrs.w	r3, r3, sl
 80065f4:	d088      	beq.n	8006508 <_strtod_l+0x810>
 80065f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065f8:	b1db      	cbz	r3, 8006632 <_strtod_l+0x93a>
 80065fa:	423b      	tst	r3, r7
 80065fc:	d0ef      	beq.n	80065de <_strtod_l+0x8e6>
 80065fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006600:	9a04      	ldr	r2, [sp, #16]
 8006602:	4650      	mov	r0, sl
 8006604:	4659      	mov	r1, fp
 8006606:	b1c3      	cbz	r3, 800663a <_strtod_l+0x942>
 8006608:	f7ff fb59 	bl	8005cbe <sulp>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006614:	f7f9 fe3a 	bl	800028c <__adddf3>
 8006618:	4682      	mov	sl, r0
 800661a:	468b      	mov	fp, r1
 800661c:	e7df      	b.n	80065de <_strtod_l+0x8e6>
 800661e:	4013      	ands	r3, r2
 8006620:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006624:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006628:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800662c:	f04f 3aff 	mov.w	sl, #4294967295
 8006630:	e7d5      	b.n	80065de <_strtod_l+0x8e6>
 8006632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006634:	ea13 0f0a 	tst.w	r3, sl
 8006638:	e7e0      	b.n	80065fc <_strtod_l+0x904>
 800663a:	f7ff fb40 	bl	8005cbe <sulp>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006646:	f7f9 fe1f 	bl	8000288 <__aeabi_dsub>
 800664a:	2200      	movs	r2, #0
 800664c:	2300      	movs	r3, #0
 800664e:	4682      	mov	sl, r0
 8006650:	468b      	mov	fp, r1
 8006652:	f7fa fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 8006656:	2800      	cmp	r0, #0
 8006658:	d0c1      	beq.n	80065de <_strtod_l+0x8e6>
 800665a:	e60e      	b.n	800627a <_strtod_l+0x582>
 800665c:	fffffc02 	.word	0xfffffc02
 8006660:	7ff00000 	.word	0x7ff00000
 8006664:	39500000 	.word	0x39500000
 8006668:	000fffff 	.word	0x000fffff
 800666c:	7fefffff 	.word	0x7fefffff
 8006670:	0800a050 	.word	0x0800a050
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	f002 f860 	bl	800873c <__ratio>
 800667c:	ec59 8b10 	vmov	r8, r9, d0
 8006680:	ee10 0a10 	vmov	r0, s0
 8006684:	2200      	movs	r2, #0
 8006686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800668a:	4649      	mov	r1, r9
 800668c:	f7fa fa30 	bl	8000af0 <__aeabi_dcmple>
 8006690:	2800      	cmp	r0, #0
 8006692:	d07c      	beq.n	800678e <_strtod_l+0xa96>
 8006694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d04c      	beq.n	8006734 <_strtod_l+0xa3c>
 800669a:	4b95      	ldr	r3, [pc, #596]	; (80068f0 <_strtod_l+0xbf8>)
 800669c:	2200      	movs	r2, #0
 800669e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80066a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80068f0 <_strtod_l+0xbf8>
 80066a6:	f04f 0800 	mov.w	r8, #0
 80066aa:	4b92      	ldr	r3, [pc, #584]	; (80068f4 <_strtod_l+0xbfc>)
 80066ac:	403b      	ands	r3, r7
 80066ae:	9311      	str	r3, [sp, #68]	; 0x44
 80066b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066b2:	4b91      	ldr	r3, [pc, #580]	; (80068f8 <_strtod_l+0xc00>)
 80066b4:	429a      	cmp	r2, r3
 80066b6:	f040 80b2 	bne.w	800681e <_strtod_l+0xb26>
 80066ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80066c6:	ec4b ab10 	vmov	d0, sl, fp
 80066ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80066ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80066d2:	f001 ff5b 	bl	800858c <__ulp>
 80066d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066da:	ec53 2b10 	vmov	r2, r3, d0
 80066de:	f7f9 ff8b 	bl	80005f8 <__aeabi_dmul>
 80066e2:	4652      	mov	r2, sl
 80066e4:	465b      	mov	r3, fp
 80066e6:	f7f9 fdd1 	bl	800028c <__adddf3>
 80066ea:	460b      	mov	r3, r1
 80066ec:	4981      	ldr	r1, [pc, #516]	; (80068f4 <_strtod_l+0xbfc>)
 80066ee:	4a83      	ldr	r2, [pc, #524]	; (80068fc <_strtod_l+0xc04>)
 80066f0:	4019      	ands	r1, r3
 80066f2:	4291      	cmp	r1, r2
 80066f4:	4682      	mov	sl, r0
 80066f6:	d95e      	bls.n	80067b6 <_strtod_l+0xabe>
 80066f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80066fe:	4293      	cmp	r3, r2
 8006700:	d103      	bne.n	800670a <_strtod_l+0xa12>
 8006702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006704:	3301      	adds	r3, #1
 8006706:	f43f ad43 	beq.w	8006190 <_strtod_l+0x498>
 800670a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006908 <_strtod_l+0xc10>
 800670e:	f04f 3aff 	mov.w	sl, #4294967295
 8006712:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006714:	4620      	mov	r0, r4
 8006716:	f001 fc0d 	bl	8007f34 <_Bfree>
 800671a:	9907      	ldr	r1, [sp, #28]
 800671c:	4620      	mov	r0, r4
 800671e:	f001 fc09 	bl	8007f34 <_Bfree>
 8006722:	4631      	mov	r1, r6
 8006724:	4620      	mov	r0, r4
 8006726:	f001 fc05 	bl	8007f34 <_Bfree>
 800672a:	4629      	mov	r1, r5
 800672c:	4620      	mov	r0, r4
 800672e:	f001 fc01 	bl	8007f34 <_Bfree>
 8006732:	e613      	b.n	800635c <_strtod_l+0x664>
 8006734:	f1ba 0f00 	cmp.w	sl, #0
 8006738:	d11b      	bne.n	8006772 <_strtod_l+0xa7a>
 800673a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800673e:	b9f3      	cbnz	r3, 800677e <_strtod_l+0xa86>
 8006740:	4b6b      	ldr	r3, [pc, #428]	; (80068f0 <_strtod_l+0xbf8>)
 8006742:	2200      	movs	r2, #0
 8006744:	4640      	mov	r0, r8
 8006746:	4649      	mov	r1, r9
 8006748:	f7fa f9c8 	bl	8000adc <__aeabi_dcmplt>
 800674c:	b9d0      	cbnz	r0, 8006784 <_strtod_l+0xa8c>
 800674e:	4640      	mov	r0, r8
 8006750:	4649      	mov	r1, r9
 8006752:	4b6b      	ldr	r3, [pc, #428]	; (8006900 <_strtod_l+0xc08>)
 8006754:	2200      	movs	r2, #0
 8006756:	f7f9 ff4f 	bl	80005f8 <__aeabi_dmul>
 800675a:	4680      	mov	r8, r0
 800675c:	4689      	mov	r9, r1
 800675e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006762:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006766:	931b      	str	r3, [sp, #108]	; 0x6c
 8006768:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800676c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006770:	e79b      	b.n	80066aa <_strtod_l+0x9b2>
 8006772:	f1ba 0f01 	cmp.w	sl, #1
 8006776:	d102      	bne.n	800677e <_strtod_l+0xa86>
 8006778:	2f00      	cmp	r7, #0
 800677a:	f43f ad7e 	beq.w	800627a <_strtod_l+0x582>
 800677e:	4b61      	ldr	r3, [pc, #388]	; (8006904 <_strtod_l+0xc0c>)
 8006780:	2200      	movs	r2, #0
 8006782:	e78c      	b.n	800669e <_strtod_l+0x9a6>
 8006784:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006900 <_strtod_l+0xc08>
 8006788:	f04f 0800 	mov.w	r8, #0
 800678c:	e7e7      	b.n	800675e <_strtod_l+0xa66>
 800678e:	4b5c      	ldr	r3, [pc, #368]	; (8006900 <_strtod_l+0xc08>)
 8006790:	4640      	mov	r0, r8
 8006792:	4649      	mov	r1, r9
 8006794:	2200      	movs	r2, #0
 8006796:	f7f9 ff2f 	bl	80005f8 <__aeabi_dmul>
 800679a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800679c:	4680      	mov	r8, r0
 800679e:	4689      	mov	r9, r1
 80067a0:	b933      	cbnz	r3, 80067b0 <_strtod_l+0xab8>
 80067a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067a6:	9012      	str	r0, [sp, #72]	; 0x48
 80067a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80067aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80067ae:	e7dd      	b.n	800676c <_strtod_l+0xa74>
 80067b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80067b4:	e7f9      	b.n	80067aa <_strtod_l+0xab2>
 80067b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80067ba:	9b04      	ldr	r3, [sp, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1a8      	bne.n	8006712 <_strtod_l+0xa1a>
 80067c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80067c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80067c6:	0d1b      	lsrs	r3, r3, #20
 80067c8:	051b      	lsls	r3, r3, #20
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d1a1      	bne.n	8006712 <_strtod_l+0xa1a>
 80067ce:	4640      	mov	r0, r8
 80067d0:	4649      	mov	r1, r9
 80067d2:	f7fa fa71 	bl	8000cb8 <__aeabi_d2lz>
 80067d6:	f7f9 fee1 	bl	800059c <__aeabi_l2d>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4640      	mov	r0, r8
 80067e0:	4649      	mov	r1, r9
 80067e2:	f7f9 fd51 	bl	8000288 <__aeabi_dsub>
 80067e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067ec:	ea43 030a 	orr.w	r3, r3, sl
 80067f0:	4313      	orrs	r3, r2
 80067f2:	4680      	mov	r8, r0
 80067f4:	4689      	mov	r9, r1
 80067f6:	d053      	beq.n	80068a0 <_strtod_l+0xba8>
 80067f8:	a335      	add	r3, pc, #212	; (adr r3, 80068d0 <_strtod_l+0xbd8>)
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7fa f96d 	bl	8000adc <__aeabi_dcmplt>
 8006802:	2800      	cmp	r0, #0
 8006804:	f47f acce 	bne.w	80061a4 <_strtod_l+0x4ac>
 8006808:	a333      	add	r3, pc, #204	; (adr r3, 80068d8 <_strtod_l+0xbe0>)
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	4640      	mov	r0, r8
 8006810:	4649      	mov	r1, r9
 8006812:	f7fa f981 	bl	8000b18 <__aeabi_dcmpgt>
 8006816:	2800      	cmp	r0, #0
 8006818:	f43f af7b 	beq.w	8006712 <_strtod_l+0xa1a>
 800681c:	e4c2      	b.n	80061a4 <_strtod_l+0x4ac>
 800681e:	9b04      	ldr	r3, [sp, #16]
 8006820:	b333      	cbz	r3, 8006870 <_strtod_l+0xb78>
 8006822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006824:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006828:	d822      	bhi.n	8006870 <_strtod_l+0xb78>
 800682a:	a32d      	add	r3, pc, #180	; (adr r3, 80068e0 <_strtod_l+0xbe8>)
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7fa f95c 	bl	8000af0 <__aeabi_dcmple>
 8006838:	b1a0      	cbz	r0, 8006864 <_strtod_l+0xb6c>
 800683a:	4649      	mov	r1, r9
 800683c:	4640      	mov	r0, r8
 800683e:	f7fa f9b3 	bl	8000ba8 <__aeabi_d2uiz>
 8006842:	2801      	cmp	r0, #1
 8006844:	bf38      	it	cc
 8006846:	2001      	movcc	r0, #1
 8006848:	f7f9 fe5c 	bl	8000504 <__aeabi_ui2d>
 800684c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800684e:	4680      	mov	r8, r0
 8006850:	4689      	mov	r9, r1
 8006852:	bb13      	cbnz	r3, 800689a <_strtod_l+0xba2>
 8006854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006858:	9014      	str	r0, [sp, #80]	; 0x50
 800685a:	9315      	str	r3, [sp, #84]	; 0x54
 800685c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006860:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006866:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006868:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	930d      	str	r3, [sp, #52]	; 0x34
 8006870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006874:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006878:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800687c:	f001 fe86 	bl	800858c <__ulp>
 8006880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006884:	ec53 2b10 	vmov	r2, r3, d0
 8006888:	f7f9 feb6 	bl	80005f8 <__aeabi_dmul>
 800688c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006890:	f7f9 fcfc 	bl	800028c <__adddf3>
 8006894:	4682      	mov	sl, r0
 8006896:	468b      	mov	fp, r1
 8006898:	e78f      	b.n	80067ba <_strtod_l+0xac2>
 800689a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800689e:	e7dd      	b.n	800685c <_strtod_l+0xb64>
 80068a0:	a311      	add	r3, pc, #68	; (adr r3, 80068e8 <_strtod_l+0xbf0>)
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	f7fa f919 	bl	8000adc <__aeabi_dcmplt>
 80068aa:	e7b4      	b.n	8006816 <_strtod_l+0xb1e>
 80068ac:	2300      	movs	r3, #0
 80068ae:	930e      	str	r3, [sp, #56]	; 0x38
 80068b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	f7ff ba65 	b.w	8005d84 <_strtod_l+0x8c>
 80068ba:	2b65      	cmp	r3, #101	; 0x65
 80068bc:	f43f ab5d 	beq.w	8005f7a <_strtod_l+0x282>
 80068c0:	2b45      	cmp	r3, #69	; 0x45
 80068c2:	f43f ab5a 	beq.w	8005f7a <_strtod_l+0x282>
 80068c6:	2201      	movs	r2, #1
 80068c8:	f7ff bb92 	b.w	8005ff0 <_strtod_l+0x2f8>
 80068cc:	f3af 8000 	nop.w
 80068d0:	94a03595 	.word	0x94a03595
 80068d4:	3fdfffff 	.word	0x3fdfffff
 80068d8:	35afe535 	.word	0x35afe535
 80068dc:	3fe00000 	.word	0x3fe00000
 80068e0:	ffc00000 	.word	0xffc00000
 80068e4:	41dfffff 	.word	0x41dfffff
 80068e8:	94a03595 	.word	0x94a03595
 80068ec:	3fcfffff 	.word	0x3fcfffff
 80068f0:	3ff00000 	.word	0x3ff00000
 80068f4:	7ff00000 	.word	0x7ff00000
 80068f8:	7fe00000 	.word	0x7fe00000
 80068fc:	7c9fffff 	.word	0x7c9fffff
 8006900:	3fe00000 	.word	0x3fe00000
 8006904:	bff00000 	.word	0xbff00000
 8006908:	7fefffff 	.word	0x7fefffff

0800690c <_strtod_r>:
 800690c:	4b01      	ldr	r3, [pc, #4]	; (8006914 <_strtod_r+0x8>)
 800690e:	f7ff b9f3 	b.w	8005cf8 <_strtod_l>
 8006912:	bf00      	nop
 8006914:	20000078 	.word	0x20000078

08006918 <_strtol_l.isra.0>:
 8006918:	2b01      	cmp	r3, #1
 800691a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691e:	d001      	beq.n	8006924 <_strtol_l.isra.0+0xc>
 8006920:	2b24      	cmp	r3, #36	; 0x24
 8006922:	d906      	bls.n	8006932 <_strtol_l.isra.0+0x1a>
 8006924:	f7fe fa88 	bl	8004e38 <__errno>
 8006928:	2316      	movs	r3, #22
 800692a:	6003      	str	r3, [r0, #0]
 800692c:	2000      	movs	r0, #0
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	4f3a      	ldr	r7, [pc, #232]	; (8006a1c <_strtol_l.isra.0+0x104>)
 8006934:	468e      	mov	lr, r1
 8006936:	4676      	mov	r6, lr
 8006938:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800693c:	5de5      	ldrb	r5, [r4, r7]
 800693e:	f015 0508 	ands.w	r5, r5, #8
 8006942:	d1f8      	bne.n	8006936 <_strtol_l.isra.0+0x1e>
 8006944:	2c2d      	cmp	r4, #45	; 0x2d
 8006946:	d134      	bne.n	80069b2 <_strtol_l.isra.0+0x9a>
 8006948:	f89e 4000 	ldrb.w	r4, [lr]
 800694c:	f04f 0801 	mov.w	r8, #1
 8006950:	f106 0e02 	add.w	lr, r6, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d05c      	beq.n	8006a12 <_strtol_l.isra.0+0xfa>
 8006958:	2b10      	cmp	r3, #16
 800695a:	d10c      	bne.n	8006976 <_strtol_l.isra.0+0x5e>
 800695c:	2c30      	cmp	r4, #48	; 0x30
 800695e:	d10a      	bne.n	8006976 <_strtol_l.isra.0+0x5e>
 8006960:	f89e 4000 	ldrb.w	r4, [lr]
 8006964:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006968:	2c58      	cmp	r4, #88	; 0x58
 800696a:	d14d      	bne.n	8006a08 <_strtol_l.isra.0+0xf0>
 800696c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006970:	2310      	movs	r3, #16
 8006972:	f10e 0e02 	add.w	lr, lr, #2
 8006976:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800697a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800697e:	2600      	movs	r6, #0
 8006980:	fbbc f9f3 	udiv	r9, ip, r3
 8006984:	4635      	mov	r5, r6
 8006986:	fb03 ca19 	mls	sl, r3, r9, ip
 800698a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800698e:	2f09      	cmp	r7, #9
 8006990:	d818      	bhi.n	80069c4 <_strtol_l.isra.0+0xac>
 8006992:	463c      	mov	r4, r7
 8006994:	42a3      	cmp	r3, r4
 8006996:	dd24      	ble.n	80069e2 <_strtol_l.isra.0+0xca>
 8006998:	2e00      	cmp	r6, #0
 800699a:	db1f      	blt.n	80069dc <_strtol_l.isra.0+0xc4>
 800699c:	45a9      	cmp	r9, r5
 800699e:	d31d      	bcc.n	80069dc <_strtol_l.isra.0+0xc4>
 80069a0:	d101      	bne.n	80069a6 <_strtol_l.isra.0+0x8e>
 80069a2:	45a2      	cmp	sl, r4
 80069a4:	db1a      	blt.n	80069dc <_strtol_l.isra.0+0xc4>
 80069a6:	fb05 4503 	mla	r5, r5, r3, r4
 80069aa:	2601      	movs	r6, #1
 80069ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80069b0:	e7eb      	b.n	800698a <_strtol_l.isra.0+0x72>
 80069b2:	2c2b      	cmp	r4, #43	; 0x2b
 80069b4:	bf08      	it	eq
 80069b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80069ba:	46a8      	mov	r8, r5
 80069bc:	bf08      	it	eq
 80069be:	f106 0e02 	addeq.w	lr, r6, #2
 80069c2:	e7c7      	b.n	8006954 <_strtol_l.isra.0+0x3c>
 80069c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80069c8:	2f19      	cmp	r7, #25
 80069ca:	d801      	bhi.n	80069d0 <_strtol_l.isra.0+0xb8>
 80069cc:	3c37      	subs	r4, #55	; 0x37
 80069ce:	e7e1      	b.n	8006994 <_strtol_l.isra.0+0x7c>
 80069d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80069d4:	2f19      	cmp	r7, #25
 80069d6:	d804      	bhi.n	80069e2 <_strtol_l.isra.0+0xca>
 80069d8:	3c57      	subs	r4, #87	; 0x57
 80069da:	e7db      	b.n	8006994 <_strtol_l.isra.0+0x7c>
 80069dc:	f04f 36ff 	mov.w	r6, #4294967295
 80069e0:	e7e4      	b.n	80069ac <_strtol_l.isra.0+0x94>
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	da05      	bge.n	80069f2 <_strtol_l.isra.0+0xda>
 80069e6:	2322      	movs	r3, #34	; 0x22
 80069e8:	6003      	str	r3, [r0, #0]
 80069ea:	4665      	mov	r5, ip
 80069ec:	b942      	cbnz	r2, 8006a00 <_strtol_l.isra.0+0xe8>
 80069ee:	4628      	mov	r0, r5
 80069f0:	e79d      	b.n	800692e <_strtol_l.isra.0+0x16>
 80069f2:	f1b8 0f00 	cmp.w	r8, #0
 80069f6:	d000      	beq.n	80069fa <_strtol_l.isra.0+0xe2>
 80069f8:	426d      	negs	r5, r5
 80069fa:	2a00      	cmp	r2, #0
 80069fc:	d0f7      	beq.n	80069ee <_strtol_l.isra.0+0xd6>
 80069fe:	b10e      	cbz	r6, 8006a04 <_strtol_l.isra.0+0xec>
 8006a00:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006a04:	6011      	str	r1, [r2, #0]
 8006a06:	e7f2      	b.n	80069ee <_strtol_l.isra.0+0xd6>
 8006a08:	2430      	movs	r4, #48	; 0x30
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1b3      	bne.n	8006976 <_strtol_l.isra.0+0x5e>
 8006a0e:	2308      	movs	r3, #8
 8006a10:	e7b1      	b.n	8006976 <_strtol_l.isra.0+0x5e>
 8006a12:	2c30      	cmp	r4, #48	; 0x30
 8006a14:	d0a4      	beq.n	8006960 <_strtol_l.isra.0+0x48>
 8006a16:	230a      	movs	r3, #10
 8006a18:	e7ad      	b.n	8006976 <_strtol_l.isra.0+0x5e>
 8006a1a:	bf00      	nop
 8006a1c:	0800a079 	.word	0x0800a079

08006a20 <_strtol_r>:
 8006a20:	f7ff bf7a 	b.w	8006918 <_strtol_l.isra.0>

08006a24 <_write_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4d07      	ldr	r5, [pc, #28]	; (8006a44 <_write_r+0x20>)
 8006a28:	4604      	mov	r4, r0
 8006a2a:	4608      	mov	r0, r1
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	2200      	movs	r2, #0
 8006a30:	602a      	str	r2, [r5, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f7fb f951 	bl	8001cda <_write>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_write_r+0x1e>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_write_r+0x1e>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	200003b8 	.word	0x200003b8

08006a48 <_close_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4d06      	ldr	r5, [pc, #24]	; (8006a64 <_close_r+0x1c>)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4604      	mov	r4, r0
 8006a50:	4608      	mov	r0, r1
 8006a52:	602b      	str	r3, [r5, #0]
 8006a54:	f7fb f95d 	bl	8001d12 <_close>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_close_r+0x1a>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_close_r+0x1a>
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	200003b8 	.word	0x200003b8

08006a68 <quorem>:
 8006a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	6903      	ldr	r3, [r0, #16]
 8006a6e:	690c      	ldr	r4, [r1, #16]
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	4607      	mov	r7, r0
 8006a74:	f2c0 8081 	blt.w	8006b7a <quorem+0x112>
 8006a78:	3c01      	subs	r4, #1
 8006a7a:	f101 0814 	add.w	r8, r1, #20
 8006a7e:	f100 0514 	add.w	r5, r0, #20
 8006a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a90:	3301      	adds	r3, #1
 8006a92:	429a      	cmp	r2, r3
 8006a94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006aa0:	d331      	bcc.n	8006b06 <quorem+0x9e>
 8006aa2:	f04f 0e00 	mov.w	lr, #0
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	46ac      	mov	ip, r5
 8006aaa:	46f2      	mov	sl, lr
 8006aac:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ab0:	b293      	uxth	r3, r2
 8006ab2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ab6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ac0:	0c12      	lsrs	r2, r2, #16
 8006ac2:	f8dc a000 	ldr.w	sl, [ip]
 8006ac6:	fb06 e202 	mla	r2, r6, r2, lr
 8006aca:	fa13 f38a 	uxtah	r3, r3, sl
 8006ace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ad2:	fa1f fa82 	uxth.w	sl, r2
 8006ad6:	f8dc 2000 	ldr.w	r2, [ip]
 8006ada:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006ade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae8:	4581      	cmp	r9, r0
 8006aea:	f84c 3b04 	str.w	r3, [ip], #4
 8006aee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006af2:	d2db      	bcs.n	8006aac <quorem+0x44>
 8006af4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006af8:	b92b      	cbnz	r3, 8006b06 <quorem+0x9e>
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	3b04      	subs	r3, #4
 8006afe:	429d      	cmp	r5, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	d32e      	bcc.n	8006b62 <quorem+0xfa>
 8006b04:	613c      	str	r4, [r7, #16]
 8006b06:	4638      	mov	r0, r7
 8006b08:	f001 fc9c 	bl	8008444 <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	db24      	blt.n	8006b5a <quorem+0xf2>
 8006b10:	3601      	adds	r6, #1
 8006b12:	4628      	mov	r0, r5
 8006b14:	f04f 0c00 	mov.w	ip, #0
 8006b18:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b1c:	f8d0 e000 	ldr.w	lr, [r0]
 8006b20:	b293      	uxth	r3, r2
 8006b22:	ebac 0303 	sub.w	r3, ip, r3
 8006b26:	0c12      	lsrs	r2, r2, #16
 8006b28:	fa13 f38e 	uxtah	r3, r3, lr
 8006b2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b3a:	45c1      	cmp	r9, r8
 8006b3c:	f840 3b04 	str.w	r3, [r0], #4
 8006b40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b44:	d2e8      	bcs.n	8006b18 <quorem+0xb0>
 8006b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b4e:	b922      	cbnz	r2, 8006b5a <quorem+0xf2>
 8006b50:	3b04      	subs	r3, #4
 8006b52:	429d      	cmp	r5, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	d30a      	bcc.n	8006b6e <quorem+0x106>
 8006b58:	613c      	str	r4, [r7, #16]
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	b003      	add	sp, #12
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	3b04      	subs	r3, #4
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d1cc      	bne.n	8006b04 <quorem+0x9c>
 8006b6a:	3c01      	subs	r4, #1
 8006b6c:	e7c7      	b.n	8006afe <quorem+0x96>
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	3b04      	subs	r3, #4
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	d1f0      	bne.n	8006b58 <quorem+0xf0>
 8006b76:	3c01      	subs	r4, #1
 8006b78:	e7eb      	b.n	8006b52 <quorem+0xea>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	e7ee      	b.n	8006b5c <quorem+0xf4>
	...

08006b80 <_dtoa_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	ed2d 8b02 	vpush	{d8}
 8006b88:	ec57 6b10 	vmov	r6, r7, d0
 8006b8c:	b095      	sub	sp, #84	; 0x54
 8006b8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b94:	9105      	str	r1, [sp, #20]
 8006b96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ba0:	b975      	cbnz	r5, 8006bc0 <_dtoa_r+0x40>
 8006ba2:	2010      	movs	r0, #16
 8006ba4:	f001 f95e 	bl	8007e64 <malloc>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	6260      	str	r0, [r4, #36]	; 0x24
 8006bac:	b920      	cbnz	r0, 8006bb8 <_dtoa_r+0x38>
 8006bae:	4bb2      	ldr	r3, [pc, #712]	; (8006e78 <_dtoa_r+0x2f8>)
 8006bb0:	21ea      	movs	r1, #234	; 0xea
 8006bb2:	48b2      	ldr	r0, [pc, #712]	; (8006e7c <_dtoa_r+0x2fc>)
 8006bb4:	f002 fcaa 	bl	800950c <__assert_func>
 8006bb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bbc:	6005      	str	r5, [r0, #0]
 8006bbe:	60c5      	str	r5, [r0, #12]
 8006bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	b151      	cbz	r1, 8006bdc <_dtoa_r+0x5c>
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	604a      	str	r2, [r1, #4]
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4093      	lsls	r3, r2
 8006bce:	608b      	str	r3, [r1, #8]
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f001 f9af 	bl	8007f34 <_Bfree>
 8006bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	1e3b      	subs	r3, r7, #0
 8006bde:	bfb9      	ittee	lt
 8006be0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006be4:	9303      	strlt	r3, [sp, #12]
 8006be6:	2300      	movge	r3, #0
 8006be8:	f8c8 3000 	strge.w	r3, [r8]
 8006bec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006bf0:	4ba3      	ldr	r3, [pc, #652]	; (8006e80 <_dtoa_r+0x300>)
 8006bf2:	bfbc      	itt	lt
 8006bf4:	2201      	movlt	r2, #1
 8006bf6:	f8c8 2000 	strlt.w	r2, [r8]
 8006bfa:	ea33 0309 	bics.w	r3, r3, r9
 8006bfe:	d11b      	bne.n	8006c38 <_dtoa_r+0xb8>
 8006c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c02:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c0c:	4333      	orrs	r3, r6
 8006c0e:	f000 857a 	beq.w	8007706 <_dtoa_r+0xb86>
 8006c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c14:	b963      	cbnz	r3, 8006c30 <_dtoa_r+0xb0>
 8006c16:	4b9b      	ldr	r3, [pc, #620]	; (8006e84 <_dtoa_r+0x304>)
 8006c18:	e024      	b.n	8006c64 <_dtoa_r+0xe4>
 8006c1a:	4b9b      	ldr	r3, [pc, #620]	; (8006e88 <_dtoa_r+0x308>)
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	9800      	ldr	r0, [sp, #0]
 8006c26:	b015      	add	sp, #84	; 0x54
 8006c28:	ecbd 8b02 	vpop	{d8}
 8006c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c30:	4b94      	ldr	r3, [pc, #592]	; (8006e84 <_dtoa_r+0x304>)
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	3303      	adds	r3, #3
 8006c36:	e7f3      	b.n	8006c20 <_dtoa_r+0xa0>
 8006c38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	ec51 0b17 	vmov	r0, r1, d7
 8006c42:	2300      	movs	r3, #0
 8006c44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006c48:	f7f9 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	b158      	cbz	r0, 8006c68 <_dtoa_r+0xe8>
 8006c50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c52:	2301      	movs	r3, #1
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8551 	beq.w	8007700 <_dtoa_r+0xb80>
 8006c5e:	488b      	ldr	r0, [pc, #556]	; (8006e8c <_dtoa_r+0x30c>)
 8006c60:	6018      	str	r0, [r3, #0]
 8006c62:	1e43      	subs	r3, r0, #1
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	e7dd      	b.n	8006c24 <_dtoa_r+0xa4>
 8006c68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006c6c:	aa12      	add	r2, sp, #72	; 0x48
 8006c6e:	a913      	add	r1, sp, #76	; 0x4c
 8006c70:	4620      	mov	r0, r4
 8006c72:	f001 fd07 	bl	8008684 <__d2b>
 8006c76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c7a:	4683      	mov	fp, r0
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	d07c      	beq.n	8006d7a <_dtoa_r+0x1fa>
 8006c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006c8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c9a:	4b7d      	ldr	r3, [pc, #500]	; (8006e90 <_dtoa_r+0x310>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 faf1 	bl	8000288 <__aeabi_dsub>
 8006ca6:	a36e      	add	r3, pc, #440	; (adr r3, 8006e60 <_dtoa_r+0x2e0>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 fca4 	bl	80005f8 <__aeabi_dmul>
 8006cb0:	a36d      	add	r3, pc, #436	; (adr r3, 8006e68 <_dtoa_r+0x2e8>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f7f9 fae9 	bl	800028c <__adddf3>
 8006cba:	4606      	mov	r6, r0
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	460f      	mov	r7, r1
 8006cc0:	f7f9 fc30 	bl	8000524 <__aeabi_i2d>
 8006cc4:	a36a      	add	r3, pc, #424	; (adr r3, 8006e70 <_dtoa_r+0x2f0>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f7f9 fc95 	bl	80005f8 <__aeabi_dmul>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	4639      	mov	r1, r7
 8006cd6:	f7f9 fad9 	bl	800028c <__adddf3>
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	f7f9 ff3b 	bl	8000b58 <__aeabi_d2iz>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fef6 	bl	8000adc <__aeabi_dcmplt>
 8006cf0:	b148      	cbz	r0, 8006d06 <_dtoa_r+0x186>
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	f7f9 fc16 	bl	8000524 <__aeabi_i2d>
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	f7f9 fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d00:	b908      	cbnz	r0, 8006d06 <_dtoa_r+0x186>
 8006d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d06:	f1ba 0f16 	cmp.w	sl, #22
 8006d0a:	d854      	bhi.n	8006db6 <_dtoa_r+0x236>
 8006d0c:	4b61      	ldr	r3, [pc, #388]	; (8006e94 <_dtoa_r+0x314>)
 8006d0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d1a:	f7f9 fedf 	bl	8000adc <__aeabi_dcmplt>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d04b      	beq.n	8006dba <_dtoa_r+0x23a>
 8006d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d26:	2300      	movs	r3, #0
 8006d28:	930e      	str	r3, [sp, #56]	; 0x38
 8006d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d2c:	1b5d      	subs	r5, r3, r5
 8006d2e:	1e6b      	subs	r3, r5, #1
 8006d30:	9304      	str	r3, [sp, #16]
 8006d32:	bf43      	ittte	mi
 8006d34:	2300      	movmi	r3, #0
 8006d36:	f1c5 0801 	rsbmi	r8, r5, #1
 8006d3a:	9304      	strmi	r3, [sp, #16]
 8006d3c:	f04f 0800 	movpl.w	r8, #0
 8006d40:	f1ba 0f00 	cmp.w	sl, #0
 8006d44:	db3b      	blt.n	8006dbe <_dtoa_r+0x23e>
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006d4c:	4453      	add	r3, sl
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	2300      	movs	r3, #0
 8006d52:	9306      	str	r3, [sp, #24]
 8006d54:	9b05      	ldr	r3, [sp, #20]
 8006d56:	2b09      	cmp	r3, #9
 8006d58:	d869      	bhi.n	8006e2e <_dtoa_r+0x2ae>
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	bfc4      	itt	gt
 8006d5e:	3b04      	subgt	r3, #4
 8006d60:	9305      	strgt	r3, [sp, #20]
 8006d62:	9b05      	ldr	r3, [sp, #20]
 8006d64:	f1a3 0302 	sub.w	r3, r3, #2
 8006d68:	bfcc      	ite	gt
 8006d6a:	2500      	movgt	r5, #0
 8006d6c:	2501      	movle	r5, #1
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d869      	bhi.n	8006e46 <_dtoa_r+0x2c6>
 8006d72:	e8df f003 	tbb	[pc, r3]
 8006d76:	4e2c      	.short	0x4e2c
 8006d78:	5a4c      	.short	0x5a4c
 8006d7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006d7e:	441d      	add	r5, r3
 8006d80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	bfc1      	itttt	gt
 8006d88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d90:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d98:	bfda      	itte	le
 8006d9a:	f1c3 0320 	rsble	r3, r3, #32
 8006d9e:	fa06 f003 	lslle.w	r0, r6, r3
 8006da2:	4318      	orrgt	r0, r3
 8006da4:	f7f9 fbae 	bl	8000504 <__aeabi_ui2d>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4606      	mov	r6, r0
 8006dac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006db0:	3d01      	subs	r5, #1
 8006db2:	9310      	str	r3, [sp, #64]	; 0x40
 8006db4:	e771      	b.n	8006c9a <_dtoa_r+0x11a>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e7b6      	b.n	8006d28 <_dtoa_r+0x1a8>
 8006dba:	900e      	str	r0, [sp, #56]	; 0x38
 8006dbc:	e7b5      	b.n	8006d2a <_dtoa_r+0x1aa>
 8006dbe:	f1ca 0300 	rsb	r3, sl, #0
 8006dc2:	9306      	str	r3, [sp, #24]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	eba8 080a 	sub.w	r8, r8, sl
 8006dca:	930d      	str	r3, [sp, #52]	; 0x34
 8006dcc:	e7c2      	b.n	8006d54 <_dtoa_r+0x1d4>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9308      	str	r3, [sp, #32]
 8006dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	dc39      	bgt.n	8006e4c <_dtoa_r+0x2cc>
 8006dd8:	f04f 0901 	mov.w	r9, #1
 8006ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006de0:	464b      	mov	r3, r9
 8006de2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006de6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006de8:	2200      	movs	r2, #0
 8006dea:	6042      	str	r2, [r0, #4]
 8006dec:	2204      	movs	r2, #4
 8006dee:	f102 0614 	add.w	r6, r2, #20
 8006df2:	429e      	cmp	r6, r3
 8006df4:	6841      	ldr	r1, [r0, #4]
 8006df6:	d92f      	bls.n	8006e58 <_dtoa_r+0x2d8>
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f001 f85b 	bl	8007eb4 <_Balloc>
 8006dfe:	9000      	str	r0, [sp, #0]
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d14b      	bne.n	8006e9c <_dtoa_r+0x31c>
 8006e04:	4b24      	ldr	r3, [pc, #144]	; (8006e98 <_dtoa_r+0x318>)
 8006e06:	4602      	mov	r2, r0
 8006e08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e0c:	e6d1      	b.n	8006bb2 <_dtoa_r+0x32>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e7de      	b.n	8006dd0 <_dtoa_r+0x250>
 8006e12:	2300      	movs	r3, #0
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e18:	eb0a 0903 	add.w	r9, sl, r3
 8006e1c:	f109 0301 	add.w	r3, r9, #1
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	bfb8      	it	lt
 8006e26:	2301      	movlt	r3, #1
 8006e28:	e7dd      	b.n	8006de6 <_dtoa_r+0x266>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e7f2      	b.n	8006e14 <_dtoa_r+0x294>
 8006e2e:	2501      	movs	r5, #1
 8006e30:	2300      	movs	r3, #0
 8006e32:	9305      	str	r3, [sp, #20]
 8006e34:	9508      	str	r5, [sp, #32]
 8006e36:	f04f 39ff 	mov.w	r9, #4294967295
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e40:	2312      	movs	r3, #18
 8006e42:	9209      	str	r2, [sp, #36]	; 0x24
 8006e44:	e7cf      	b.n	8006de6 <_dtoa_r+0x266>
 8006e46:	2301      	movs	r3, #1
 8006e48:	9308      	str	r3, [sp, #32]
 8006e4a:	e7f4      	b.n	8006e36 <_dtoa_r+0x2b6>
 8006e4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e50:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e54:	464b      	mov	r3, r9
 8006e56:	e7c6      	b.n	8006de6 <_dtoa_r+0x266>
 8006e58:	3101      	adds	r1, #1
 8006e5a:	6041      	str	r1, [r0, #4]
 8006e5c:	0052      	lsls	r2, r2, #1
 8006e5e:	e7c6      	b.n	8006dee <_dtoa_r+0x26e>
 8006e60:	636f4361 	.word	0x636f4361
 8006e64:	3fd287a7 	.word	0x3fd287a7
 8006e68:	8b60c8b3 	.word	0x8b60c8b3
 8006e6c:	3fc68a28 	.word	0x3fc68a28
 8006e70:	509f79fb 	.word	0x509f79fb
 8006e74:	3fd34413 	.word	0x3fd34413
 8006e78:	0800a186 	.word	0x0800a186
 8006e7c:	0800a19d 	.word	0x0800a19d
 8006e80:	7ff00000 	.word	0x7ff00000
 8006e84:	0800a182 	.word	0x0800a182
 8006e88:	0800a179 	.word	0x0800a179
 8006e8c:	0800a402 	.word	0x0800a402
 8006e90:	3ff80000 	.word	0x3ff80000
 8006e94:	0800a318 	.word	0x0800a318
 8006e98:	0800a1fc 	.word	0x0800a1fc
 8006e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e9e:	9a00      	ldr	r2, [sp, #0]
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	9b01      	ldr	r3, [sp, #4]
 8006ea4:	2b0e      	cmp	r3, #14
 8006ea6:	f200 80ad 	bhi.w	8007004 <_dtoa_r+0x484>
 8006eaa:	2d00      	cmp	r5, #0
 8006eac:	f000 80aa 	beq.w	8007004 <_dtoa_r+0x484>
 8006eb0:	f1ba 0f00 	cmp.w	sl, #0
 8006eb4:	dd36      	ble.n	8006f24 <_dtoa_r+0x3a4>
 8006eb6:	4ac3      	ldr	r2, [pc, #780]	; (80071c4 <_dtoa_r+0x644>)
 8006eb8:	f00a 030f 	and.w	r3, sl, #15
 8006ebc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ec0:	ed93 7b00 	vldr	d7, [r3]
 8006ec4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006ec8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006ecc:	eeb0 8a47 	vmov.f32	s16, s14
 8006ed0:	eef0 8a67 	vmov.f32	s17, s15
 8006ed4:	d016      	beq.n	8006f04 <_dtoa_r+0x384>
 8006ed6:	4bbc      	ldr	r3, [pc, #752]	; (80071c8 <_dtoa_r+0x648>)
 8006ed8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006edc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ee0:	f7f9 fcb4 	bl	800084c <__aeabi_ddiv>
 8006ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ee8:	f007 070f 	and.w	r7, r7, #15
 8006eec:	2503      	movs	r5, #3
 8006eee:	4eb6      	ldr	r6, [pc, #728]	; (80071c8 <_dtoa_r+0x648>)
 8006ef0:	b957      	cbnz	r7, 8006f08 <_dtoa_r+0x388>
 8006ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef6:	ec53 2b18 	vmov	r2, r3, d8
 8006efa:	f7f9 fca7 	bl	800084c <__aeabi_ddiv>
 8006efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f02:	e029      	b.n	8006f58 <_dtoa_r+0x3d8>
 8006f04:	2502      	movs	r5, #2
 8006f06:	e7f2      	b.n	8006eee <_dtoa_r+0x36e>
 8006f08:	07f9      	lsls	r1, r7, #31
 8006f0a:	d508      	bpl.n	8006f1e <_dtoa_r+0x39e>
 8006f0c:	ec51 0b18 	vmov	r0, r1, d8
 8006f10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f14:	f7f9 fb70 	bl	80005f8 <__aeabi_dmul>
 8006f18:	ec41 0b18 	vmov	d8, r0, r1
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	107f      	asrs	r7, r7, #1
 8006f20:	3608      	adds	r6, #8
 8006f22:	e7e5      	b.n	8006ef0 <_dtoa_r+0x370>
 8006f24:	f000 80a6 	beq.w	8007074 <_dtoa_r+0x4f4>
 8006f28:	f1ca 0600 	rsb	r6, sl, #0
 8006f2c:	4ba5      	ldr	r3, [pc, #660]	; (80071c4 <_dtoa_r+0x644>)
 8006f2e:	4fa6      	ldr	r7, [pc, #664]	; (80071c8 <_dtoa_r+0x648>)
 8006f30:	f006 020f 	and.w	r2, r6, #15
 8006f34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f40:	f7f9 fb5a 	bl	80005f8 <__aeabi_dmul>
 8006f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f48:	1136      	asrs	r6, r6, #4
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2502      	movs	r5, #2
 8006f4e:	2e00      	cmp	r6, #0
 8006f50:	f040 8085 	bne.w	800705e <_dtoa_r+0x4de>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1d2      	bne.n	8006efe <_dtoa_r+0x37e>
 8006f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 808c 	beq.w	8007078 <_dtoa_r+0x4f8>
 8006f60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f64:	4b99      	ldr	r3, [pc, #612]	; (80071cc <_dtoa_r+0x64c>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 fdb6 	bl	8000adc <__aeabi_dcmplt>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f000 8081 	beq.w	8007078 <_dtoa_r+0x4f8>
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d07d      	beq.n	8007078 <_dtoa_r+0x4f8>
 8006f7c:	f1b9 0f00 	cmp.w	r9, #0
 8006f80:	dd3c      	ble.n	8006ffc <_dtoa_r+0x47c>
 8006f82:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f86:	9307      	str	r3, [sp, #28]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4b91      	ldr	r3, [pc, #580]	; (80071d0 <_dtoa_r+0x650>)
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	4639      	mov	r1, r7
 8006f90:	f7f9 fb32 	bl	80005f8 <__aeabi_dmul>
 8006f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f98:	3501      	adds	r5, #1
 8006f9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006f9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f7f9 fabe 	bl	8000524 <__aeabi_i2d>
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	4b88      	ldr	r3, [pc, #544]	; (80071d4 <_dtoa_r+0x654>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f7f9 f96a 	bl	800028c <__adddf3>
 8006fb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc0:	9303      	str	r3, [sp, #12]
 8006fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d15c      	bne.n	8007082 <_dtoa_r+0x502>
 8006fc8:	4b83      	ldr	r3, [pc, #524]	; (80071d8 <_dtoa_r+0x658>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4630      	mov	r0, r6
 8006fce:	4639      	mov	r1, r7
 8006fd0:	f7f9 f95a 	bl	8000288 <__aeabi_dsub>
 8006fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fd8:	4606      	mov	r6, r0
 8006fda:	460f      	mov	r7, r1
 8006fdc:	f7f9 fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	f040 8296 	bne.w	8007512 <_dtoa_r+0x992>
 8006fe6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006fea:	4630      	mov	r0, r6
 8006fec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	f7f9 fd73 	bl	8000adc <__aeabi_dcmplt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f040 8288 	bne.w	800750c <_dtoa_r+0x98c>
 8006ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007000:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007006:	2b00      	cmp	r3, #0
 8007008:	f2c0 8158 	blt.w	80072bc <_dtoa_r+0x73c>
 800700c:	f1ba 0f0e 	cmp.w	sl, #14
 8007010:	f300 8154 	bgt.w	80072bc <_dtoa_r+0x73c>
 8007014:	4b6b      	ldr	r3, [pc, #428]	; (80071c4 <_dtoa_r+0x644>)
 8007016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800701a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800701e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	f280 80e3 	bge.w	80071ec <_dtoa_r+0x66c>
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f300 80df 	bgt.w	80071ec <_dtoa_r+0x66c>
 800702e:	f040 826d 	bne.w	800750c <_dtoa_r+0x98c>
 8007032:	4b69      	ldr	r3, [pc, #420]	; (80071d8 <_dtoa_r+0x658>)
 8007034:	2200      	movs	r2, #0
 8007036:	4640      	mov	r0, r8
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 fadd 	bl	80005f8 <__aeabi_dmul>
 800703e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007042:	f7f9 fd5f 	bl	8000b04 <__aeabi_dcmpge>
 8007046:	9e01      	ldr	r6, [sp, #4]
 8007048:	4637      	mov	r7, r6
 800704a:	2800      	cmp	r0, #0
 800704c:	f040 8243 	bne.w	80074d6 <_dtoa_r+0x956>
 8007050:	9d00      	ldr	r5, [sp, #0]
 8007052:	2331      	movs	r3, #49	; 0x31
 8007054:	f805 3b01 	strb.w	r3, [r5], #1
 8007058:	f10a 0a01 	add.w	sl, sl, #1
 800705c:	e23f      	b.n	80074de <_dtoa_r+0x95e>
 800705e:	07f2      	lsls	r2, r6, #31
 8007060:	d505      	bpl.n	800706e <_dtoa_r+0x4ee>
 8007062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007066:	f7f9 fac7 	bl	80005f8 <__aeabi_dmul>
 800706a:	3501      	adds	r5, #1
 800706c:	2301      	movs	r3, #1
 800706e:	1076      	asrs	r6, r6, #1
 8007070:	3708      	adds	r7, #8
 8007072:	e76c      	b.n	8006f4e <_dtoa_r+0x3ce>
 8007074:	2502      	movs	r5, #2
 8007076:	e76f      	b.n	8006f58 <_dtoa_r+0x3d8>
 8007078:	9b01      	ldr	r3, [sp, #4]
 800707a:	f8cd a01c 	str.w	sl, [sp, #28]
 800707e:	930c      	str	r3, [sp, #48]	; 0x30
 8007080:	e78d      	b.n	8006f9e <_dtoa_r+0x41e>
 8007082:	9900      	ldr	r1, [sp, #0]
 8007084:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007088:	4b4e      	ldr	r3, [pc, #312]	; (80071c4 <_dtoa_r+0x644>)
 800708a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800708e:	4401      	add	r1, r0
 8007090:	9102      	str	r1, [sp, #8]
 8007092:	9908      	ldr	r1, [sp, #32]
 8007094:	eeb0 8a47 	vmov.f32	s16, s14
 8007098:	eef0 8a67 	vmov.f32	s17, s15
 800709c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d045      	beq.n	8007134 <_dtoa_r+0x5b4>
 80070a8:	494c      	ldr	r1, [pc, #304]	; (80071dc <_dtoa_r+0x65c>)
 80070aa:	2000      	movs	r0, #0
 80070ac:	f7f9 fbce 	bl	800084c <__aeabi_ddiv>
 80070b0:	ec53 2b18 	vmov	r2, r3, d8
 80070b4:	f7f9 f8e8 	bl	8000288 <__aeabi_dsub>
 80070b8:	9d00      	ldr	r5, [sp, #0]
 80070ba:	ec41 0b18 	vmov	d8, r0, r1
 80070be:	4639      	mov	r1, r7
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7f9 fd49 	bl	8000b58 <__aeabi_d2iz>
 80070c6:	900c      	str	r0, [sp, #48]	; 0x30
 80070c8:	f7f9 fa2c 	bl	8000524 <__aeabi_i2d>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 f8d8 	bl	8000288 <__aeabi_dsub>
 80070d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070da:	3330      	adds	r3, #48	; 0x30
 80070dc:	f805 3b01 	strb.w	r3, [r5], #1
 80070e0:	ec53 2b18 	vmov	r2, r3, d8
 80070e4:	4606      	mov	r6, r0
 80070e6:	460f      	mov	r7, r1
 80070e8:	f7f9 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d165      	bne.n	80071bc <_dtoa_r+0x63c>
 80070f0:	4632      	mov	r2, r6
 80070f2:	463b      	mov	r3, r7
 80070f4:	4935      	ldr	r1, [pc, #212]	; (80071cc <_dtoa_r+0x64c>)
 80070f6:	2000      	movs	r0, #0
 80070f8:	f7f9 f8c6 	bl	8000288 <__aeabi_dsub>
 80070fc:	ec53 2b18 	vmov	r2, r3, d8
 8007100:	f7f9 fcec 	bl	8000adc <__aeabi_dcmplt>
 8007104:	2800      	cmp	r0, #0
 8007106:	f040 80b9 	bne.w	800727c <_dtoa_r+0x6fc>
 800710a:	9b02      	ldr	r3, [sp, #8]
 800710c:	429d      	cmp	r5, r3
 800710e:	f43f af75 	beq.w	8006ffc <_dtoa_r+0x47c>
 8007112:	4b2f      	ldr	r3, [pc, #188]	; (80071d0 <_dtoa_r+0x650>)
 8007114:	ec51 0b18 	vmov	r0, r1, d8
 8007118:	2200      	movs	r2, #0
 800711a:	f7f9 fa6d 	bl	80005f8 <__aeabi_dmul>
 800711e:	4b2c      	ldr	r3, [pc, #176]	; (80071d0 <_dtoa_r+0x650>)
 8007120:	ec41 0b18 	vmov	d8, r0, r1
 8007124:	2200      	movs	r2, #0
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 fa65 	bl	80005f8 <__aeabi_dmul>
 800712e:	4606      	mov	r6, r0
 8007130:	460f      	mov	r7, r1
 8007132:	e7c4      	b.n	80070be <_dtoa_r+0x53e>
 8007134:	ec51 0b17 	vmov	r0, r1, d7
 8007138:	f7f9 fa5e 	bl	80005f8 <__aeabi_dmul>
 800713c:	9b02      	ldr	r3, [sp, #8]
 800713e:	9d00      	ldr	r5, [sp, #0]
 8007140:	930c      	str	r3, [sp, #48]	; 0x30
 8007142:	ec41 0b18 	vmov	d8, r0, r1
 8007146:	4639      	mov	r1, r7
 8007148:	4630      	mov	r0, r6
 800714a:	f7f9 fd05 	bl	8000b58 <__aeabi_d2iz>
 800714e:	9011      	str	r0, [sp, #68]	; 0x44
 8007150:	f7f9 f9e8 	bl	8000524 <__aeabi_i2d>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 f894 	bl	8000288 <__aeabi_dsub>
 8007160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007162:	3330      	adds	r3, #48	; 0x30
 8007164:	f805 3b01 	strb.w	r3, [r5], #1
 8007168:	9b02      	ldr	r3, [sp, #8]
 800716a:	429d      	cmp	r5, r3
 800716c:	4606      	mov	r6, r0
 800716e:	460f      	mov	r7, r1
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	d134      	bne.n	80071e0 <_dtoa_r+0x660>
 8007176:	4b19      	ldr	r3, [pc, #100]	; (80071dc <_dtoa_r+0x65c>)
 8007178:	ec51 0b18 	vmov	r0, r1, d8
 800717c:	f7f9 f886 	bl	800028c <__adddf3>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4630      	mov	r0, r6
 8007186:	4639      	mov	r1, r7
 8007188:	f7f9 fcc6 	bl	8000b18 <__aeabi_dcmpgt>
 800718c:	2800      	cmp	r0, #0
 800718e:	d175      	bne.n	800727c <_dtoa_r+0x6fc>
 8007190:	ec53 2b18 	vmov	r2, r3, d8
 8007194:	4911      	ldr	r1, [pc, #68]	; (80071dc <_dtoa_r+0x65c>)
 8007196:	2000      	movs	r0, #0
 8007198:	f7f9 f876 	bl	8000288 <__aeabi_dsub>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 fc9a 	bl	8000adc <__aeabi_dcmplt>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	f43f af27 	beq.w	8006ffc <_dtoa_r+0x47c>
 80071ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071b0:	1e6b      	subs	r3, r5, #1
 80071b2:	930c      	str	r3, [sp, #48]	; 0x30
 80071b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071b8:	2b30      	cmp	r3, #48	; 0x30
 80071ba:	d0f8      	beq.n	80071ae <_dtoa_r+0x62e>
 80071bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071c0:	e04a      	b.n	8007258 <_dtoa_r+0x6d8>
 80071c2:	bf00      	nop
 80071c4:	0800a318 	.word	0x0800a318
 80071c8:	0800a2f0 	.word	0x0800a2f0
 80071cc:	3ff00000 	.word	0x3ff00000
 80071d0:	40240000 	.word	0x40240000
 80071d4:	401c0000 	.word	0x401c0000
 80071d8:	40140000 	.word	0x40140000
 80071dc:	3fe00000 	.word	0x3fe00000
 80071e0:	4baf      	ldr	r3, [pc, #700]	; (80074a0 <_dtoa_r+0x920>)
 80071e2:	f7f9 fa09 	bl	80005f8 <__aeabi_dmul>
 80071e6:	4606      	mov	r6, r0
 80071e8:	460f      	mov	r7, r1
 80071ea:	e7ac      	b.n	8007146 <_dtoa_r+0x5c6>
 80071ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071f0:	9d00      	ldr	r5, [sp, #0]
 80071f2:	4642      	mov	r2, r8
 80071f4:	464b      	mov	r3, r9
 80071f6:	4630      	mov	r0, r6
 80071f8:	4639      	mov	r1, r7
 80071fa:	f7f9 fb27 	bl	800084c <__aeabi_ddiv>
 80071fe:	f7f9 fcab 	bl	8000b58 <__aeabi_d2iz>
 8007202:	9002      	str	r0, [sp, #8]
 8007204:	f7f9 f98e 	bl	8000524 <__aeabi_i2d>
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	f7f9 f9f4 	bl	80005f8 <__aeabi_dmul>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4630      	mov	r0, r6
 8007216:	4639      	mov	r1, r7
 8007218:	f7f9 f836 	bl	8000288 <__aeabi_dsub>
 800721c:	9e02      	ldr	r6, [sp, #8]
 800721e:	9f01      	ldr	r7, [sp, #4]
 8007220:	3630      	adds	r6, #48	; 0x30
 8007222:	f805 6b01 	strb.w	r6, [r5], #1
 8007226:	9e00      	ldr	r6, [sp, #0]
 8007228:	1bae      	subs	r6, r5, r6
 800722a:	42b7      	cmp	r7, r6
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	d137      	bne.n	80072a2 <_dtoa_r+0x722>
 8007232:	f7f9 f82b 	bl	800028c <__adddf3>
 8007236:	4642      	mov	r2, r8
 8007238:	464b      	mov	r3, r9
 800723a:	4606      	mov	r6, r0
 800723c:	460f      	mov	r7, r1
 800723e:	f7f9 fc6b 	bl	8000b18 <__aeabi_dcmpgt>
 8007242:	b9c8      	cbnz	r0, 8007278 <_dtoa_r+0x6f8>
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007250:	b110      	cbz	r0, 8007258 <_dtoa_r+0x6d8>
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	07d9      	lsls	r1, r3, #31
 8007256:	d40f      	bmi.n	8007278 <_dtoa_r+0x6f8>
 8007258:	4620      	mov	r0, r4
 800725a:	4659      	mov	r1, fp
 800725c:	f000 fe6a 	bl	8007f34 <_Bfree>
 8007260:	2300      	movs	r3, #0
 8007262:	702b      	strb	r3, [r5, #0]
 8007264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007266:	f10a 0001 	add.w	r0, sl, #1
 800726a:	6018      	str	r0, [r3, #0]
 800726c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800726e:	2b00      	cmp	r3, #0
 8007270:	f43f acd8 	beq.w	8006c24 <_dtoa_r+0xa4>
 8007274:	601d      	str	r5, [r3, #0]
 8007276:	e4d5      	b.n	8006c24 <_dtoa_r+0xa4>
 8007278:	f8cd a01c 	str.w	sl, [sp, #28]
 800727c:	462b      	mov	r3, r5
 800727e:	461d      	mov	r5, r3
 8007280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007284:	2a39      	cmp	r2, #57	; 0x39
 8007286:	d108      	bne.n	800729a <_dtoa_r+0x71a>
 8007288:	9a00      	ldr	r2, [sp, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d1f7      	bne.n	800727e <_dtoa_r+0x6fe>
 800728e:	9a07      	ldr	r2, [sp, #28]
 8007290:	9900      	ldr	r1, [sp, #0]
 8007292:	3201      	adds	r2, #1
 8007294:	9207      	str	r2, [sp, #28]
 8007296:	2230      	movs	r2, #48	; 0x30
 8007298:	700a      	strb	r2, [r1, #0]
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	3201      	adds	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	e78c      	b.n	80071bc <_dtoa_r+0x63c>
 80072a2:	4b7f      	ldr	r3, [pc, #508]	; (80074a0 <_dtoa_r+0x920>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	f7f9 f9a7 	bl	80005f8 <__aeabi_dmul>
 80072aa:	2200      	movs	r2, #0
 80072ac:	2300      	movs	r3, #0
 80072ae:	4606      	mov	r6, r0
 80072b0:	460f      	mov	r7, r1
 80072b2:	f7f9 fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d09b      	beq.n	80071f2 <_dtoa_r+0x672>
 80072ba:	e7cd      	b.n	8007258 <_dtoa_r+0x6d8>
 80072bc:	9a08      	ldr	r2, [sp, #32]
 80072be:	2a00      	cmp	r2, #0
 80072c0:	f000 80c4 	beq.w	800744c <_dtoa_r+0x8cc>
 80072c4:	9a05      	ldr	r2, [sp, #20]
 80072c6:	2a01      	cmp	r2, #1
 80072c8:	f300 80a8 	bgt.w	800741c <_dtoa_r+0x89c>
 80072cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	f000 80a0 	beq.w	8007414 <_dtoa_r+0x894>
 80072d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072d8:	9e06      	ldr	r6, [sp, #24]
 80072da:	4645      	mov	r5, r8
 80072dc:	9a04      	ldr	r2, [sp, #16]
 80072de:	2101      	movs	r1, #1
 80072e0:	441a      	add	r2, r3
 80072e2:	4620      	mov	r0, r4
 80072e4:	4498      	add	r8, r3
 80072e6:	9204      	str	r2, [sp, #16]
 80072e8:	f000 ff2a 	bl	8008140 <__i2b>
 80072ec:	4607      	mov	r7, r0
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	dd0b      	ble.n	800730a <_dtoa_r+0x78a>
 80072f2:	9b04      	ldr	r3, [sp, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dd08      	ble.n	800730a <_dtoa_r+0x78a>
 80072f8:	42ab      	cmp	r3, r5
 80072fa:	9a04      	ldr	r2, [sp, #16]
 80072fc:	bfa8      	it	ge
 80072fe:	462b      	movge	r3, r5
 8007300:	eba8 0803 	sub.w	r8, r8, r3
 8007304:	1aed      	subs	r5, r5, r3
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	9304      	str	r3, [sp, #16]
 800730a:	9b06      	ldr	r3, [sp, #24]
 800730c:	b1fb      	cbz	r3, 800734e <_dtoa_r+0x7ce>
 800730e:	9b08      	ldr	r3, [sp, #32]
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 809f 	beq.w	8007454 <_dtoa_r+0x8d4>
 8007316:	2e00      	cmp	r6, #0
 8007318:	dd11      	ble.n	800733e <_dtoa_r+0x7be>
 800731a:	4639      	mov	r1, r7
 800731c:	4632      	mov	r2, r6
 800731e:	4620      	mov	r0, r4
 8007320:	f000 ffca 	bl	80082b8 <__pow5mult>
 8007324:	465a      	mov	r2, fp
 8007326:	4601      	mov	r1, r0
 8007328:	4607      	mov	r7, r0
 800732a:	4620      	mov	r0, r4
 800732c:	f000 ff1e 	bl	800816c <__multiply>
 8007330:	4659      	mov	r1, fp
 8007332:	9007      	str	r0, [sp, #28]
 8007334:	4620      	mov	r0, r4
 8007336:	f000 fdfd 	bl	8007f34 <_Bfree>
 800733a:	9b07      	ldr	r3, [sp, #28]
 800733c:	469b      	mov	fp, r3
 800733e:	9b06      	ldr	r3, [sp, #24]
 8007340:	1b9a      	subs	r2, r3, r6
 8007342:	d004      	beq.n	800734e <_dtoa_r+0x7ce>
 8007344:	4659      	mov	r1, fp
 8007346:	4620      	mov	r0, r4
 8007348:	f000 ffb6 	bl	80082b8 <__pow5mult>
 800734c:	4683      	mov	fp, r0
 800734e:	2101      	movs	r1, #1
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fef5 	bl	8008140 <__i2b>
 8007356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007358:	2b00      	cmp	r3, #0
 800735a:	4606      	mov	r6, r0
 800735c:	dd7c      	ble.n	8007458 <_dtoa_r+0x8d8>
 800735e:	461a      	mov	r2, r3
 8007360:	4601      	mov	r1, r0
 8007362:	4620      	mov	r0, r4
 8007364:	f000 ffa8 	bl	80082b8 <__pow5mult>
 8007368:	9b05      	ldr	r3, [sp, #20]
 800736a:	2b01      	cmp	r3, #1
 800736c:	4606      	mov	r6, r0
 800736e:	dd76      	ble.n	800745e <_dtoa_r+0x8de>
 8007370:	2300      	movs	r3, #0
 8007372:	9306      	str	r3, [sp, #24]
 8007374:	6933      	ldr	r3, [r6, #16]
 8007376:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800737a:	6918      	ldr	r0, [r3, #16]
 800737c:	f000 fe90 	bl	80080a0 <__hi0bits>
 8007380:	f1c0 0020 	rsb	r0, r0, #32
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	4418      	add	r0, r3
 8007388:	f010 001f 	ands.w	r0, r0, #31
 800738c:	f000 8086 	beq.w	800749c <_dtoa_r+0x91c>
 8007390:	f1c0 0320 	rsb	r3, r0, #32
 8007394:	2b04      	cmp	r3, #4
 8007396:	dd7f      	ble.n	8007498 <_dtoa_r+0x918>
 8007398:	f1c0 001c 	rsb	r0, r0, #28
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	4403      	add	r3, r0
 80073a0:	4480      	add	r8, r0
 80073a2:	4405      	add	r5, r0
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	f1b8 0f00 	cmp.w	r8, #0
 80073aa:	dd05      	ble.n	80073b8 <_dtoa_r+0x838>
 80073ac:	4659      	mov	r1, fp
 80073ae:	4642      	mov	r2, r8
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 ffdb 	bl	800836c <__lshift>
 80073b6:	4683      	mov	fp, r0
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	dd05      	ble.n	80073ca <_dtoa_r+0x84a>
 80073be:	4631      	mov	r1, r6
 80073c0:	461a      	mov	r2, r3
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 ffd2 	bl	800836c <__lshift>
 80073c8:	4606      	mov	r6, r0
 80073ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d069      	beq.n	80074a4 <_dtoa_r+0x924>
 80073d0:	4631      	mov	r1, r6
 80073d2:	4658      	mov	r0, fp
 80073d4:	f001 f836 	bl	8008444 <__mcmp>
 80073d8:	2800      	cmp	r0, #0
 80073da:	da63      	bge.n	80074a4 <_dtoa_r+0x924>
 80073dc:	2300      	movs	r3, #0
 80073de:	4659      	mov	r1, fp
 80073e0:	220a      	movs	r2, #10
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 fdc8 	bl	8007f78 <__multadd>
 80073e8:	9b08      	ldr	r3, [sp, #32]
 80073ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073ee:	4683      	mov	fp, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 818f 	beq.w	8007714 <_dtoa_r+0xb94>
 80073f6:	4639      	mov	r1, r7
 80073f8:	2300      	movs	r3, #0
 80073fa:	220a      	movs	r2, #10
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 fdbb 	bl	8007f78 <__multadd>
 8007402:	f1b9 0f00 	cmp.w	r9, #0
 8007406:	4607      	mov	r7, r0
 8007408:	f300 808e 	bgt.w	8007528 <_dtoa_r+0x9a8>
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	2b02      	cmp	r3, #2
 8007410:	dc50      	bgt.n	80074b4 <_dtoa_r+0x934>
 8007412:	e089      	b.n	8007528 <_dtoa_r+0x9a8>
 8007414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800741a:	e75d      	b.n	80072d8 <_dtoa_r+0x758>
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	1e5e      	subs	r6, r3, #1
 8007420:	9b06      	ldr	r3, [sp, #24]
 8007422:	42b3      	cmp	r3, r6
 8007424:	bfbf      	itttt	lt
 8007426:	9b06      	ldrlt	r3, [sp, #24]
 8007428:	9606      	strlt	r6, [sp, #24]
 800742a:	1af2      	sublt	r2, r6, r3
 800742c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800742e:	bfb6      	itet	lt
 8007430:	189b      	addlt	r3, r3, r2
 8007432:	1b9e      	subge	r6, r3, r6
 8007434:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	bfb8      	it	lt
 800743a:	2600      	movlt	r6, #0
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfb5      	itete	lt
 8007440:	eba8 0503 	sublt.w	r5, r8, r3
 8007444:	9b01      	ldrge	r3, [sp, #4]
 8007446:	2300      	movlt	r3, #0
 8007448:	4645      	movge	r5, r8
 800744a:	e747      	b.n	80072dc <_dtoa_r+0x75c>
 800744c:	9e06      	ldr	r6, [sp, #24]
 800744e:	9f08      	ldr	r7, [sp, #32]
 8007450:	4645      	mov	r5, r8
 8007452:	e74c      	b.n	80072ee <_dtoa_r+0x76e>
 8007454:	9a06      	ldr	r2, [sp, #24]
 8007456:	e775      	b.n	8007344 <_dtoa_r+0x7c4>
 8007458:	9b05      	ldr	r3, [sp, #20]
 800745a:	2b01      	cmp	r3, #1
 800745c:	dc18      	bgt.n	8007490 <_dtoa_r+0x910>
 800745e:	9b02      	ldr	r3, [sp, #8]
 8007460:	b9b3      	cbnz	r3, 8007490 <_dtoa_r+0x910>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007468:	b9a3      	cbnz	r3, 8007494 <_dtoa_r+0x914>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007470:	0d1b      	lsrs	r3, r3, #20
 8007472:	051b      	lsls	r3, r3, #20
 8007474:	b12b      	cbz	r3, 8007482 <_dtoa_r+0x902>
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	3301      	adds	r3, #1
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	f108 0801 	add.w	r8, r8, #1
 8007480:	2301      	movs	r3, #1
 8007482:	9306      	str	r3, [sp, #24]
 8007484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007486:	2b00      	cmp	r3, #0
 8007488:	f47f af74 	bne.w	8007374 <_dtoa_r+0x7f4>
 800748c:	2001      	movs	r0, #1
 800748e:	e779      	b.n	8007384 <_dtoa_r+0x804>
 8007490:	2300      	movs	r3, #0
 8007492:	e7f6      	b.n	8007482 <_dtoa_r+0x902>
 8007494:	9b02      	ldr	r3, [sp, #8]
 8007496:	e7f4      	b.n	8007482 <_dtoa_r+0x902>
 8007498:	d085      	beq.n	80073a6 <_dtoa_r+0x826>
 800749a:	4618      	mov	r0, r3
 800749c:	301c      	adds	r0, #28
 800749e:	e77d      	b.n	800739c <_dtoa_r+0x81c>
 80074a0:	40240000 	.word	0x40240000
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dc38      	bgt.n	800751c <_dtoa_r+0x99c>
 80074aa:	9b05      	ldr	r3, [sp, #20]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	dd35      	ble.n	800751c <_dtoa_r+0x99c>
 80074b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074b4:	f1b9 0f00 	cmp.w	r9, #0
 80074b8:	d10d      	bne.n	80074d6 <_dtoa_r+0x956>
 80074ba:	4631      	mov	r1, r6
 80074bc:	464b      	mov	r3, r9
 80074be:	2205      	movs	r2, #5
 80074c0:	4620      	mov	r0, r4
 80074c2:	f000 fd59 	bl	8007f78 <__multadd>
 80074c6:	4601      	mov	r1, r0
 80074c8:	4606      	mov	r6, r0
 80074ca:	4658      	mov	r0, fp
 80074cc:	f000 ffba 	bl	8008444 <__mcmp>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	f73f adbd 	bgt.w	8007050 <_dtoa_r+0x4d0>
 80074d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d8:	9d00      	ldr	r5, [sp, #0]
 80074da:	ea6f 0a03 	mvn.w	sl, r3
 80074de:	f04f 0800 	mov.w	r8, #0
 80074e2:	4631      	mov	r1, r6
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 fd25 	bl	8007f34 <_Bfree>
 80074ea:	2f00      	cmp	r7, #0
 80074ec:	f43f aeb4 	beq.w	8007258 <_dtoa_r+0x6d8>
 80074f0:	f1b8 0f00 	cmp.w	r8, #0
 80074f4:	d005      	beq.n	8007502 <_dtoa_r+0x982>
 80074f6:	45b8      	cmp	r8, r7
 80074f8:	d003      	beq.n	8007502 <_dtoa_r+0x982>
 80074fa:	4641      	mov	r1, r8
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 fd19 	bl	8007f34 <_Bfree>
 8007502:	4639      	mov	r1, r7
 8007504:	4620      	mov	r0, r4
 8007506:	f000 fd15 	bl	8007f34 <_Bfree>
 800750a:	e6a5      	b.n	8007258 <_dtoa_r+0x6d8>
 800750c:	2600      	movs	r6, #0
 800750e:	4637      	mov	r7, r6
 8007510:	e7e1      	b.n	80074d6 <_dtoa_r+0x956>
 8007512:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007514:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007518:	4637      	mov	r7, r6
 800751a:	e599      	b.n	8007050 <_dtoa_r+0x4d0>
 800751c:	9b08      	ldr	r3, [sp, #32]
 800751e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80fd 	beq.w	8007722 <_dtoa_r+0xba2>
 8007528:	2d00      	cmp	r5, #0
 800752a:	dd05      	ble.n	8007538 <_dtoa_r+0x9b8>
 800752c:	4639      	mov	r1, r7
 800752e:	462a      	mov	r2, r5
 8007530:	4620      	mov	r0, r4
 8007532:	f000 ff1b 	bl	800836c <__lshift>
 8007536:	4607      	mov	r7, r0
 8007538:	9b06      	ldr	r3, [sp, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d05c      	beq.n	80075f8 <_dtoa_r+0xa78>
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4620      	mov	r0, r4
 8007542:	f000 fcb7 	bl	8007eb4 <_Balloc>
 8007546:	4605      	mov	r5, r0
 8007548:	b928      	cbnz	r0, 8007556 <_dtoa_r+0x9d6>
 800754a:	4b80      	ldr	r3, [pc, #512]	; (800774c <_dtoa_r+0xbcc>)
 800754c:	4602      	mov	r2, r0
 800754e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007552:	f7ff bb2e 	b.w	8006bb2 <_dtoa_r+0x32>
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	3202      	adds	r2, #2
 800755a:	0092      	lsls	r2, r2, #2
 800755c:	f107 010c 	add.w	r1, r7, #12
 8007560:	300c      	adds	r0, #12
 8007562:	f000 fc99 	bl	8007e98 <memcpy>
 8007566:	2201      	movs	r2, #1
 8007568:	4629      	mov	r1, r5
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fefe 	bl	800836c <__lshift>
 8007570:	9b00      	ldr	r3, [sp, #0]
 8007572:	3301      	adds	r3, #1
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	444b      	add	r3, r9
 800757a:	9307      	str	r3, [sp, #28]
 800757c:	9b02      	ldr	r3, [sp, #8]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	46b8      	mov	r8, r7
 8007584:	9306      	str	r3, [sp, #24]
 8007586:	4607      	mov	r7, r0
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	4631      	mov	r1, r6
 800758c:	3b01      	subs	r3, #1
 800758e:	4658      	mov	r0, fp
 8007590:	9302      	str	r3, [sp, #8]
 8007592:	f7ff fa69 	bl	8006a68 <quorem>
 8007596:	4603      	mov	r3, r0
 8007598:	3330      	adds	r3, #48	; 0x30
 800759a:	9004      	str	r0, [sp, #16]
 800759c:	4641      	mov	r1, r8
 800759e:	4658      	mov	r0, fp
 80075a0:	9308      	str	r3, [sp, #32]
 80075a2:	f000 ff4f 	bl	8008444 <__mcmp>
 80075a6:	463a      	mov	r2, r7
 80075a8:	4681      	mov	r9, r0
 80075aa:	4631      	mov	r1, r6
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 ff65 	bl	800847c <__mdiff>
 80075b2:	68c2      	ldr	r2, [r0, #12]
 80075b4:	9b08      	ldr	r3, [sp, #32]
 80075b6:	4605      	mov	r5, r0
 80075b8:	bb02      	cbnz	r2, 80075fc <_dtoa_r+0xa7c>
 80075ba:	4601      	mov	r1, r0
 80075bc:	4658      	mov	r0, fp
 80075be:	f000 ff41 	bl	8008444 <__mcmp>
 80075c2:	9b08      	ldr	r3, [sp, #32]
 80075c4:	4602      	mov	r2, r0
 80075c6:	4629      	mov	r1, r5
 80075c8:	4620      	mov	r0, r4
 80075ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80075ce:	f000 fcb1 	bl	8007f34 <_Bfree>
 80075d2:	9b05      	ldr	r3, [sp, #20]
 80075d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d6:	9d01      	ldr	r5, [sp, #4]
 80075d8:	ea43 0102 	orr.w	r1, r3, r2
 80075dc:	9b06      	ldr	r3, [sp, #24]
 80075de:	430b      	orrs	r3, r1
 80075e0:	9b08      	ldr	r3, [sp, #32]
 80075e2:	d10d      	bne.n	8007600 <_dtoa_r+0xa80>
 80075e4:	2b39      	cmp	r3, #57	; 0x39
 80075e6:	d029      	beq.n	800763c <_dtoa_r+0xabc>
 80075e8:	f1b9 0f00 	cmp.w	r9, #0
 80075ec:	dd01      	ble.n	80075f2 <_dtoa_r+0xa72>
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	3331      	adds	r3, #49	; 0x31
 80075f2:	9a02      	ldr	r2, [sp, #8]
 80075f4:	7013      	strb	r3, [r2, #0]
 80075f6:	e774      	b.n	80074e2 <_dtoa_r+0x962>
 80075f8:	4638      	mov	r0, r7
 80075fa:	e7b9      	b.n	8007570 <_dtoa_r+0x9f0>
 80075fc:	2201      	movs	r2, #1
 80075fe:	e7e2      	b.n	80075c6 <_dtoa_r+0xa46>
 8007600:	f1b9 0f00 	cmp.w	r9, #0
 8007604:	db06      	blt.n	8007614 <_dtoa_r+0xa94>
 8007606:	9905      	ldr	r1, [sp, #20]
 8007608:	ea41 0909 	orr.w	r9, r1, r9
 800760c:	9906      	ldr	r1, [sp, #24]
 800760e:	ea59 0101 	orrs.w	r1, r9, r1
 8007612:	d120      	bne.n	8007656 <_dtoa_r+0xad6>
 8007614:	2a00      	cmp	r2, #0
 8007616:	ddec      	ble.n	80075f2 <_dtoa_r+0xa72>
 8007618:	4659      	mov	r1, fp
 800761a:	2201      	movs	r2, #1
 800761c:	4620      	mov	r0, r4
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	f000 fea4 	bl	800836c <__lshift>
 8007624:	4631      	mov	r1, r6
 8007626:	4683      	mov	fp, r0
 8007628:	f000 ff0c 	bl	8008444 <__mcmp>
 800762c:	2800      	cmp	r0, #0
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	dc02      	bgt.n	8007638 <_dtoa_r+0xab8>
 8007632:	d1de      	bne.n	80075f2 <_dtoa_r+0xa72>
 8007634:	07da      	lsls	r2, r3, #31
 8007636:	d5dc      	bpl.n	80075f2 <_dtoa_r+0xa72>
 8007638:	2b39      	cmp	r3, #57	; 0x39
 800763a:	d1d8      	bne.n	80075ee <_dtoa_r+0xa6e>
 800763c:	9a02      	ldr	r2, [sp, #8]
 800763e:	2339      	movs	r3, #57	; 0x39
 8007640:	7013      	strb	r3, [r2, #0]
 8007642:	462b      	mov	r3, r5
 8007644:	461d      	mov	r5, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800764c:	2a39      	cmp	r2, #57	; 0x39
 800764e:	d050      	beq.n	80076f2 <_dtoa_r+0xb72>
 8007650:	3201      	adds	r2, #1
 8007652:	701a      	strb	r2, [r3, #0]
 8007654:	e745      	b.n	80074e2 <_dtoa_r+0x962>
 8007656:	2a00      	cmp	r2, #0
 8007658:	dd03      	ble.n	8007662 <_dtoa_r+0xae2>
 800765a:	2b39      	cmp	r3, #57	; 0x39
 800765c:	d0ee      	beq.n	800763c <_dtoa_r+0xabc>
 800765e:	3301      	adds	r3, #1
 8007660:	e7c7      	b.n	80075f2 <_dtoa_r+0xa72>
 8007662:	9a01      	ldr	r2, [sp, #4]
 8007664:	9907      	ldr	r1, [sp, #28]
 8007666:	f802 3c01 	strb.w	r3, [r2, #-1]
 800766a:	428a      	cmp	r2, r1
 800766c:	d02a      	beq.n	80076c4 <_dtoa_r+0xb44>
 800766e:	4659      	mov	r1, fp
 8007670:	2300      	movs	r3, #0
 8007672:	220a      	movs	r2, #10
 8007674:	4620      	mov	r0, r4
 8007676:	f000 fc7f 	bl	8007f78 <__multadd>
 800767a:	45b8      	cmp	r8, r7
 800767c:	4683      	mov	fp, r0
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	f04f 020a 	mov.w	r2, #10
 8007686:	4641      	mov	r1, r8
 8007688:	4620      	mov	r0, r4
 800768a:	d107      	bne.n	800769c <_dtoa_r+0xb1c>
 800768c:	f000 fc74 	bl	8007f78 <__multadd>
 8007690:	4680      	mov	r8, r0
 8007692:	4607      	mov	r7, r0
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	3301      	adds	r3, #1
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	e775      	b.n	8007588 <_dtoa_r+0xa08>
 800769c:	f000 fc6c 	bl	8007f78 <__multadd>
 80076a0:	4639      	mov	r1, r7
 80076a2:	4680      	mov	r8, r0
 80076a4:	2300      	movs	r3, #0
 80076a6:	220a      	movs	r2, #10
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fc65 	bl	8007f78 <__multadd>
 80076ae:	4607      	mov	r7, r0
 80076b0:	e7f0      	b.n	8007694 <_dtoa_r+0xb14>
 80076b2:	f1b9 0f00 	cmp.w	r9, #0
 80076b6:	9a00      	ldr	r2, [sp, #0]
 80076b8:	bfcc      	ite	gt
 80076ba:	464d      	movgt	r5, r9
 80076bc:	2501      	movle	r5, #1
 80076be:	4415      	add	r5, r2
 80076c0:	f04f 0800 	mov.w	r8, #0
 80076c4:	4659      	mov	r1, fp
 80076c6:	2201      	movs	r2, #1
 80076c8:	4620      	mov	r0, r4
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	f000 fe4e 	bl	800836c <__lshift>
 80076d0:	4631      	mov	r1, r6
 80076d2:	4683      	mov	fp, r0
 80076d4:	f000 feb6 	bl	8008444 <__mcmp>
 80076d8:	2800      	cmp	r0, #0
 80076da:	dcb2      	bgt.n	8007642 <_dtoa_r+0xac2>
 80076dc:	d102      	bne.n	80076e4 <_dtoa_r+0xb64>
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	07db      	lsls	r3, r3, #31
 80076e2:	d4ae      	bmi.n	8007642 <_dtoa_r+0xac2>
 80076e4:	462b      	mov	r3, r5
 80076e6:	461d      	mov	r5, r3
 80076e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ec:	2a30      	cmp	r2, #48	; 0x30
 80076ee:	d0fa      	beq.n	80076e6 <_dtoa_r+0xb66>
 80076f0:	e6f7      	b.n	80074e2 <_dtoa_r+0x962>
 80076f2:	9a00      	ldr	r2, [sp, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d1a5      	bne.n	8007644 <_dtoa_r+0xac4>
 80076f8:	f10a 0a01 	add.w	sl, sl, #1
 80076fc:	2331      	movs	r3, #49	; 0x31
 80076fe:	e779      	b.n	80075f4 <_dtoa_r+0xa74>
 8007700:	4b13      	ldr	r3, [pc, #76]	; (8007750 <_dtoa_r+0xbd0>)
 8007702:	f7ff baaf 	b.w	8006c64 <_dtoa_r+0xe4>
 8007706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007708:	2b00      	cmp	r3, #0
 800770a:	f47f aa86 	bne.w	8006c1a <_dtoa_r+0x9a>
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <_dtoa_r+0xbd4>)
 8007710:	f7ff baa8 	b.w	8006c64 <_dtoa_r+0xe4>
 8007714:	f1b9 0f00 	cmp.w	r9, #0
 8007718:	dc03      	bgt.n	8007722 <_dtoa_r+0xba2>
 800771a:	9b05      	ldr	r3, [sp, #20]
 800771c:	2b02      	cmp	r3, #2
 800771e:	f73f aec9 	bgt.w	80074b4 <_dtoa_r+0x934>
 8007722:	9d00      	ldr	r5, [sp, #0]
 8007724:	4631      	mov	r1, r6
 8007726:	4658      	mov	r0, fp
 8007728:	f7ff f99e 	bl	8006a68 <quorem>
 800772c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007730:	f805 3b01 	strb.w	r3, [r5], #1
 8007734:	9a00      	ldr	r2, [sp, #0]
 8007736:	1aaa      	subs	r2, r5, r2
 8007738:	4591      	cmp	r9, r2
 800773a:	ddba      	ble.n	80076b2 <_dtoa_r+0xb32>
 800773c:	4659      	mov	r1, fp
 800773e:	2300      	movs	r3, #0
 8007740:	220a      	movs	r2, #10
 8007742:	4620      	mov	r0, r4
 8007744:	f000 fc18 	bl	8007f78 <__multadd>
 8007748:	4683      	mov	fp, r0
 800774a:	e7eb      	b.n	8007724 <_dtoa_r+0xba4>
 800774c:	0800a1fc 	.word	0x0800a1fc
 8007750:	0800a401 	.word	0x0800a401
 8007754:	0800a179 	.word	0x0800a179

08007758 <rshift>:
 8007758:	6903      	ldr	r3, [r0, #16]
 800775a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800775e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007762:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007766:	f100 0414 	add.w	r4, r0, #20
 800776a:	dd45      	ble.n	80077f8 <rshift+0xa0>
 800776c:	f011 011f 	ands.w	r1, r1, #31
 8007770:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007774:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007778:	d10c      	bne.n	8007794 <rshift+0x3c>
 800777a:	f100 0710 	add.w	r7, r0, #16
 800777e:	4629      	mov	r1, r5
 8007780:	42b1      	cmp	r1, r6
 8007782:	d334      	bcc.n	80077ee <rshift+0x96>
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	1eea      	subs	r2, r5, #3
 800778a:	4296      	cmp	r6, r2
 800778c:	bf38      	it	cc
 800778e:	2300      	movcc	r3, #0
 8007790:	4423      	add	r3, r4
 8007792:	e015      	b.n	80077c0 <rshift+0x68>
 8007794:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007798:	f1c1 0820 	rsb	r8, r1, #32
 800779c:	40cf      	lsrs	r7, r1
 800779e:	f105 0e04 	add.w	lr, r5, #4
 80077a2:	46a1      	mov	r9, r4
 80077a4:	4576      	cmp	r6, lr
 80077a6:	46f4      	mov	ip, lr
 80077a8:	d815      	bhi.n	80077d6 <rshift+0x7e>
 80077aa:	1a9b      	subs	r3, r3, r2
 80077ac:	009a      	lsls	r2, r3, #2
 80077ae:	3a04      	subs	r2, #4
 80077b0:	3501      	adds	r5, #1
 80077b2:	42ae      	cmp	r6, r5
 80077b4:	bf38      	it	cc
 80077b6:	2200      	movcc	r2, #0
 80077b8:	18a3      	adds	r3, r4, r2
 80077ba:	50a7      	str	r7, [r4, r2]
 80077bc:	b107      	cbz	r7, 80077c0 <rshift+0x68>
 80077be:	3304      	adds	r3, #4
 80077c0:	1b1a      	subs	r2, r3, r4
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077c8:	bf08      	it	eq
 80077ca:	2300      	moveq	r3, #0
 80077cc:	6102      	str	r2, [r0, #16]
 80077ce:	bf08      	it	eq
 80077d0:	6143      	streq	r3, [r0, #20]
 80077d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077d6:	f8dc c000 	ldr.w	ip, [ip]
 80077da:	fa0c fc08 	lsl.w	ip, ip, r8
 80077de:	ea4c 0707 	orr.w	r7, ip, r7
 80077e2:	f849 7b04 	str.w	r7, [r9], #4
 80077e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077ea:	40cf      	lsrs	r7, r1
 80077ec:	e7da      	b.n	80077a4 <rshift+0x4c>
 80077ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80077f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80077f6:	e7c3      	b.n	8007780 <rshift+0x28>
 80077f8:	4623      	mov	r3, r4
 80077fa:	e7e1      	b.n	80077c0 <rshift+0x68>

080077fc <__hexdig_fun>:
 80077fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007800:	2b09      	cmp	r3, #9
 8007802:	d802      	bhi.n	800780a <__hexdig_fun+0xe>
 8007804:	3820      	subs	r0, #32
 8007806:	b2c0      	uxtb	r0, r0
 8007808:	4770      	bx	lr
 800780a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800780e:	2b05      	cmp	r3, #5
 8007810:	d801      	bhi.n	8007816 <__hexdig_fun+0x1a>
 8007812:	3847      	subs	r0, #71	; 0x47
 8007814:	e7f7      	b.n	8007806 <__hexdig_fun+0xa>
 8007816:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800781a:	2b05      	cmp	r3, #5
 800781c:	d801      	bhi.n	8007822 <__hexdig_fun+0x26>
 800781e:	3827      	subs	r0, #39	; 0x27
 8007820:	e7f1      	b.n	8007806 <__hexdig_fun+0xa>
 8007822:	2000      	movs	r0, #0
 8007824:	4770      	bx	lr
	...

08007828 <__gethex>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	ed2d 8b02 	vpush	{d8}
 8007830:	b089      	sub	sp, #36	; 0x24
 8007832:	ee08 0a10 	vmov	s16, r0
 8007836:	9304      	str	r3, [sp, #16]
 8007838:	4bbc      	ldr	r3, [pc, #752]	; (8007b2c <__gethex+0x304>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	4618      	mov	r0, r3
 8007840:	468b      	mov	fp, r1
 8007842:	4690      	mov	r8, r2
 8007844:	f7f8 fcc4 	bl	80001d0 <strlen>
 8007848:	9b01      	ldr	r3, [sp, #4]
 800784a:	f8db 2000 	ldr.w	r2, [fp]
 800784e:	4403      	add	r3, r0
 8007850:	4682      	mov	sl, r0
 8007852:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007856:	9305      	str	r3, [sp, #20]
 8007858:	1c93      	adds	r3, r2, #2
 800785a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800785e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007862:	32fe      	adds	r2, #254	; 0xfe
 8007864:	18d1      	adds	r1, r2, r3
 8007866:	461f      	mov	r7, r3
 8007868:	f813 0b01 	ldrb.w	r0, [r3], #1
 800786c:	9100      	str	r1, [sp, #0]
 800786e:	2830      	cmp	r0, #48	; 0x30
 8007870:	d0f8      	beq.n	8007864 <__gethex+0x3c>
 8007872:	f7ff ffc3 	bl	80077fc <__hexdig_fun>
 8007876:	4604      	mov	r4, r0
 8007878:	2800      	cmp	r0, #0
 800787a:	d13a      	bne.n	80078f2 <__gethex+0xca>
 800787c:	9901      	ldr	r1, [sp, #4]
 800787e:	4652      	mov	r2, sl
 8007880:	4638      	mov	r0, r7
 8007882:	f001 fd6b 	bl	800935c <strncmp>
 8007886:	4605      	mov	r5, r0
 8007888:	2800      	cmp	r0, #0
 800788a:	d168      	bne.n	800795e <__gethex+0x136>
 800788c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007890:	eb07 060a 	add.w	r6, r7, sl
 8007894:	f7ff ffb2 	bl	80077fc <__hexdig_fun>
 8007898:	2800      	cmp	r0, #0
 800789a:	d062      	beq.n	8007962 <__gethex+0x13a>
 800789c:	4633      	mov	r3, r6
 800789e:	7818      	ldrb	r0, [r3, #0]
 80078a0:	2830      	cmp	r0, #48	; 0x30
 80078a2:	461f      	mov	r7, r3
 80078a4:	f103 0301 	add.w	r3, r3, #1
 80078a8:	d0f9      	beq.n	800789e <__gethex+0x76>
 80078aa:	f7ff ffa7 	bl	80077fc <__hexdig_fun>
 80078ae:	2301      	movs	r3, #1
 80078b0:	fab0 f480 	clz	r4, r0
 80078b4:	0964      	lsrs	r4, r4, #5
 80078b6:	4635      	mov	r5, r6
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	463a      	mov	r2, r7
 80078bc:	4616      	mov	r6, r2
 80078be:	3201      	adds	r2, #1
 80078c0:	7830      	ldrb	r0, [r6, #0]
 80078c2:	f7ff ff9b 	bl	80077fc <__hexdig_fun>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d1f8      	bne.n	80078bc <__gethex+0x94>
 80078ca:	9901      	ldr	r1, [sp, #4]
 80078cc:	4652      	mov	r2, sl
 80078ce:	4630      	mov	r0, r6
 80078d0:	f001 fd44 	bl	800935c <strncmp>
 80078d4:	b980      	cbnz	r0, 80078f8 <__gethex+0xd0>
 80078d6:	b94d      	cbnz	r5, 80078ec <__gethex+0xc4>
 80078d8:	eb06 050a 	add.w	r5, r6, sl
 80078dc:	462a      	mov	r2, r5
 80078de:	4616      	mov	r6, r2
 80078e0:	3201      	adds	r2, #1
 80078e2:	7830      	ldrb	r0, [r6, #0]
 80078e4:	f7ff ff8a 	bl	80077fc <__hexdig_fun>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d1f8      	bne.n	80078de <__gethex+0xb6>
 80078ec:	1bad      	subs	r5, r5, r6
 80078ee:	00ad      	lsls	r5, r5, #2
 80078f0:	e004      	b.n	80078fc <__gethex+0xd4>
 80078f2:	2400      	movs	r4, #0
 80078f4:	4625      	mov	r5, r4
 80078f6:	e7e0      	b.n	80078ba <__gethex+0x92>
 80078f8:	2d00      	cmp	r5, #0
 80078fa:	d1f7      	bne.n	80078ec <__gethex+0xc4>
 80078fc:	7833      	ldrb	r3, [r6, #0]
 80078fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007902:	2b50      	cmp	r3, #80	; 0x50
 8007904:	d13b      	bne.n	800797e <__gethex+0x156>
 8007906:	7873      	ldrb	r3, [r6, #1]
 8007908:	2b2b      	cmp	r3, #43	; 0x2b
 800790a:	d02c      	beq.n	8007966 <__gethex+0x13e>
 800790c:	2b2d      	cmp	r3, #45	; 0x2d
 800790e:	d02e      	beq.n	800796e <__gethex+0x146>
 8007910:	1c71      	adds	r1, r6, #1
 8007912:	f04f 0900 	mov.w	r9, #0
 8007916:	7808      	ldrb	r0, [r1, #0]
 8007918:	f7ff ff70 	bl	80077fc <__hexdig_fun>
 800791c:	1e43      	subs	r3, r0, #1
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b18      	cmp	r3, #24
 8007922:	d82c      	bhi.n	800797e <__gethex+0x156>
 8007924:	f1a0 0210 	sub.w	r2, r0, #16
 8007928:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800792c:	f7ff ff66 	bl	80077fc <__hexdig_fun>
 8007930:	1e43      	subs	r3, r0, #1
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b18      	cmp	r3, #24
 8007936:	d91d      	bls.n	8007974 <__gethex+0x14c>
 8007938:	f1b9 0f00 	cmp.w	r9, #0
 800793c:	d000      	beq.n	8007940 <__gethex+0x118>
 800793e:	4252      	negs	r2, r2
 8007940:	4415      	add	r5, r2
 8007942:	f8cb 1000 	str.w	r1, [fp]
 8007946:	b1e4      	cbz	r4, 8007982 <__gethex+0x15a>
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	bf14      	ite	ne
 800794e:	2700      	movne	r7, #0
 8007950:	2706      	moveq	r7, #6
 8007952:	4638      	mov	r0, r7
 8007954:	b009      	add	sp, #36	; 0x24
 8007956:	ecbd 8b02 	vpop	{d8}
 800795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795e:	463e      	mov	r6, r7
 8007960:	4625      	mov	r5, r4
 8007962:	2401      	movs	r4, #1
 8007964:	e7ca      	b.n	80078fc <__gethex+0xd4>
 8007966:	f04f 0900 	mov.w	r9, #0
 800796a:	1cb1      	adds	r1, r6, #2
 800796c:	e7d3      	b.n	8007916 <__gethex+0xee>
 800796e:	f04f 0901 	mov.w	r9, #1
 8007972:	e7fa      	b.n	800796a <__gethex+0x142>
 8007974:	230a      	movs	r3, #10
 8007976:	fb03 0202 	mla	r2, r3, r2, r0
 800797a:	3a10      	subs	r2, #16
 800797c:	e7d4      	b.n	8007928 <__gethex+0x100>
 800797e:	4631      	mov	r1, r6
 8007980:	e7df      	b.n	8007942 <__gethex+0x11a>
 8007982:	1bf3      	subs	r3, r6, r7
 8007984:	3b01      	subs	r3, #1
 8007986:	4621      	mov	r1, r4
 8007988:	2b07      	cmp	r3, #7
 800798a:	dc0b      	bgt.n	80079a4 <__gethex+0x17c>
 800798c:	ee18 0a10 	vmov	r0, s16
 8007990:	f000 fa90 	bl	8007eb4 <_Balloc>
 8007994:	4604      	mov	r4, r0
 8007996:	b940      	cbnz	r0, 80079aa <__gethex+0x182>
 8007998:	4b65      	ldr	r3, [pc, #404]	; (8007b30 <__gethex+0x308>)
 800799a:	4602      	mov	r2, r0
 800799c:	21de      	movs	r1, #222	; 0xde
 800799e:	4865      	ldr	r0, [pc, #404]	; (8007b34 <__gethex+0x30c>)
 80079a0:	f001 fdb4 	bl	800950c <__assert_func>
 80079a4:	3101      	adds	r1, #1
 80079a6:	105b      	asrs	r3, r3, #1
 80079a8:	e7ee      	b.n	8007988 <__gethex+0x160>
 80079aa:	f100 0914 	add.w	r9, r0, #20
 80079ae:	f04f 0b00 	mov.w	fp, #0
 80079b2:	f1ca 0301 	rsb	r3, sl, #1
 80079b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80079ba:	f8cd b000 	str.w	fp, [sp]
 80079be:	9306      	str	r3, [sp, #24]
 80079c0:	42b7      	cmp	r7, r6
 80079c2:	d340      	bcc.n	8007a46 <__gethex+0x21e>
 80079c4:	9802      	ldr	r0, [sp, #8]
 80079c6:	9b00      	ldr	r3, [sp, #0]
 80079c8:	f840 3b04 	str.w	r3, [r0], #4
 80079cc:	eba0 0009 	sub.w	r0, r0, r9
 80079d0:	1080      	asrs	r0, r0, #2
 80079d2:	0146      	lsls	r6, r0, #5
 80079d4:	6120      	str	r0, [r4, #16]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fb62 	bl	80080a0 <__hi0bits>
 80079dc:	1a30      	subs	r0, r6, r0
 80079de:	f8d8 6000 	ldr.w	r6, [r8]
 80079e2:	42b0      	cmp	r0, r6
 80079e4:	dd63      	ble.n	8007aae <__gethex+0x286>
 80079e6:	1b87      	subs	r7, r0, r6
 80079e8:	4639      	mov	r1, r7
 80079ea:	4620      	mov	r0, r4
 80079ec:	f000 fefc 	bl	80087e8 <__any_on>
 80079f0:	4682      	mov	sl, r0
 80079f2:	b1a8      	cbz	r0, 8007a20 <__gethex+0x1f8>
 80079f4:	1e7b      	subs	r3, r7, #1
 80079f6:	1159      	asrs	r1, r3, #5
 80079f8:	f003 021f 	and.w	r2, r3, #31
 80079fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007a00:	f04f 0a01 	mov.w	sl, #1
 8007a04:	fa0a f202 	lsl.w	r2, sl, r2
 8007a08:	420a      	tst	r2, r1
 8007a0a:	d009      	beq.n	8007a20 <__gethex+0x1f8>
 8007a0c:	4553      	cmp	r3, sl
 8007a0e:	dd05      	ble.n	8007a1c <__gethex+0x1f4>
 8007a10:	1eb9      	subs	r1, r7, #2
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 fee8 	bl	80087e8 <__any_on>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d145      	bne.n	8007aa8 <__gethex+0x280>
 8007a1c:	f04f 0a02 	mov.w	sl, #2
 8007a20:	4639      	mov	r1, r7
 8007a22:	4620      	mov	r0, r4
 8007a24:	f7ff fe98 	bl	8007758 <rshift>
 8007a28:	443d      	add	r5, r7
 8007a2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a2e:	42ab      	cmp	r3, r5
 8007a30:	da4c      	bge.n	8007acc <__gethex+0x2a4>
 8007a32:	ee18 0a10 	vmov	r0, s16
 8007a36:	4621      	mov	r1, r4
 8007a38:	f000 fa7c 	bl	8007f34 <_Bfree>
 8007a3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a3e:	2300      	movs	r3, #0
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	27a3      	movs	r7, #163	; 0xa3
 8007a44:	e785      	b.n	8007952 <__gethex+0x12a>
 8007a46:	1e73      	subs	r3, r6, #1
 8007a48:	9a05      	ldr	r2, [sp, #20]
 8007a4a:	9303      	str	r3, [sp, #12]
 8007a4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d019      	beq.n	8007a88 <__gethex+0x260>
 8007a54:	f1bb 0f20 	cmp.w	fp, #32
 8007a58:	d107      	bne.n	8007a6a <__gethex+0x242>
 8007a5a:	9b02      	ldr	r3, [sp, #8]
 8007a5c:	9a00      	ldr	r2, [sp, #0]
 8007a5e:	f843 2b04 	str.w	r2, [r3], #4
 8007a62:	9302      	str	r3, [sp, #8]
 8007a64:	2300      	movs	r3, #0
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	469b      	mov	fp, r3
 8007a6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a6e:	f7ff fec5 	bl	80077fc <__hexdig_fun>
 8007a72:	9b00      	ldr	r3, [sp, #0]
 8007a74:	f000 000f 	and.w	r0, r0, #15
 8007a78:	fa00 f00b 	lsl.w	r0, r0, fp
 8007a7c:	4303      	orrs	r3, r0
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	f10b 0b04 	add.w	fp, fp, #4
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	e00d      	b.n	8007aa4 <__gethex+0x27c>
 8007a88:	9b03      	ldr	r3, [sp, #12]
 8007a8a:	9a06      	ldr	r2, [sp, #24]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	42bb      	cmp	r3, r7
 8007a90:	d3e0      	bcc.n	8007a54 <__gethex+0x22c>
 8007a92:	4618      	mov	r0, r3
 8007a94:	9901      	ldr	r1, [sp, #4]
 8007a96:	9307      	str	r3, [sp, #28]
 8007a98:	4652      	mov	r2, sl
 8007a9a:	f001 fc5f 	bl	800935c <strncmp>
 8007a9e:	9b07      	ldr	r3, [sp, #28]
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d1d7      	bne.n	8007a54 <__gethex+0x22c>
 8007aa4:	461e      	mov	r6, r3
 8007aa6:	e78b      	b.n	80079c0 <__gethex+0x198>
 8007aa8:	f04f 0a03 	mov.w	sl, #3
 8007aac:	e7b8      	b.n	8007a20 <__gethex+0x1f8>
 8007aae:	da0a      	bge.n	8007ac6 <__gethex+0x29e>
 8007ab0:	1a37      	subs	r7, r6, r0
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	ee18 0a10 	vmov	r0, s16
 8007ab8:	463a      	mov	r2, r7
 8007aba:	f000 fc57 	bl	800836c <__lshift>
 8007abe:	1bed      	subs	r5, r5, r7
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	f100 0914 	add.w	r9, r0, #20
 8007ac6:	f04f 0a00 	mov.w	sl, #0
 8007aca:	e7ae      	b.n	8007a2a <__gethex+0x202>
 8007acc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ad0:	42a8      	cmp	r0, r5
 8007ad2:	dd72      	ble.n	8007bba <__gethex+0x392>
 8007ad4:	1b45      	subs	r5, r0, r5
 8007ad6:	42ae      	cmp	r6, r5
 8007ad8:	dc36      	bgt.n	8007b48 <__gethex+0x320>
 8007ada:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d02a      	beq.n	8007b38 <__gethex+0x310>
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d02c      	beq.n	8007b40 <__gethex+0x318>
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d115      	bne.n	8007b16 <__gethex+0x2ee>
 8007aea:	42ae      	cmp	r6, r5
 8007aec:	d113      	bne.n	8007b16 <__gethex+0x2ee>
 8007aee:	2e01      	cmp	r6, #1
 8007af0:	d10b      	bne.n	8007b0a <__gethex+0x2e2>
 8007af2:	9a04      	ldr	r2, [sp, #16]
 8007af4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	2301      	movs	r3, #1
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	f8c9 3000 	str.w	r3, [r9]
 8007b02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b04:	2762      	movs	r7, #98	; 0x62
 8007b06:	601c      	str	r4, [r3, #0]
 8007b08:	e723      	b.n	8007952 <__gethex+0x12a>
 8007b0a:	1e71      	subs	r1, r6, #1
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 fe6b 	bl	80087e8 <__any_on>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d1ed      	bne.n	8007af2 <__gethex+0x2ca>
 8007b16:	ee18 0a10 	vmov	r0, s16
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	f000 fa0a 	bl	8007f34 <_Bfree>
 8007b20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b22:	2300      	movs	r3, #0
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	2750      	movs	r7, #80	; 0x50
 8007b28:	e713      	b.n	8007952 <__gethex+0x12a>
 8007b2a:	bf00      	nop
 8007b2c:	0800a278 	.word	0x0800a278
 8007b30:	0800a1fc 	.word	0x0800a1fc
 8007b34:	0800a20d 	.word	0x0800a20d
 8007b38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1eb      	bne.n	8007b16 <__gethex+0x2ee>
 8007b3e:	e7d8      	b.n	8007af2 <__gethex+0x2ca>
 8007b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1d5      	bne.n	8007af2 <__gethex+0x2ca>
 8007b46:	e7e6      	b.n	8007b16 <__gethex+0x2ee>
 8007b48:	1e6f      	subs	r7, r5, #1
 8007b4a:	f1ba 0f00 	cmp.w	sl, #0
 8007b4e:	d131      	bne.n	8007bb4 <__gethex+0x38c>
 8007b50:	b127      	cbz	r7, 8007b5c <__gethex+0x334>
 8007b52:	4639      	mov	r1, r7
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fe47 	bl	80087e8 <__any_on>
 8007b5a:	4682      	mov	sl, r0
 8007b5c:	117b      	asrs	r3, r7, #5
 8007b5e:	2101      	movs	r1, #1
 8007b60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b64:	f007 071f 	and.w	r7, r7, #31
 8007b68:	fa01 f707 	lsl.w	r7, r1, r7
 8007b6c:	421f      	tst	r7, r3
 8007b6e:	4629      	mov	r1, r5
 8007b70:	4620      	mov	r0, r4
 8007b72:	bf18      	it	ne
 8007b74:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b78:	1b76      	subs	r6, r6, r5
 8007b7a:	f7ff fded 	bl	8007758 <rshift>
 8007b7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b82:	2702      	movs	r7, #2
 8007b84:	f1ba 0f00 	cmp.w	sl, #0
 8007b88:	d048      	beq.n	8007c1c <__gethex+0x3f4>
 8007b8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d015      	beq.n	8007bbe <__gethex+0x396>
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d017      	beq.n	8007bc6 <__gethex+0x39e>
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d109      	bne.n	8007bae <__gethex+0x386>
 8007b9a:	f01a 0f02 	tst.w	sl, #2
 8007b9e:	d006      	beq.n	8007bae <__gethex+0x386>
 8007ba0:	f8d9 0000 	ldr.w	r0, [r9]
 8007ba4:	ea4a 0a00 	orr.w	sl, sl, r0
 8007ba8:	f01a 0f01 	tst.w	sl, #1
 8007bac:	d10e      	bne.n	8007bcc <__gethex+0x3a4>
 8007bae:	f047 0710 	orr.w	r7, r7, #16
 8007bb2:	e033      	b.n	8007c1c <__gethex+0x3f4>
 8007bb4:	f04f 0a01 	mov.w	sl, #1
 8007bb8:	e7d0      	b.n	8007b5c <__gethex+0x334>
 8007bba:	2701      	movs	r7, #1
 8007bbc:	e7e2      	b.n	8007b84 <__gethex+0x35c>
 8007bbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc0:	f1c3 0301 	rsb	r3, r3, #1
 8007bc4:	9315      	str	r3, [sp, #84]	; 0x54
 8007bc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0f0      	beq.n	8007bae <__gethex+0x386>
 8007bcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007bd0:	f104 0314 	add.w	r3, r4, #20
 8007bd4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007bd8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007bdc:	f04f 0c00 	mov.w	ip, #0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007bea:	d01c      	beq.n	8007c26 <__gethex+0x3fe>
 8007bec:	3201      	adds	r2, #1
 8007bee:	6002      	str	r2, [r0, #0]
 8007bf0:	2f02      	cmp	r7, #2
 8007bf2:	f104 0314 	add.w	r3, r4, #20
 8007bf6:	d13f      	bne.n	8007c78 <__gethex+0x450>
 8007bf8:	f8d8 2000 	ldr.w	r2, [r8]
 8007bfc:	3a01      	subs	r2, #1
 8007bfe:	42b2      	cmp	r2, r6
 8007c00:	d10a      	bne.n	8007c18 <__gethex+0x3f0>
 8007c02:	1171      	asrs	r1, r6, #5
 8007c04:	2201      	movs	r2, #1
 8007c06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c0a:	f006 061f 	and.w	r6, r6, #31
 8007c0e:	fa02 f606 	lsl.w	r6, r2, r6
 8007c12:	421e      	tst	r6, r3
 8007c14:	bf18      	it	ne
 8007c16:	4617      	movne	r7, r2
 8007c18:	f047 0720 	orr.w	r7, r7, #32
 8007c1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c1e:	601c      	str	r4, [r3, #0]
 8007c20:	9b04      	ldr	r3, [sp, #16]
 8007c22:	601d      	str	r5, [r3, #0]
 8007c24:	e695      	b.n	8007952 <__gethex+0x12a>
 8007c26:	4299      	cmp	r1, r3
 8007c28:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c2c:	d8d8      	bhi.n	8007be0 <__gethex+0x3b8>
 8007c2e:	68a3      	ldr	r3, [r4, #8]
 8007c30:	459b      	cmp	fp, r3
 8007c32:	db19      	blt.n	8007c68 <__gethex+0x440>
 8007c34:	6861      	ldr	r1, [r4, #4]
 8007c36:	ee18 0a10 	vmov	r0, s16
 8007c3a:	3101      	adds	r1, #1
 8007c3c:	f000 f93a 	bl	8007eb4 <_Balloc>
 8007c40:	4681      	mov	r9, r0
 8007c42:	b918      	cbnz	r0, 8007c4c <__gethex+0x424>
 8007c44:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <__gethex+0x488>)
 8007c46:	4602      	mov	r2, r0
 8007c48:	2184      	movs	r1, #132	; 0x84
 8007c4a:	e6a8      	b.n	800799e <__gethex+0x176>
 8007c4c:	6922      	ldr	r2, [r4, #16]
 8007c4e:	3202      	adds	r2, #2
 8007c50:	f104 010c 	add.w	r1, r4, #12
 8007c54:	0092      	lsls	r2, r2, #2
 8007c56:	300c      	adds	r0, #12
 8007c58:	f000 f91e 	bl	8007e98 <memcpy>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	ee18 0a10 	vmov	r0, s16
 8007c62:	f000 f967 	bl	8007f34 <_Bfree>
 8007c66:	464c      	mov	r4, r9
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c70:	6122      	str	r2, [r4, #16]
 8007c72:	2201      	movs	r2, #1
 8007c74:	615a      	str	r2, [r3, #20]
 8007c76:	e7bb      	b.n	8007bf0 <__gethex+0x3c8>
 8007c78:	6922      	ldr	r2, [r4, #16]
 8007c7a:	455a      	cmp	r2, fp
 8007c7c:	dd0b      	ble.n	8007c96 <__gethex+0x46e>
 8007c7e:	2101      	movs	r1, #1
 8007c80:	4620      	mov	r0, r4
 8007c82:	f7ff fd69 	bl	8007758 <rshift>
 8007c86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c8a:	3501      	adds	r5, #1
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	f6ff aed0 	blt.w	8007a32 <__gethex+0x20a>
 8007c92:	2701      	movs	r7, #1
 8007c94:	e7c0      	b.n	8007c18 <__gethex+0x3f0>
 8007c96:	f016 061f 	ands.w	r6, r6, #31
 8007c9a:	d0fa      	beq.n	8007c92 <__gethex+0x46a>
 8007c9c:	449a      	add	sl, r3
 8007c9e:	f1c6 0620 	rsb	r6, r6, #32
 8007ca2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007ca6:	f000 f9fb 	bl	80080a0 <__hi0bits>
 8007caa:	42b0      	cmp	r0, r6
 8007cac:	dbe7      	blt.n	8007c7e <__gethex+0x456>
 8007cae:	e7f0      	b.n	8007c92 <__gethex+0x46a>
 8007cb0:	0800a1fc 	.word	0x0800a1fc

08007cb4 <L_shift>:
 8007cb4:	f1c2 0208 	rsb	r2, r2, #8
 8007cb8:	0092      	lsls	r2, r2, #2
 8007cba:	b570      	push	{r4, r5, r6, lr}
 8007cbc:	f1c2 0620 	rsb	r6, r2, #32
 8007cc0:	6843      	ldr	r3, [r0, #4]
 8007cc2:	6804      	ldr	r4, [r0, #0]
 8007cc4:	fa03 f506 	lsl.w	r5, r3, r6
 8007cc8:	432c      	orrs	r4, r5
 8007cca:	40d3      	lsrs	r3, r2
 8007ccc:	6004      	str	r4, [r0, #0]
 8007cce:	f840 3f04 	str.w	r3, [r0, #4]!
 8007cd2:	4288      	cmp	r0, r1
 8007cd4:	d3f4      	bcc.n	8007cc0 <L_shift+0xc>
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}

08007cd8 <__match>:
 8007cd8:	b530      	push	{r4, r5, lr}
 8007cda:	6803      	ldr	r3, [r0, #0]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ce2:	b914      	cbnz	r4, 8007cea <__match+0x12>
 8007ce4:	6003      	str	r3, [r0, #0]
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	bd30      	pop	{r4, r5, pc}
 8007cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007cf2:	2d19      	cmp	r5, #25
 8007cf4:	bf98      	it	ls
 8007cf6:	3220      	addls	r2, #32
 8007cf8:	42a2      	cmp	r2, r4
 8007cfa:	d0f0      	beq.n	8007cde <__match+0x6>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e7f3      	b.n	8007ce8 <__match+0x10>

08007d00 <__hexnan>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	680b      	ldr	r3, [r1, #0]
 8007d06:	6801      	ldr	r1, [r0, #0]
 8007d08:	115e      	asrs	r6, r3, #5
 8007d0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d0e:	f013 031f 	ands.w	r3, r3, #31
 8007d12:	b087      	sub	sp, #28
 8007d14:	bf18      	it	ne
 8007d16:	3604      	addne	r6, #4
 8007d18:	2500      	movs	r5, #0
 8007d1a:	1f37      	subs	r7, r6, #4
 8007d1c:	4682      	mov	sl, r0
 8007d1e:	4690      	mov	r8, r2
 8007d20:	9301      	str	r3, [sp, #4]
 8007d22:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d26:	46b9      	mov	r9, r7
 8007d28:	463c      	mov	r4, r7
 8007d2a:	9502      	str	r5, [sp, #8]
 8007d2c:	46ab      	mov	fp, r5
 8007d2e:	784a      	ldrb	r2, [r1, #1]
 8007d30:	1c4b      	adds	r3, r1, #1
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	b342      	cbz	r2, 8007d88 <__hexnan+0x88>
 8007d36:	4610      	mov	r0, r2
 8007d38:	9105      	str	r1, [sp, #20]
 8007d3a:	9204      	str	r2, [sp, #16]
 8007d3c:	f7ff fd5e 	bl	80077fc <__hexdig_fun>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d14f      	bne.n	8007de4 <__hexnan+0xe4>
 8007d44:	9a04      	ldr	r2, [sp, #16]
 8007d46:	9905      	ldr	r1, [sp, #20]
 8007d48:	2a20      	cmp	r2, #32
 8007d4a:	d818      	bhi.n	8007d7e <__hexnan+0x7e>
 8007d4c:	9b02      	ldr	r3, [sp, #8]
 8007d4e:	459b      	cmp	fp, r3
 8007d50:	dd13      	ble.n	8007d7a <__hexnan+0x7a>
 8007d52:	454c      	cmp	r4, r9
 8007d54:	d206      	bcs.n	8007d64 <__hexnan+0x64>
 8007d56:	2d07      	cmp	r5, #7
 8007d58:	dc04      	bgt.n	8007d64 <__hexnan+0x64>
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f7ff ffa8 	bl	8007cb4 <L_shift>
 8007d64:	4544      	cmp	r4, r8
 8007d66:	d950      	bls.n	8007e0a <__hexnan+0x10a>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f1a4 0904 	sub.w	r9, r4, #4
 8007d6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d72:	f8cd b008 	str.w	fp, [sp, #8]
 8007d76:	464c      	mov	r4, r9
 8007d78:	461d      	mov	r5, r3
 8007d7a:	9903      	ldr	r1, [sp, #12]
 8007d7c:	e7d7      	b.n	8007d2e <__hexnan+0x2e>
 8007d7e:	2a29      	cmp	r2, #41	; 0x29
 8007d80:	d156      	bne.n	8007e30 <__hexnan+0x130>
 8007d82:	3102      	adds	r1, #2
 8007d84:	f8ca 1000 	str.w	r1, [sl]
 8007d88:	f1bb 0f00 	cmp.w	fp, #0
 8007d8c:	d050      	beq.n	8007e30 <__hexnan+0x130>
 8007d8e:	454c      	cmp	r4, r9
 8007d90:	d206      	bcs.n	8007da0 <__hexnan+0xa0>
 8007d92:	2d07      	cmp	r5, #7
 8007d94:	dc04      	bgt.n	8007da0 <__hexnan+0xa0>
 8007d96:	462a      	mov	r2, r5
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f7ff ff8a 	bl	8007cb4 <L_shift>
 8007da0:	4544      	cmp	r4, r8
 8007da2:	d934      	bls.n	8007e0e <__hexnan+0x10e>
 8007da4:	f1a8 0204 	sub.w	r2, r8, #4
 8007da8:	4623      	mov	r3, r4
 8007daa:	f853 1b04 	ldr.w	r1, [r3], #4
 8007dae:	f842 1f04 	str.w	r1, [r2, #4]!
 8007db2:	429f      	cmp	r7, r3
 8007db4:	d2f9      	bcs.n	8007daa <__hexnan+0xaa>
 8007db6:	1b3b      	subs	r3, r7, r4
 8007db8:	f023 0303 	bic.w	r3, r3, #3
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	3401      	adds	r4, #1
 8007dc0:	3e03      	subs	r6, #3
 8007dc2:	42b4      	cmp	r4, r6
 8007dc4:	bf88      	it	hi
 8007dc6:	2304      	movhi	r3, #4
 8007dc8:	4443      	add	r3, r8
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f843 2b04 	str.w	r2, [r3], #4
 8007dd0:	429f      	cmp	r7, r3
 8007dd2:	d2fb      	bcs.n	8007dcc <__hexnan+0xcc>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	b91b      	cbnz	r3, 8007de0 <__hexnan+0xe0>
 8007dd8:	4547      	cmp	r7, r8
 8007dda:	d127      	bne.n	8007e2c <__hexnan+0x12c>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	603b      	str	r3, [r7, #0]
 8007de0:	2005      	movs	r0, #5
 8007de2:	e026      	b.n	8007e32 <__hexnan+0x132>
 8007de4:	3501      	adds	r5, #1
 8007de6:	2d08      	cmp	r5, #8
 8007de8:	f10b 0b01 	add.w	fp, fp, #1
 8007dec:	dd06      	ble.n	8007dfc <__hexnan+0xfc>
 8007dee:	4544      	cmp	r4, r8
 8007df0:	d9c3      	bls.n	8007d7a <__hexnan+0x7a>
 8007df2:	2300      	movs	r3, #0
 8007df4:	f844 3c04 	str.w	r3, [r4, #-4]
 8007df8:	2501      	movs	r5, #1
 8007dfa:	3c04      	subs	r4, #4
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	f000 000f 	and.w	r0, r0, #15
 8007e02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007e06:	6022      	str	r2, [r4, #0]
 8007e08:	e7b7      	b.n	8007d7a <__hexnan+0x7a>
 8007e0a:	2508      	movs	r5, #8
 8007e0c:	e7b5      	b.n	8007d7a <__hexnan+0x7a>
 8007e0e:	9b01      	ldr	r3, [sp, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0df      	beq.n	8007dd4 <__hexnan+0xd4>
 8007e14:	f04f 32ff 	mov.w	r2, #4294967295
 8007e18:	f1c3 0320 	rsb	r3, r3, #32
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e24:	401a      	ands	r2, r3
 8007e26:	f846 2c04 	str.w	r2, [r6, #-4]
 8007e2a:	e7d3      	b.n	8007dd4 <__hexnan+0xd4>
 8007e2c:	3f04      	subs	r7, #4
 8007e2e:	e7d1      	b.n	8007dd4 <__hexnan+0xd4>
 8007e30:	2004      	movs	r0, #4
 8007e32:	b007      	add	sp, #28
 8007e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e38 <_localeconv_r>:
 8007e38:	4800      	ldr	r0, [pc, #0]	; (8007e3c <_localeconv_r+0x4>)
 8007e3a:	4770      	bx	lr
 8007e3c:	20000168 	.word	0x20000168

08007e40 <_lseek_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d07      	ldr	r5, [pc, #28]	; (8007e60 <_lseek_r+0x20>)
 8007e44:	4604      	mov	r4, r0
 8007e46:	4608      	mov	r0, r1
 8007e48:	4611      	mov	r1, r2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	602a      	str	r2, [r5, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f7f9 ff86 	bl	8001d60 <_lseek>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_lseek_r+0x1e>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_lseek_r+0x1e>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	200003b8 	.word	0x200003b8

08007e64 <malloc>:
 8007e64:	4b02      	ldr	r3, [pc, #8]	; (8007e70 <malloc+0xc>)
 8007e66:	4601      	mov	r1, r0
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	f000 bd3d 	b.w	80088e8 <_malloc_r>
 8007e6e:	bf00      	nop
 8007e70:	20000010 	.word	0x20000010

08007e74 <__ascii_mbtowc>:
 8007e74:	b082      	sub	sp, #8
 8007e76:	b901      	cbnz	r1, 8007e7a <__ascii_mbtowc+0x6>
 8007e78:	a901      	add	r1, sp, #4
 8007e7a:	b142      	cbz	r2, 8007e8e <__ascii_mbtowc+0x1a>
 8007e7c:	b14b      	cbz	r3, 8007e92 <__ascii_mbtowc+0x1e>
 8007e7e:	7813      	ldrb	r3, [r2, #0]
 8007e80:	600b      	str	r3, [r1, #0]
 8007e82:	7812      	ldrb	r2, [r2, #0]
 8007e84:	1e10      	subs	r0, r2, #0
 8007e86:	bf18      	it	ne
 8007e88:	2001      	movne	r0, #1
 8007e8a:	b002      	add	sp, #8
 8007e8c:	4770      	bx	lr
 8007e8e:	4610      	mov	r0, r2
 8007e90:	e7fb      	b.n	8007e8a <__ascii_mbtowc+0x16>
 8007e92:	f06f 0001 	mvn.w	r0, #1
 8007e96:	e7f8      	b.n	8007e8a <__ascii_mbtowc+0x16>

08007e98 <memcpy>:
 8007e98:	440a      	add	r2, r1
 8007e9a:	4291      	cmp	r1, r2
 8007e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ea0:	d100      	bne.n	8007ea4 <memcpy+0xc>
 8007ea2:	4770      	bx	lr
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eae:	4291      	cmp	r1, r2
 8007eb0:	d1f9      	bne.n	8007ea6 <memcpy+0xe>
 8007eb2:	bd10      	pop	{r4, pc}

08007eb4 <_Balloc>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007eb8:	4604      	mov	r4, r0
 8007eba:	460d      	mov	r5, r1
 8007ebc:	b976      	cbnz	r6, 8007edc <_Balloc+0x28>
 8007ebe:	2010      	movs	r0, #16
 8007ec0:	f7ff ffd0 	bl	8007e64 <malloc>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6260      	str	r0, [r4, #36]	; 0x24
 8007ec8:	b920      	cbnz	r0, 8007ed4 <_Balloc+0x20>
 8007eca:	4b18      	ldr	r3, [pc, #96]	; (8007f2c <_Balloc+0x78>)
 8007ecc:	4818      	ldr	r0, [pc, #96]	; (8007f30 <_Balloc+0x7c>)
 8007ece:	2166      	movs	r1, #102	; 0x66
 8007ed0:	f001 fb1c 	bl	800950c <__assert_func>
 8007ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ed8:	6006      	str	r6, [r0, #0]
 8007eda:	60c6      	str	r6, [r0, #12]
 8007edc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ede:	68f3      	ldr	r3, [r6, #12]
 8007ee0:	b183      	cbz	r3, 8007f04 <_Balloc+0x50>
 8007ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007eea:	b9b8      	cbnz	r0, 8007f1c <_Balloc+0x68>
 8007eec:	2101      	movs	r1, #1
 8007eee:	fa01 f605 	lsl.w	r6, r1, r5
 8007ef2:	1d72      	adds	r2, r6, #5
 8007ef4:	0092      	lsls	r2, r2, #2
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 fc97 	bl	800882a <_calloc_r>
 8007efc:	b160      	cbz	r0, 8007f18 <_Balloc+0x64>
 8007efe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f02:	e00e      	b.n	8007f22 <_Balloc+0x6e>
 8007f04:	2221      	movs	r2, #33	; 0x21
 8007f06:	2104      	movs	r1, #4
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fc8e 	bl	800882a <_calloc_r>
 8007f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f10:	60f0      	str	r0, [r6, #12]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e4      	bne.n	8007ee2 <_Balloc+0x2e>
 8007f18:	2000      	movs	r0, #0
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	6802      	ldr	r2, [r0, #0]
 8007f1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f22:	2300      	movs	r3, #0
 8007f24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f28:	e7f7      	b.n	8007f1a <_Balloc+0x66>
 8007f2a:	bf00      	nop
 8007f2c:	0800a186 	.word	0x0800a186
 8007f30:	0800a28c 	.word	0x0800a28c

08007f34 <_Bfree>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f38:	4605      	mov	r5, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	b976      	cbnz	r6, 8007f5c <_Bfree+0x28>
 8007f3e:	2010      	movs	r0, #16
 8007f40:	f7ff ff90 	bl	8007e64 <malloc>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6268      	str	r0, [r5, #36]	; 0x24
 8007f48:	b920      	cbnz	r0, 8007f54 <_Bfree+0x20>
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <_Bfree+0x3c>)
 8007f4c:	4809      	ldr	r0, [pc, #36]	; (8007f74 <_Bfree+0x40>)
 8007f4e:	218a      	movs	r1, #138	; 0x8a
 8007f50:	f001 fadc 	bl	800950c <__assert_func>
 8007f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f58:	6006      	str	r6, [r0, #0]
 8007f5a:	60c6      	str	r6, [r0, #12]
 8007f5c:	b13c      	cbz	r4, 8007f6e <_Bfree+0x3a>
 8007f5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f60:	6862      	ldr	r2, [r4, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f68:	6021      	str	r1, [r4, #0]
 8007f6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	0800a186 	.word	0x0800a186
 8007f74:	0800a28c 	.word	0x0800a28c

08007f78 <__multadd>:
 8007f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7c:	690e      	ldr	r6, [r1, #16]
 8007f7e:	4607      	mov	r7, r0
 8007f80:	4698      	mov	r8, r3
 8007f82:	460c      	mov	r4, r1
 8007f84:	f101 0014 	add.w	r0, r1, #20
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6805      	ldr	r5, [r0, #0]
 8007f8c:	b2a9      	uxth	r1, r5
 8007f8e:	fb02 8101 	mla	r1, r2, r1, r8
 8007f92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007f96:	0c2d      	lsrs	r5, r5, #16
 8007f98:	fb02 c505 	mla	r5, r2, r5, ip
 8007f9c:	b289      	uxth	r1, r1
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007fa4:	429e      	cmp	r6, r3
 8007fa6:	f840 1b04 	str.w	r1, [r0], #4
 8007faa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007fae:	dcec      	bgt.n	8007f8a <__multadd+0x12>
 8007fb0:	f1b8 0f00 	cmp.w	r8, #0
 8007fb4:	d022      	beq.n	8007ffc <__multadd+0x84>
 8007fb6:	68a3      	ldr	r3, [r4, #8]
 8007fb8:	42b3      	cmp	r3, r6
 8007fba:	dc19      	bgt.n	8007ff0 <__multadd+0x78>
 8007fbc:	6861      	ldr	r1, [r4, #4]
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	3101      	adds	r1, #1
 8007fc2:	f7ff ff77 	bl	8007eb4 <_Balloc>
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	b928      	cbnz	r0, 8007fd6 <__multadd+0x5e>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <__multadd+0x8c>)
 8007fce:	480e      	ldr	r0, [pc, #56]	; (8008008 <__multadd+0x90>)
 8007fd0:	21b5      	movs	r1, #181	; 0xb5
 8007fd2:	f001 fa9b 	bl	800950c <__assert_func>
 8007fd6:	6922      	ldr	r2, [r4, #16]
 8007fd8:	3202      	adds	r2, #2
 8007fda:	f104 010c 	add.w	r1, r4, #12
 8007fde:	0092      	lsls	r2, r2, #2
 8007fe0:	300c      	adds	r0, #12
 8007fe2:	f7ff ff59 	bl	8007e98 <memcpy>
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f7ff ffa3 	bl	8007f34 <_Bfree>
 8007fee:	462c      	mov	r4, r5
 8007ff0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	f8c3 8014 	str.w	r8, [r3, #20]
 8007ffa:	6126      	str	r6, [r4, #16]
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008002:	bf00      	nop
 8008004:	0800a1fc 	.word	0x0800a1fc
 8008008:	0800a28c 	.word	0x0800a28c

0800800c <__s2b>:
 800800c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008010:	460c      	mov	r4, r1
 8008012:	4615      	mov	r5, r2
 8008014:	461f      	mov	r7, r3
 8008016:	2209      	movs	r2, #9
 8008018:	3308      	adds	r3, #8
 800801a:	4606      	mov	r6, r0
 800801c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008020:	2100      	movs	r1, #0
 8008022:	2201      	movs	r2, #1
 8008024:	429a      	cmp	r2, r3
 8008026:	db09      	blt.n	800803c <__s2b+0x30>
 8008028:	4630      	mov	r0, r6
 800802a:	f7ff ff43 	bl	8007eb4 <_Balloc>
 800802e:	b940      	cbnz	r0, 8008042 <__s2b+0x36>
 8008030:	4602      	mov	r2, r0
 8008032:	4b19      	ldr	r3, [pc, #100]	; (8008098 <__s2b+0x8c>)
 8008034:	4819      	ldr	r0, [pc, #100]	; (800809c <__s2b+0x90>)
 8008036:	21ce      	movs	r1, #206	; 0xce
 8008038:	f001 fa68 	bl	800950c <__assert_func>
 800803c:	0052      	lsls	r2, r2, #1
 800803e:	3101      	adds	r1, #1
 8008040:	e7f0      	b.n	8008024 <__s2b+0x18>
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	6143      	str	r3, [r0, #20]
 8008046:	2d09      	cmp	r5, #9
 8008048:	f04f 0301 	mov.w	r3, #1
 800804c:	6103      	str	r3, [r0, #16]
 800804e:	dd16      	ble.n	800807e <__s2b+0x72>
 8008050:	f104 0909 	add.w	r9, r4, #9
 8008054:	46c8      	mov	r8, r9
 8008056:	442c      	add	r4, r5
 8008058:	f818 3b01 	ldrb.w	r3, [r8], #1
 800805c:	4601      	mov	r1, r0
 800805e:	3b30      	subs	r3, #48	; 0x30
 8008060:	220a      	movs	r2, #10
 8008062:	4630      	mov	r0, r6
 8008064:	f7ff ff88 	bl	8007f78 <__multadd>
 8008068:	45a0      	cmp	r8, r4
 800806a:	d1f5      	bne.n	8008058 <__s2b+0x4c>
 800806c:	f1a5 0408 	sub.w	r4, r5, #8
 8008070:	444c      	add	r4, r9
 8008072:	1b2d      	subs	r5, r5, r4
 8008074:	1963      	adds	r3, r4, r5
 8008076:	42bb      	cmp	r3, r7
 8008078:	db04      	blt.n	8008084 <__s2b+0x78>
 800807a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800807e:	340a      	adds	r4, #10
 8008080:	2509      	movs	r5, #9
 8008082:	e7f6      	b.n	8008072 <__s2b+0x66>
 8008084:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008088:	4601      	mov	r1, r0
 800808a:	3b30      	subs	r3, #48	; 0x30
 800808c:	220a      	movs	r2, #10
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff ff72 	bl	8007f78 <__multadd>
 8008094:	e7ee      	b.n	8008074 <__s2b+0x68>
 8008096:	bf00      	nop
 8008098:	0800a1fc 	.word	0x0800a1fc
 800809c:	0800a28c 	.word	0x0800a28c

080080a0 <__hi0bits>:
 80080a0:	0c03      	lsrs	r3, r0, #16
 80080a2:	041b      	lsls	r3, r3, #16
 80080a4:	b9d3      	cbnz	r3, 80080dc <__hi0bits+0x3c>
 80080a6:	0400      	lsls	r0, r0, #16
 80080a8:	2310      	movs	r3, #16
 80080aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080ae:	bf04      	itt	eq
 80080b0:	0200      	lsleq	r0, r0, #8
 80080b2:	3308      	addeq	r3, #8
 80080b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80080b8:	bf04      	itt	eq
 80080ba:	0100      	lsleq	r0, r0, #4
 80080bc:	3304      	addeq	r3, #4
 80080be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80080c2:	bf04      	itt	eq
 80080c4:	0080      	lsleq	r0, r0, #2
 80080c6:	3302      	addeq	r3, #2
 80080c8:	2800      	cmp	r0, #0
 80080ca:	db05      	blt.n	80080d8 <__hi0bits+0x38>
 80080cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80080d0:	f103 0301 	add.w	r3, r3, #1
 80080d4:	bf08      	it	eq
 80080d6:	2320      	moveq	r3, #32
 80080d8:	4618      	mov	r0, r3
 80080da:	4770      	bx	lr
 80080dc:	2300      	movs	r3, #0
 80080de:	e7e4      	b.n	80080aa <__hi0bits+0xa>

080080e0 <__lo0bits>:
 80080e0:	6803      	ldr	r3, [r0, #0]
 80080e2:	f013 0207 	ands.w	r2, r3, #7
 80080e6:	4601      	mov	r1, r0
 80080e8:	d00b      	beq.n	8008102 <__lo0bits+0x22>
 80080ea:	07da      	lsls	r2, r3, #31
 80080ec:	d424      	bmi.n	8008138 <__lo0bits+0x58>
 80080ee:	0798      	lsls	r0, r3, #30
 80080f0:	bf49      	itett	mi
 80080f2:	085b      	lsrmi	r3, r3, #1
 80080f4:	089b      	lsrpl	r3, r3, #2
 80080f6:	2001      	movmi	r0, #1
 80080f8:	600b      	strmi	r3, [r1, #0]
 80080fa:	bf5c      	itt	pl
 80080fc:	600b      	strpl	r3, [r1, #0]
 80080fe:	2002      	movpl	r0, #2
 8008100:	4770      	bx	lr
 8008102:	b298      	uxth	r0, r3
 8008104:	b9b0      	cbnz	r0, 8008134 <__lo0bits+0x54>
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	2010      	movs	r0, #16
 800810a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800810e:	bf04      	itt	eq
 8008110:	0a1b      	lsreq	r3, r3, #8
 8008112:	3008      	addeq	r0, #8
 8008114:	071a      	lsls	r2, r3, #28
 8008116:	bf04      	itt	eq
 8008118:	091b      	lsreq	r3, r3, #4
 800811a:	3004      	addeq	r0, #4
 800811c:	079a      	lsls	r2, r3, #30
 800811e:	bf04      	itt	eq
 8008120:	089b      	lsreq	r3, r3, #2
 8008122:	3002      	addeq	r0, #2
 8008124:	07da      	lsls	r2, r3, #31
 8008126:	d403      	bmi.n	8008130 <__lo0bits+0x50>
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	f100 0001 	add.w	r0, r0, #1
 800812e:	d005      	beq.n	800813c <__lo0bits+0x5c>
 8008130:	600b      	str	r3, [r1, #0]
 8008132:	4770      	bx	lr
 8008134:	4610      	mov	r0, r2
 8008136:	e7e8      	b.n	800810a <__lo0bits+0x2a>
 8008138:	2000      	movs	r0, #0
 800813a:	4770      	bx	lr
 800813c:	2020      	movs	r0, #32
 800813e:	4770      	bx	lr

08008140 <__i2b>:
 8008140:	b510      	push	{r4, lr}
 8008142:	460c      	mov	r4, r1
 8008144:	2101      	movs	r1, #1
 8008146:	f7ff feb5 	bl	8007eb4 <_Balloc>
 800814a:	4602      	mov	r2, r0
 800814c:	b928      	cbnz	r0, 800815a <__i2b+0x1a>
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <__i2b+0x24>)
 8008150:	4805      	ldr	r0, [pc, #20]	; (8008168 <__i2b+0x28>)
 8008152:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008156:	f001 f9d9 	bl	800950c <__assert_func>
 800815a:	2301      	movs	r3, #1
 800815c:	6144      	str	r4, [r0, #20]
 800815e:	6103      	str	r3, [r0, #16]
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	0800a1fc 	.word	0x0800a1fc
 8008168:	0800a28c 	.word	0x0800a28c

0800816c <__multiply>:
 800816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008170:	4614      	mov	r4, r2
 8008172:	690a      	ldr	r2, [r1, #16]
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	429a      	cmp	r2, r3
 8008178:	bfb8      	it	lt
 800817a:	460b      	movlt	r3, r1
 800817c:	460d      	mov	r5, r1
 800817e:	bfbc      	itt	lt
 8008180:	4625      	movlt	r5, r4
 8008182:	461c      	movlt	r4, r3
 8008184:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008188:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800818c:	68ab      	ldr	r3, [r5, #8]
 800818e:	6869      	ldr	r1, [r5, #4]
 8008190:	eb0a 0709 	add.w	r7, sl, r9
 8008194:	42bb      	cmp	r3, r7
 8008196:	b085      	sub	sp, #20
 8008198:	bfb8      	it	lt
 800819a:	3101      	addlt	r1, #1
 800819c:	f7ff fe8a 	bl	8007eb4 <_Balloc>
 80081a0:	b930      	cbnz	r0, 80081b0 <__multiply+0x44>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b42      	ldr	r3, [pc, #264]	; (80082b0 <__multiply+0x144>)
 80081a6:	4843      	ldr	r0, [pc, #268]	; (80082b4 <__multiply+0x148>)
 80081a8:	f240 115d 	movw	r1, #349	; 0x15d
 80081ac:	f001 f9ae 	bl	800950c <__assert_func>
 80081b0:	f100 0614 	add.w	r6, r0, #20
 80081b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80081b8:	4633      	mov	r3, r6
 80081ba:	2200      	movs	r2, #0
 80081bc:	4543      	cmp	r3, r8
 80081be:	d31e      	bcc.n	80081fe <__multiply+0x92>
 80081c0:	f105 0c14 	add.w	ip, r5, #20
 80081c4:	f104 0314 	add.w	r3, r4, #20
 80081c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80081cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80081d0:	9202      	str	r2, [sp, #8]
 80081d2:	ebac 0205 	sub.w	r2, ip, r5
 80081d6:	3a15      	subs	r2, #21
 80081d8:	f022 0203 	bic.w	r2, r2, #3
 80081dc:	3204      	adds	r2, #4
 80081de:	f105 0115 	add.w	r1, r5, #21
 80081e2:	458c      	cmp	ip, r1
 80081e4:	bf38      	it	cc
 80081e6:	2204      	movcc	r2, #4
 80081e8:	9201      	str	r2, [sp, #4]
 80081ea:	9a02      	ldr	r2, [sp, #8]
 80081ec:	9303      	str	r3, [sp, #12]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d808      	bhi.n	8008204 <__multiply+0x98>
 80081f2:	2f00      	cmp	r7, #0
 80081f4:	dc55      	bgt.n	80082a2 <__multiply+0x136>
 80081f6:	6107      	str	r7, [r0, #16]
 80081f8:	b005      	add	sp, #20
 80081fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fe:	f843 2b04 	str.w	r2, [r3], #4
 8008202:	e7db      	b.n	80081bc <__multiply+0x50>
 8008204:	f8b3 a000 	ldrh.w	sl, [r3]
 8008208:	f1ba 0f00 	cmp.w	sl, #0
 800820c:	d020      	beq.n	8008250 <__multiply+0xe4>
 800820e:	f105 0e14 	add.w	lr, r5, #20
 8008212:	46b1      	mov	r9, r6
 8008214:	2200      	movs	r2, #0
 8008216:	f85e 4b04 	ldr.w	r4, [lr], #4
 800821a:	f8d9 b000 	ldr.w	fp, [r9]
 800821e:	b2a1      	uxth	r1, r4
 8008220:	fa1f fb8b 	uxth.w	fp, fp
 8008224:	fb0a b101 	mla	r1, sl, r1, fp
 8008228:	4411      	add	r1, r2
 800822a:	f8d9 2000 	ldr.w	r2, [r9]
 800822e:	0c24      	lsrs	r4, r4, #16
 8008230:	0c12      	lsrs	r2, r2, #16
 8008232:	fb0a 2404 	mla	r4, sl, r4, r2
 8008236:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800823a:	b289      	uxth	r1, r1
 800823c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008240:	45f4      	cmp	ip, lr
 8008242:	f849 1b04 	str.w	r1, [r9], #4
 8008246:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800824a:	d8e4      	bhi.n	8008216 <__multiply+0xaa>
 800824c:	9901      	ldr	r1, [sp, #4]
 800824e:	5072      	str	r2, [r6, r1]
 8008250:	9a03      	ldr	r2, [sp, #12]
 8008252:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008256:	3304      	adds	r3, #4
 8008258:	f1b9 0f00 	cmp.w	r9, #0
 800825c:	d01f      	beq.n	800829e <__multiply+0x132>
 800825e:	6834      	ldr	r4, [r6, #0]
 8008260:	f105 0114 	add.w	r1, r5, #20
 8008264:	46b6      	mov	lr, r6
 8008266:	f04f 0a00 	mov.w	sl, #0
 800826a:	880a      	ldrh	r2, [r1, #0]
 800826c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008270:	fb09 b202 	mla	r2, r9, r2, fp
 8008274:	4492      	add	sl, r2
 8008276:	b2a4      	uxth	r4, r4
 8008278:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800827c:	f84e 4b04 	str.w	r4, [lr], #4
 8008280:	f851 4b04 	ldr.w	r4, [r1], #4
 8008284:	f8be 2000 	ldrh.w	r2, [lr]
 8008288:	0c24      	lsrs	r4, r4, #16
 800828a:	fb09 2404 	mla	r4, r9, r4, r2
 800828e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008292:	458c      	cmp	ip, r1
 8008294:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008298:	d8e7      	bhi.n	800826a <__multiply+0xfe>
 800829a:	9a01      	ldr	r2, [sp, #4]
 800829c:	50b4      	str	r4, [r6, r2]
 800829e:	3604      	adds	r6, #4
 80082a0:	e7a3      	b.n	80081ea <__multiply+0x7e>
 80082a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1a5      	bne.n	80081f6 <__multiply+0x8a>
 80082aa:	3f01      	subs	r7, #1
 80082ac:	e7a1      	b.n	80081f2 <__multiply+0x86>
 80082ae:	bf00      	nop
 80082b0:	0800a1fc 	.word	0x0800a1fc
 80082b4:	0800a28c 	.word	0x0800a28c

080082b8 <__pow5mult>:
 80082b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082bc:	4615      	mov	r5, r2
 80082be:	f012 0203 	ands.w	r2, r2, #3
 80082c2:	4606      	mov	r6, r0
 80082c4:	460f      	mov	r7, r1
 80082c6:	d007      	beq.n	80082d8 <__pow5mult+0x20>
 80082c8:	4c25      	ldr	r4, [pc, #148]	; (8008360 <__pow5mult+0xa8>)
 80082ca:	3a01      	subs	r2, #1
 80082cc:	2300      	movs	r3, #0
 80082ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082d2:	f7ff fe51 	bl	8007f78 <__multadd>
 80082d6:	4607      	mov	r7, r0
 80082d8:	10ad      	asrs	r5, r5, #2
 80082da:	d03d      	beq.n	8008358 <__pow5mult+0xa0>
 80082dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082de:	b97c      	cbnz	r4, 8008300 <__pow5mult+0x48>
 80082e0:	2010      	movs	r0, #16
 80082e2:	f7ff fdbf 	bl	8007e64 <malloc>
 80082e6:	4602      	mov	r2, r0
 80082e8:	6270      	str	r0, [r6, #36]	; 0x24
 80082ea:	b928      	cbnz	r0, 80082f8 <__pow5mult+0x40>
 80082ec:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <__pow5mult+0xac>)
 80082ee:	481e      	ldr	r0, [pc, #120]	; (8008368 <__pow5mult+0xb0>)
 80082f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082f4:	f001 f90a 	bl	800950c <__assert_func>
 80082f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082fc:	6004      	str	r4, [r0, #0]
 80082fe:	60c4      	str	r4, [r0, #12]
 8008300:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008308:	b94c      	cbnz	r4, 800831e <__pow5mult+0x66>
 800830a:	f240 2171 	movw	r1, #625	; 0x271
 800830e:	4630      	mov	r0, r6
 8008310:	f7ff ff16 	bl	8008140 <__i2b>
 8008314:	2300      	movs	r3, #0
 8008316:	f8c8 0008 	str.w	r0, [r8, #8]
 800831a:	4604      	mov	r4, r0
 800831c:	6003      	str	r3, [r0, #0]
 800831e:	f04f 0900 	mov.w	r9, #0
 8008322:	07eb      	lsls	r3, r5, #31
 8008324:	d50a      	bpl.n	800833c <__pow5mult+0x84>
 8008326:	4639      	mov	r1, r7
 8008328:	4622      	mov	r2, r4
 800832a:	4630      	mov	r0, r6
 800832c:	f7ff ff1e 	bl	800816c <__multiply>
 8008330:	4639      	mov	r1, r7
 8008332:	4680      	mov	r8, r0
 8008334:	4630      	mov	r0, r6
 8008336:	f7ff fdfd 	bl	8007f34 <_Bfree>
 800833a:	4647      	mov	r7, r8
 800833c:	106d      	asrs	r5, r5, #1
 800833e:	d00b      	beq.n	8008358 <__pow5mult+0xa0>
 8008340:	6820      	ldr	r0, [r4, #0]
 8008342:	b938      	cbnz	r0, 8008354 <__pow5mult+0x9c>
 8008344:	4622      	mov	r2, r4
 8008346:	4621      	mov	r1, r4
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff ff0f 	bl	800816c <__multiply>
 800834e:	6020      	str	r0, [r4, #0]
 8008350:	f8c0 9000 	str.w	r9, [r0]
 8008354:	4604      	mov	r4, r0
 8008356:	e7e4      	b.n	8008322 <__pow5mult+0x6a>
 8008358:	4638      	mov	r0, r7
 800835a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835e:	bf00      	nop
 8008360:	0800a3e0 	.word	0x0800a3e0
 8008364:	0800a186 	.word	0x0800a186
 8008368:	0800a28c 	.word	0x0800a28c

0800836c <__lshift>:
 800836c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	460c      	mov	r4, r1
 8008372:	6849      	ldr	r1, [r1, #4]
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800837a:	68a3      	ldr	r3, [r4, #8]
 800837c:	4607      	mov	r7, r0
 800837e:	4691      	mov	r9, r2
 8008380:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008384:	f108 0601 	add.w	r6, r8, #1
 8008388:	42b3      	cmp	r3, r6
 800838a:	db0b      	blt.n	80083a4 <__lshift+0x38>
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff fd91 	bl	8007eb4 <_Balloc>
 8008392:	4605      	mov	r5, r0
 8008394:	b948      	cbnz	r0, 80083aa <__lshift+0x3e>
 8008396:	4602      	mov	r2, r0
 8008398:	4b28      	ldr	r3, [pc, #160]	; (800843c <__lshift+0xd0>)
 800839a:	4829      	ldr	r0, [pc, #164]	; (8008440 <__lshift+0xd4>)
 800839c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083a0:	f001 f8b4 	bl	800950c <__assert_func>
 80083a4:	3101      	adds	r1, #1
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	e7ee      	b.n	8008388 <__lshift+0x1c>
 80083aa:	2300      	movs	r3, #0
 80083ac:	f100 0114 	add.w	r1, r0, #20
 80083b0:	f100 0210 	add.w	r2, r0, #16
 80083b4:	4618      	mov	r0, r3
 80083b6:	4553      	cmp	r3, sl
 80083b8:	db33      	blt.n	8008422 <__lshift+0xb6>
 80083ba:	6920      	ldr	r0, [r4, #16]
 80083bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083c0:	f104 0314 	add.w	r3, r4, #20
 80083c4:	f019 091f 	ands.w	r9, r9, #31
 80083c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083d0:	d02b      	beq.n	800842a <__lshift+0xbe>
 80083d2:	f1c9 0e20 	rsb	lr, r9, #32
 80083d6:	468a      	mov	sl, r1
 80083d8:	2200      	movs	r2, #0
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	fa00 f009 	lsl.w	r0, r0, r9
 80083e0:	4302      	orrs	r2, r0
 80083e2:	f84a 2b04 	str.w	r2, [sl], #4
 80083e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ea:	459c      	cmp	ip, r3
 80083ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80083f0:	d8f3      	bhi.n	80083da <__lshift+0x6e>
 80083f2:	ebac 0304 	sub.w	r3, ip, r4
 80083f6:	3b15      	subs	r3, #21
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	3304      	adds	r3, #4
 80083fe:	f104 0015 	add.w	r0, r4, #21
 8008402:	4584      	cmp	ip, r0
 8008404:	bf38      	it	cc
 8008406:	2304      	movcc	r3, #4
 8008408:	50ca      	str	r2, [r1, r3]
 800840a:	b10a      	cbz	r2, 8008410 <__lshift+0xa4>
 800840c:	f108 0602 	add.w	r6, r8, #2
 8008410:	3e01      	subs	r6, #1
 8008412:	4638      	mov	r0, r7
 8008414:	612e      	str	r6, [r5, #16]
 8008416:	4621      	mov	r1, r4
 8008418:	f7ff fd8c 	bl	8007f34 <_Bfree>
 800841c:	4628      	mov	r0, r5
 800841e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008422:	f842 0f04 	str.w	r0, [r2, #4]!
 8008426:	3301      	adds	r3, #1
 8008428:	e7c5      	b.n	80083b6 <__lshift+0x4a>
 800842a:	3904      	subs	r1, #4
 800842c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008430:	f841 2f04 	str.w	r2, [r1, #4]!
 8008434:	459c      	cmp	ip, r3
 8008436:	d8f9      	bhi.n	800842c <__lshift+0xc0>
 8008438:	e7ea      	b.n	8008410 <__lshift+0xa4>
 800843a:	bf00      	nop
 800843c:	0800a1fc 	.word	0x0800a1fc
 8008440:	0800a28c 	.word	0x0800a28c

08008444 <__mcmp>:
 8008444:	b530      	push	{r4, r5, lr}
 8008446:	6902      	ldr	r2, [r0, #16]
 8008448:	690c      	ldr	r4, [r1, #16]
 800844a:	1b12      	subs	r2, r2, r4
 800844c:	d10e      	bne.n	800846c <__mcmp+0x28>
 800844e:	f100 0314 	add.w	r3, r0, #20
 8008452:	3114      	adds	r1, #20
 8008454:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008458:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800845c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008460:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008464:	42a5      	cmp	r5, r4
 8008466:	d003      	beq.n	8008470 <__mcmp+0x2c>
 8008468:	d305      	bcc.n	8008476 <__mcmp+0x32>
 800846a:	2201      	movs	r2, #1
 800846c:	4610      	mov	r0, r2
 800846e:	bd30      	pop	{r4, r5, pc}
 8008470:	4283      	cmp	r3, r0
 8008472:	d3f3      	bcc.n	800845c <__mcmp+0x18>
 8008474:	e7fa      	b.n	800846c <__mcmp+0x28>
 8008476:	f04f 32ff 	mov.w	r2, #4294967295
 800847a:	e7f7      	b.n	800846c <__mcmp+0x28>

0800847c <__mdiff>:
 800847c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	460c      	mov	r4, r1
 8008482:	4606      	mov	r6, r0
 8008484:	4611      	mov	r1, r2
 8008486:	4620      	mov	r0, r4
 8008488:	4617      	mov	r7, r2
 800848a:	f7ff ffdb 	bl	8008444 <__mcmp>
 800848e:	1e05      	subs	r5, r0, #0
 8008490:	d110      	bne.n	80084b4 <__mdiff+0x38>
 8008492:	4629      	mov	r1, r5
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff fd0d 	bl	8007eb4 <_Balloc>
 800849a:	b930      	cbnz	r0, 80084aa <__mdiff+0x2e>
 800849c:	4b39      	ldr	r3, [pc, #228]	; (8008584 <__mdiff+0x108>)
 800849e:	4602      	mov	r2, r0
 80084a0:	f240 2132 	movw	r1, #562	; 0x232
 80084a4:	4838      	ldr	r0, [pc, #224]	; (8008588 <__mdiff+0x10c>)
 80084a6:	f001 f831 	bl	800950c <__assert_func>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b4:	bfa4      	itt	ge
 80084b6:	463b      	movge	r3, r7
 80084b8:	4627      	movge	r7, r4
 80084ba:	4630      	mov	r0, r6
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	bfa6      	itte	ge
 80084c0:	461c      	movge	r4, r3
 80084c2:	2500      	movge	r5, #0
 80084c4:	2501      	movlt	r5, #1
 80084c6:	f7ff fcf5 	bl	8007eb4 <_Balloc>
 80084ca:	b920      	cbnz	r0, 80084d6 <__mdiff+0x5a>
 80084cc:	4b2d      	ldr	r3, [pc, #180]	; (8008584 <__mdiff+0x108>)
 80084ce:	4602      	mov	r2, r0
 80084d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084d4:	e7e6      	b.n	80084a4 <__mdiff+0x28>
 80084d6:	693e      	ldr	r6, [r7, #16]
 80084d8:	60c5      	str	r5, [r0, #12]
 80084da:	6925      	ldr	r5, [r4, #16]
 80084dc:	f107 0114 	add.w	r1, r7, #20
 80084e0:	f104 0914 	add.w	r9, r4, #20
 80084e4:	f100 0e14 	add.w	lr, r0, #20
 80084e8:	f107 0210 	add.w	r2, r7, #16
 80084ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80084f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80084f4:	46f2      	mov	sl, lr
 80084f6:	2700      	movs	r7, #0
 80084f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80084fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008500:	fa1f f883 	uxth.w	r8, r3
 8008504:	fa17 f78b 	uxtah	r7, r7, fp
 8008508:	0c1b      	lsrs	r3, r3, #16
 800850a:	eba7 0808 	sub.w	r8, r7, r8
 800850e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008512:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008516:	fa1f f888 	uxth.w	r8, r8
 800851a:	141f      	asrs	r7, r3, #16
 800851c:	454d      	cmp	r5, r9
 800851e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008522:	f84a 3b04 	str.w	r3, [sl], #4
 8008526:	d8e7      	bhi.n	80084f8 <__mdiff+0x7c>
 8008528:	1b2b      	subs	r3, r5, r4
 800852a:	3b15      	subs	r3, #21
 800852c:	f023 0303 	bic.w	r3, r3, #3
 8008530:	3304      	adds	r3, #4
 8008532:	3415      	adds	r4, #21
 8008534:	42a5      	cmp	r5, r4
 8008536:	bf38      	it	cc
 8008538:	2304      	movcc	r3, #4
 800853a:	4419      	add	r1, r3
 800853c:	4473      	add	r3, lr
 800853e:	469e      	mov	lr, r3
 8008540:	460d      	mov	r5, r1
 8008542:	4565      	cmp	r5, ip
 8008544:	d30e      	bcc.n	8008564 <__mdiff+0xe8>
 8008546:	f10c 0203 	add.w	r2, ip, #3
 800854a:	1a52      	subs	r2, r2, r1
 800854c:	f022 0203 	bic.w	r2, r2, #3
 8008550:	3903      	subs	r1, #3
 8008552:	458c      	cmp	ip, r1
 8008554:	bf38      	it	cc
 8008556:	2200      	movcc	r2, #0
 8008558:	441a      	add	r2, r3
 800855a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800855e:	b17b      	cbz	r3, 8008580 <__mdiff+0x104>
 8008560:	6106      	str	r6, [r0, #16]
 8008562:	e7a5      	b.n	80084b0 <__mdiff+0x34>
 8008564:	f855 8b04 	ldr.w	r8, [r5], #4
 8008568:	fa17 f488 	uxtah	r4, r7, r8
 800856c:	1422      	asrs	r2, r4, #16
 800856e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008572:	b2a4      	uxth	r4, r4
 8008574:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008578:	f84e 4b04 	str.w	r4, [lr], #4
 800857c:	1417      	asrs	r7, r2, #16
 800857e:	e7e0      	b.n	8008542 <__mdiff+0xc6>
 8008580:	3e01      	subs	r6, #1
 8008582:	e7ea      	b.n	800855a <__mdiff+0xde>
 8008584:	0800a1fc 	.word	0x0800a1fc
 8008588:	0800a28c 	.word	0x0800a28c

0800858c <__ulp>:
 800858c:	b082      	sub	sp, #8
 800858e:	ed8d 0b00 	vstr	d0, [sp]
 8008592:	9b01      	ldr	r3, [sp, #4]
 8008594:	4912      	ldr	r1, [pc, #72]	; (80085e0 <__ulp+0x54>)
 8008596:	4019      	ands	r1, r3
 8008598:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800859c:	2900      	cmp	r1, #0
 800859e:	dd05      	ble.n	80085ac <__ulp+0x20>
 80085a0:	2200      	movs	r2, #0
 80085a2:	460b      	mov	r3, r1
 80085a4:	ec43 2b10 	vmov	d0, r2, r3
 80085a8:	b002      	add	sp, #8
 80085aa:	4770      	bx	lr
 80085ac:	4249      	negs	r1, r1
 80085ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80085b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80085b6:	f04f 0200 	mov.w	r2, #0
 80085ba:	f04f 0300 	mov.w	r3, #0
 80085be:	da04      	bge.n	80085ca <__ulp+0x3e>
 80085c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80085c4:	fa41 f300 	asr.w	r3, r1, r0
 80085c8:	e7ec      	b.n	80085a4 <__ulp+0x18>
 80085ca:	f1a0 0114 	sub.w	r1, r0, #20
 80085ce:	291e      	cmp	r1, #30
 80085d0:	bfda      	itte	le
 80085d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80085d6:	fa20 f101 	lsrle.w	r1, r0, r1
 80085da:	2101      	movgt	r1, #1
 80085dc:	460a      	mov	r2, r1
 80085de:	e7e1      	b.n	80085a4 <__ulp+0x18>
 80085e0:	7ff00000 	.word	0x7ff00000

080085e4 <__b2d>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	6905      	ldr	r5, [r0, #16]
 80085e8:	f100 0714 	add.w	r7, r0, #20
 80085ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80085f0:	1f2e      	subs	r6, r5, #4
 80085f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7ff fd52 	bl	80080a0 <__hi0bits>
 80085fc:	f1c0 0320 	rsb	r3, r0, #32
 8008600:	280a      	cmp	r0, #10
 8008602:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008680 <__b2d+0x9c>
 8008606:	600b      	str	r3, [r1, #0]
 8008608:	dc14      	bgt.n	8008634 <__b2d+0x50>
 800860a:	f1c0 0e0b 	rsb	lr, r0, #11
 800860e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008612:	42b7      	cmp	r7, r6
 8008614:	ea41 030c 	orr.w	r3, r1, ip
 8008618:	bf34      	ite	cc
 800861a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800861e:	2100      	movcs	r1, #0
 8008620:	3015      	adds	r0, #21
 8008622:	fa04 f000 	lsl.w	r0, r4, r0
 8008626:	fa21 f10e 	lsr.w	r1, r1, lr
 800862a:	ea40 0201 	orr.w	r2, r0, r1
 800862e:	ec43 2b10 	vmov	d0, r2, r3
 8008632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008634:	42b7      	cmp	r7, r6
 8008636:	bf3a      	itte	cc
 8008638:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800863c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008640:	2100      	movcs	r1, #0
 8008642:	380b      	subs	r0, #11
 8008644:	d017      	beq.n	8008676 <__b2d+0x92>
 8008646:	f1c0 0c20 	rsb	ip, r0, #32
 800864a:	fa04 f500 	lsl.w	r5, r4, r0
 800864e:	42be      	cmp	r6, r7
 8008650:	fa21 f40c 	lsr.w	r4, r1, ip
 8008654:	ea45 0504 	orr.w	r5, r5, r4
 8008658:	bf8c      	ite	hi
 800865a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800865e:	2400      	movls	r4, #0
 8008660:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008664:	fa01 f000 	lsl.w	r0, r1, r0
 8008668:	fa24 f40c 	lsr.w	r4, r4, ip
 800866c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008670:	ea40 0204 	orr.w	r2, r0, r4
 8008674:	e7db      	b.n	800862e <__b2d+0x4a>
 8008676:	ea44 030c 	orr.w	r3, r4, ip
 800867a:	460a      	mov	r2, r1
 800867c:	e7d7      	b.n	800862e <__b2d+0x4a>
 800867e:	bf00      	nop
 8008680:	3ff00000 	.word	0x3ff00000

08008684 <__d2b>:
 8008684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008688:	4689      	mov	r9, r1
 800868a:	2101      	movs	r1, #1
 800868c:	ec57 6b10 	vmov	r6, r7, d0
 8008690:	4690      	mov	r8, r2
 8008692:	f7ff fc0f 	bl	8007eb4 <_Balloc>
 8008696:	4604      	mov	r4, r0
 8008698:	b930      	cbnz	r0, 80086a8 <__d2b+0x24>
 800869a:	4602      	mov	r2, r0
 800869c:	4b25      	ldr	r3, [pc, #148]	; (8008734 <__d2b+0xb0>)
 800869e:	4826      	ldr	r0, [pc, #152]	; (8008738 <__d2b+0xb4>)
 80086a0:	f240 310a 	movw	r1, #778	; 0x30a
 80086a4:	f000 ff32 	bl	800950c <__assert_func>
 80086a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086b0:	bb35      	cbnz	r5, 8008700 <__d2b+0x7c>
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	d028      	beq.n	800870a <__d2b+0x86>
 80086b8:	4668      	mov	r0, sp
 80086ba:	9600      	str	r6, [sp, #0]
 80086bc:	f7ff fd10 	bl	80080e0 <__lo0bits>
 80086c0:	9900      	ldr	r1, [sp, #0]
 80086c2:	b300      	cbz	r0, 8008706 <__d2b+0x82>
 80086c4:	9a01      	ldr	r2, [sp, #4]
 80086c6:	f1c0 0320 	rsb	r3, r0, #32
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	430b      	orrs	r3, r1
 80086d0:	40c2      	lsrs	r2, r0
 80086d2:	6163      	str	r3, [r4, #20]
 80086d4:	9201      	str	r2, [sp, #4]
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	61a3      	str	r3, [r4, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bf14      	ite	ne
 80086de:	2202      	movne	r2, #2
 80086e0:	2201      	moveq	r2, #1
 80086e2:	6122      	str	r2, [r4, #16]
 80086e4:	b1d5      	cbz	r5, 800871c <__d2b+0x98>
 80086e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086ea:	4405      	add	r5, r0
 80086ec:	f8c9 5000 	str.w	r5, [r9]
 80086f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086f4:	f8c8 0000 	str.w	r0, [r8]
 80086f8:	4620      	mov	r0, r4
 80086fa:	b003      	add	sp, #12
 80086fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008704:	e7d5      	b.n	80086b2 <__d2b+0x2e>
 8008706:	6161      	str	r1, [r4, #20]
 8008708:	e7e5      	b.n	80086d6 <__d2b+0x52>
 800870a:	a801      	add	r0, sp, #4
 800870c:	f7ff fce8 	bl	80080e0 <__lo0bits>
 8008710:	9b01      	ldr	r3, [sp, #4]
 8008712:	6163      	str	r3, [r4, #20]
 8008714:	2201      	movs	r2, #1
 8008716:	6122      	str	r2, [r4, #16]
 8008718:	3020      	adds	r0, #32
 800871a:	e7e3      	b.n	80086e4 <__d2b+0x60>
 800871c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008720:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008724:	f8c9 0000 	str.w	r0, [r9]
 8008728:	6918      	ldr	r0, [r3, #16]
 800872a:	f7ff fcb9 	bl	80080a0 <__hi0bits>
 800872e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008732:	e7df      	b.n	80086f4 <__d2b+0x70>
 8008734:	0800a1fc 	.word	0x0800a1fc
 8008738:	0800a28c 	.word	0x0800a28c

0800873c <__ratio>:
 800873c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	4688      	mov	r8, r1
 8008742:	4669      	mov	r1, sp
 8008744:	4681      	mov	r9, r0
 8008746:	f7ff ff4d 	bl	80085e4 <__b2d>
 800874a:	a901      	add	r1, sp, #4
 800874c:	4640      	mov	r0, r8
 800874e:	ec55 4b10 	vmov	r4, r5, d0
 8008752:	f7ff ff47 	bl	80085e4 <__b2d>
 8008756:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800875a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800875e:	eba3 0c02 	sub.w	ip, r3, r2
 8008762:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008766:	1a9b      	subs	r3, r3, r2
 8008768:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800876c:	ec51 0b10 	vmov	r0, r1, d0
 8008770:	2b00      	cmp	r3, #0
 8008772:	bfd6      	itet	le
 8008774:	460a      	movle	r2, r1
 8008776:	462a      	movgt	r2, r5
 8008778:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800877c:	468b      	mov	fp, r1
 800877e:	462f      	mov	r7, r5
 8008780:	bfd4      	ite	le
 8008782:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008786:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800878a:	4620      	mov	r0, r4
 800878c:	ee10 2a10 	vmov	r2, s0
 8008790:	465b      	mov	r3, fp
 8008792:	4639      	mov	r1, r7
 8008794:	f7f8 f85a 	bl	800084c <__aeabi_ddiv>
 8008798:	ec41 0b10 	vmov	d0, r0, r1
 800879c:	b003      	add	sp, #12
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087a2 <__copybits>:
 80087a2:	3901      	subs	r1, #1
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	1149      	asrs	r1, r1, #5
 80087a8:	6914      	ldr	r4, [r2, #16]
 80087aa:	3101      	adds	r1, #1
 80087ac:	f102 0314 	add.w	r3, r2, #20
 80087b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087b8:	1f05      	subs	r5, r0, #4
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	d30c      	bcc.n	80087d8 <__copybits+0x36>
 80087be:	1aa3      	subs	r3, r4, r2
 80087c0:	3b11      	subs	r3, #17
 80087c2:	f023 0303 	bic.w	r3, r3, #3
 80087c6:	3211      	adds	r2, #17
 80087c8:	42a2      	cmp	r2, r4
 80087ca:	bf88      	it	hi
 80087cc:	2300      	movhi	r3, #0
 80087ce:	4418      	add	r0, r3
 80087d0:	2300      	movs	r3, #0
 80087d2:	4288      	cmp	r0, r1
 80087d4:	d305      	bcc.n	80087e2 <__copybits+0x40>
 80087d6:	bd70      	pop	{r4, r5, r6, pc}
 80087d8:	f853 6b04 	ldr.w	r6, [r3], #4
 80087dc:	f845 6f04 	str.w	r6, [r5, #4]!
 80087e0:	e7eb      	b.n	80087ba <__copybits+0x18>
 80087e2:	f840 3b04 	str.w	r3, [r0], #4
 80087e6:	e7f4      	b.n	80087d2 <__copybits+0x30>

080087e8 <__any_on>:
 80087e8:	f100 0214 	add.w	r2, r0, #20
 80087ec:	6900      	ldr	r0, [r0, #16]
 80087ee:	114b      	asrs	r3, r1, #5
 80087f0:	4298      	cmp	r0, r3
 80087f2:	b510      	push	{r4, lr}
 80087f4:	db11      	blt.n	800881a <__any_on+0x32>
 80087f6:	dd0a      	ble.n	800880e <__any_on+0x26>
 80087f8:	f011 011f 	ands.w	r1, r1, #31
 80087fc:	d007      	beq.n	800880e <__any_on+0x26>
 80087fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008802:	fa24 f001 	lsr.w	r0, r4, r1
 8008806:	fa00 f101 	lsl.w	r1, r0, r1
 800880a:	428c      	cmp	r4, r1
 800880c:	d10b      	bne.n	8008826 <__any_on+0x3e>
 800880e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008812:	4293      	cmp	r3, r2
 8008814:	d803      	bhi.n	800881e <__any_on+0x36>
 8008816:	2000      	movs	r0, #0
 8008818:	bd10      	pop	{r4, pc}
 800881a:	4603      	mov	r3, r0
 800881c:	e7f7      	b.n	800880e <__any_on+0x26>
 800881e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008822:	2900      	cmp	r1, #0
 8008824:	d0f5      	beq.n	8008812 <__any_on+0x2a>
 8008826:	2001      	movs	r0, #1
 8008828:	e7f6      	b.n	8008818 <__any_on+0x30>

0800882a <_calloc_r>:
 800882a:	b513      	push	{r0, r1, r4, lr}
 800882c:	434a      	muls	r2, r1
 800882e:	4611      	mov	r1, r2
 8008830:	9201      	str	r2, [sp, #4]
 8008832:	f000 f859 	bl	80088e8 <_malloc_r>
 8008836:	4604      	mov	r4, r0
 8008838:	b118      	cbz	r0, 8008842 <_calloc_r+0x18>
 800883a:	9a01      	ldr	r2, [sp, #4]
 800883c:	2100      	movs	r1, #0
 800883e:	f7fc fb25 	bl	8004e8c <memset>
 8008842:	4620      	mov	r0, r4
 8008844:	b002      	add	sp, #8
 8008846:	bd10      	pop	{r4, pc}

08008848 <_free_r>:
 8008848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800884a:	2900      	cmp	r1, #0
 800884c:	d048      	beq.n	80088e0 <_free_r+0x98>
 800884e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008852:	9001      	str	r0, [sp, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f1a1 0404 	sub.w	r4, r1, #4
 800885a:	bfb8      	it	lt
 800885c:	18e4      	addlt	r4, r4, r3
 800885e:	f001 f859 	bl	8009914 <__malloc_lock>
 8008862:	4a20      	ldr	r2, [pc, #128]	; (80088e4 <_free_r+0x9c>)
 8008864:	9801      	ldr	r0, [sp, #4]
 8008866:	6813      	ldr	r3, [r2, #0]
 8008868:	4615      	mov	r5, r2
 800886a:	b933      	cbnz	r3, 800887a <_free_r+0x32>
 800886c:	6063      	str	r3, [r4, #4]
 800886e:	6014      	str	r4, [r2, #0]
 8008870:	b003      	add	sp, #12
 8008872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008876:	f001 b853 	b.w	8009920 <__malloc_unlock>
 800887a:	42a3      	cmp	r3, r4
 800887c:	d90b      	bls.n	8008896 <_free_r+0x4e>
 800887e:	6821      	ldr	r1, [r4, #0]
 8008880:	1862      	adds	r2, r4, r1
 8008882:	4293      	cmp	r3, r2
 8008884:	bf04      	itt	eq
 8008886:	681a      	ldreq	r2, [r3, #0]
 8008888:	685b      	ldreq	r3, [r3, #4]
 800888a:	6063      	str	r3, [r4, #4]
 800888c:	bf04      	itt	eq
 800888e:	1852      	addeq	r2, r2, r1
 8008890:	6022      	streq	r2, [r4, #0]
 8008892:	602c      	str	r4, [r5, #0]
 8008894:	e7ec      	b.n	8008870 <_free_r+0x28>
 8008896:	461a      	mov	r2, r3
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	b10b      	cbz	r3, 80088a0 <_free_r+0x58>
 800889c:	42a3      	cmp	r3, r4
 800889e:	d9fa      	bls.n	8008896 <_free_r+0x4e>
 80088a0:	6811      	ldr	r1, [r2, #0]
 80088a2:	1855      	adds	r5, r2, r1
 80088a4:	42a5      	cmp	r5, r4
 80088a6:	d10b      	bne.n	80088c0 <_free_r+0x78>
 80088a8:	6824      	ldr	r4, [r4, #0]
 80088aa:	4421      	add	r1, r4
 80088ac:	1854      	adds	r4, r2, r1
 80088ae:	42a3      	cmp	r3, r4
 80088b0:	6011      	str	r1, [r2, #0]
 80088b2:	d1dd      	bne.n	8008870 <_free_r+0x28>
 80088b4:	681c      	ldr	r4, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	6053      	str	r3, [r2, #4]
 80088ba:	4421      	add	r1, r4
 80088bc:	6011      	str	r1, [r2, #0]
 80088be:	e7d7      	b.n	8008870 <_free_r+0x28>
 80088c0:	d902      	bls.n	80088c8 <_free_r+0x80>
 80088c2:	230c      	movs	r3, #12
 80088c4:	6003      	str	r3, [r0, #0]
 80088c6:	e7d3      	b.n	8008870 <_free_r+0x28>
 80088c8:	6825      	ldr	r5, [r4, #0]
 80088ca:	1961      	adds	r1, r4, r5
 80088cc:	428b      	cmp	r3, r1
 80088ce:	bf04      	itt	eq
 80088d0:	6819      	ldreq	r1, [r3, #0]
 80088d2:	685b      	ldreq	r3, [r3, #4]
 80088d4:	6063      	str	r3, [r4, #4]
 80088d6:	bf04      	itt	eq
 80088d8:	1949      	addeq	r1, r1, r5
 80088da:	6021      	streq	r1, [r4, #0]
 80088dc:	6054      	str	r4, [r2, #4]
 80088de:	e7c7      	b.n	8008870 <_free_r+0x28>
 80088e0:	b003      	add	sp, #12
 80088e2:	bd30      	pop	{r4, r5, pc}
 80088e4:	20000208 	.word	0x20000208

080088e8 <_malloc_r>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	1ccd      	adds	r5, r1, #3
 80088ec:	f025 0503 	bic.w	r5, r5, #3
 80088f0:	3508      	adds	r5, #8
 80088f2:	2d0c      	cmp	r5, #12
 80088f4:	bf38      	it	cc
 80088f6:	250c      	movcc	r5, #12
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	4606      	mov	r6, r0
 80088fc:	db01      	blt.n	8008902 <_malloc_r+0x1a>
 80088fe:	42a9      	cmp	r1, r5
 8008900:	d903      	bls.n	800890a <_malloc_r+0x22>
 8008902:	230c      	movs	r3, #12
 8008904:	6033      	str	r3, [r6, #0]
 8008906:	2000      	movs	r0, #0
 8008908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890a:	f001 f803 	bl	8009914 <__malloc_lock>
 800890e:	4921      	ldr	r1, [pc, #132]	; (8008994 <_malloc_r+0xac>)
 8008910:	680a      	ldr	r2, [r1, #0]
 8008912:	4614      	mov	r4, r2
 8008914:	b99c      	cbnz	r4, 800893e <_malloc_r+0x56>
 8008916:	4f20      	ldr	r7, [pc, #128]	; (8008998 <_malloc_r+0xb0>)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	b923      	cbnz	r3, 8008926 <_malloc_r+0x3e>
 800891c:	4621      	mov	r1, r4
 800891e:	4630      	mov	r0, r6
 8008920:	f000 fcd2 	bl	80092c8 <_sbrk_r>
 8008924:	6038      	str	r0, [r7, #0]
 8008926:	4629      	mov	r1, r5
 8008928:	4630      	mov	r0, r6
 800892a:	f000 fccd 	bl	80092c8 <_sbrk_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d123      	bne.n	800897a <_malloc_r+0x92>
 8008932:	230c      	movs	r3, #12
 8008934:	6033      	str	r3, [r6, #0]
 8008936:	4630      	mov	r0, r6
 8008938:	f000 fff2 	bl	8009920 <__malloc_unlock>
 800893c:	e7e3      	b.n	8008906 <_malloc_r+0x1e>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	1b5b      	subs	r3, r3, r5
 8008942:	d417      	bmi.n	8008974 <_malloc_r+0x8c>
 8008944:	2b0b      	cmp	r3, #11
 8008946:	d903      	bls.n	8008950 <_malloc_r+0x68>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	441c      	add	r4, r3
 800894c:	6025      	str	r5, [r4, #0]
 800894e:	e004      	b.n	800895a <_malloc_r+0x72>
 8008950:	6863      	ldr	r3, [r4, #4]
 8008952:	42a2      	cmp	r2, r4
 8008954:	bf0c      	ite	eq
 8008956:	600b      	streq	r3, [r1, #0]
 8008958:	6053      	strne	r3, [r2, #4]
 800895a:	4630      	mov	r0, r6
 800895c:	f000 ffe0 	bl	8009920 <__malloc_unlock>
 8008960:	f104 000b 	add.w	r0, r4, #11
 8008964:	1d23      	adds	r3, r4, #4
 8008966:	f020 0007 	bic.w	r0, r0, #7
 800896a:	1ac2      	subs	r2, r0, r3
 800896c:	d0cc      	beq.n	8008908 <_malloc_r+0x20>
 800896e:	1a1b      	subs	r3, r3, r0
 8008970:	50a3      	str	r3, [r4, r2]
 8008972:	e7c9      	b.n	8008908 <_malloc_r+0x20>
 8008974:	4622      	mov	r2, r4
 8008976:	6864      	ldr	r4, [r4, #4]
 8008978:	e7cc      	b.n	8008914 <_malloc_r+0x2c>
 800897a:	1cc4      	adds	r4, r0, #3
 800897c:	f024 0403 	bic.w	r4, r4, #3
 8008980:	42a0      	cmp	r0, r4
 8008982:	d0e3      	beq.n	800894c <_malloc_r+0x64>
 8008984:	1a21      	subs	r1, r4, r0
 8008986:	4630      	mov	r0, r6
 8008988:	f000 fc9e 	bl	80092c8 <_sbrk_r>
 800898c:	3001      	adds	r0, #1
 800898e:	d1dd      	bne.n	800894c <_malloc_r+0x64>
 8008990:	e7cf      	b.n	8008932 <_malloc_r+0x4a>
 8008992:	bf00      	nop
 8008994:	20000208 	.word	0x20000208
 8008998:	2000020c 	.word	0x2000020c

0800899c <__ssputs_r>:
 800899c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a0:	688e      	ldr	r6, [r1, #8]
 80089a2:	429e      	cmp	r6, r3
 80089a4:	4682      	mov	sl, r0
 80089a6:	460c      	mov	r4, r1
 80089a8:	4690      	mov	r8, r2
 80089aa:	461f      	mov	r7, r3
 80089ac:	d838      	bhi.n	8008a20 <__ssputs_r+0x84>
 80089ae:	898a      	ldrh	r2, [r1, #12]
 80089b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089b4:	d032      	beq.n	8008a1c <__ssputs_r+0x80>
 80089b6:	6825      	ldr	r5, [r4, #0]
 80089b8:	6909      	ldr	r1, [r1, #16]
 80089ba:	eba5 0901 	sub.w	r9, r5, r1
 80089be:	6965      	ldr	r5, [r4, #20]
 80089c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089c8:	3301      	adds	r3, #1
 80089ca:	444b      	add	r3, r9
 80089cc:	106d      	asrs	r5, r5, #1
 80089ce:	429d      	cmp	r5, r3
 80089d0:	bf38      	it	cc
 80089d2:	461d      	movcc	r5, r3
 80089d4:	0553      	lsls	r3, r2, #21
 80089d6:	d531      	bpl.n	8008a3c <__ssputs_r+0xa0>
 80089d8:	4629      	mov	r1, r5
 80089da:	f7ff ff85 	bl	80088e8 <_malloc_r>
 80089de:	4606      	mov	r6, r0
 80089e0:	b950      	cbnz	r0, 80089f8 <__ssputs_r+0x5c>
 80089e2:	230c      	movs	r3, #12
 80089e4:	f8ca 3000 	str.w	r3, [sl]
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f8:	6921      	ldr	r1, [r4, #16]
 80089fa:	464a      	mov	r2, r9
 80089fc:	f7ff fa4c 	bl	8007e98 <memcpy>
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	6126      	str	r6, [r4, #16]
 8008a0e:	6165      	str	r5, [r4, #20]
 8008a10:	444e      	add	r6, r9
 8008a12:	eba5 0509 	sub.w	r5, r5, r9
 8008a16:	6026      	str	r6, [r4, #0]
 8008a18:	60a5      	str	r5, [r4, #8]
 8008a1a:	463e      	mov	r6, r7
 8008a1c:	42be      	cmp	r6, r7
 8008a1e:	d900      	bls.n	8008a22 <__ssputs_r+0x86>
 8008a20:	463e      	mov	r6, r7
 8008a22:	4632      	mov	r2, r6
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	4641      	mov	r1, r8
 8008a28:	f000 ff5a 	bl	80098e0 <memmove>
 8008a2c:	68a3      	ldr	r3, [r4, #8]
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	1b9b      	subs	r3, r3, r6
 8008a32:	4432      	add	r2, r6
 8008a34:	60a3      	str	r3, [r4, #8]
 8008a36:	6022      	str	r2, [r4, #0]
 8008a38:	2000      	movs	r0, #0
 8008a3a:	e7db      	b.n	80089f4 <__ssputs_r+0x58>
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	f000 ff75 	bl	800992c <_realloc_r>
 8008a42:	4606      	mov	r6, r0
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d1e1      	bne.n	8008a0c <__ssputs_r+0x70>
 8008a48:	6921      	ldr	r1, [r4, #16]
 8008a4a:	4650      	mov	r0, sl
 8008a4c:	f7ff fefc 	bl	8008848 <_free_r>
 8008a50:	e7c7      	b.n	80089e2 <__ssputs_r+0x46>
	...

08008a54 <_svfiprintf_r>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	4698      	mov	r8, r3
 8008a5a:	898b      	ldrh	r3, [r1, #12]
 8008a5c:	061b      	lsls	r3, r3, #24
 8008a5e:	b09d      	sub	sp, #116	; 0x74
 8008a60:	4607      	mov	r7, r0
 8008a62:	460d      	mov	r5, r1
 8008a64:	4614      	mov	r4, r2
 8008a66:	d50e      	bpl.n	8008a86 <_svfiprintf_r+0x32>
 8008a68:	690b      	ldr	r3, [r1, #16]
 8008a6a:	b963      	cbnz	r3, 8008a86 <_svfiprintf_r+0x32>
 8008a6c:	2140      	movs	r1, #64	; 0x40
 8008a6e:	f7ff ff3b 	bl	80088e8 <_malloc_r>
 8008a72:	6028      	str	r0, [r5, #0]
 8008a74:	6128      	str	r0, [r5, #16]
 8008a76:	b920      	cbnz	r0, 8008a82 <_svfiprintf_r+0x2e>
 8008a78:	230c      	movs	r3, #12
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	e0d1      	b.n	8008c26 <_svfiprintf_r+0x1d2>
 8008a82:	2340      	movs	r3, #64	; 0x40
 8008a84:	616b      	str	r3, [r5, #20]
 8008a86:	2300      	movs	r3, #0
 8008a88:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8a:	2320      	movs	r3, #32
 8008a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a94:	2330      	movs	r3, #48	; 0x30
 8008a96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c40 <_svfiprintf_r+0x1ec>
 8008a9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a9e:	f04f 0901 	mov.w	r9, #1
 8008aa2:	4623      	mov	r3, r4
 8008aa4:	469a      	mov	sl, r3
 8008aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aaa:	b10a      	cbz	r2, 8008ab0 <_svfiprintf_r+0x5c>
 8008aac:	2a25      	cmp	r2, #37	; 0x25
 8008aae:	d1f9      	bne.n	8008aa4 <_svfiprintf_r+0x50>
 8008ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ab4:	d00b      	beq.n	8008ace <_svfiprintf_r+0x7a>
 8008ab6:	465b      	mov	r3, fp
 8008ab8:	4622      	mov	r2, r4
 8008aba:	4629      	mov	r1, r5
 8008abc:	4638      	mov	r0, r7
 8008abe:	f7ff ff6d 	bl	800899c <__ssputs_r>
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f000 80aa 	beq.w	8008c1c <_svfiprintf_r+0x1c8>
 8008ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aca:	445a      	add	r2, fp
 8008acc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ace:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80a2 	beq.w	8008c1c <_svfiprintf_r+0x1c8>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f04f 32ff 	mov.w	r2, #4294967295
 8008ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ae2:	f10a 0a01 	add.w	sl, sl, #1
 8008ae6:	9304      	str	r3, [sp, #16]
 8008ae8:	9307      	str	r3, [sp, #28]
 8008aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aee:	931a      	str	r3, [sp, #104]	; 0x68
 8008af0:	4654      	mov	r4, sl
 8008af2:	2205      	movs	r2, #5
 8008af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af8:	4851      	ldr	r0, [pc, #324]	; (8008c40 <_svfiprintf_r+0x1ec>)
 8008afa:	f7f7 fb71 	bl	80001e0 <memchr>
 8008afe:	9a04      	ldr	r2, [sp, #16]
 8008b00:	b9d8      	cbnz	r0, 8008b3a <_svfiprintf_r+0xe6>
 8008b02:	06d0      	lsls	r0, r2, #27
 8008b04:	bf44      	itt	mi
 8008b06:	2320      	movmi	r3, #32
 8008b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b0c:	0711      	lsls	r1, r2, #28
 8008b0e:	bf44      	itt	mi
 8008b10:	232b      	movmi	r3, #43	; 0x2b
 8008b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b16:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b1c:	d015      	beq.n	8008b4a <_svfiprintf_r+0xf6>
 8008b1e:	9a07      	ldr	r2, [sp, #28]
 8008b20:	4654      	mov	r4, sl
 8008b22:	2000      	movs	r0, #0
 8008b24:	f04f 0c0a 	mov.w	ip, #10
 8008b28:	4621      	mov	r1, r4
 8008b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b2e:	3b30      	subs	r3, #48	; 0x30
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	d94e      	bls.n	8008bd2 <_svfiprintf_r+0x17e>
 8008b34:	b1b0      	cbz	r0, 8008b64 <_svfiprintf_r+0x110>
 8008b36:	9207      	str	r2, [sp, #28]
 8008b38:	e014      	b.n	8008b64 <_svfiprintf_r+0x110>
 8008b3a:	eba0 0308 	sub.w	r3, r0, r8
 8008b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008b42:	4313      	orrs	r3, r2
 8008b44:	9304      	str	r3, [sp, #16]
 8008b46:	46a2      	mov	sl, r4
 8008b48:	e7d2      	b.n	8008af0 <_svfiprintf_r+0x9c>
 8008b4a:	9b03      	ldr	r3, [sp, #12]
 8008b4c:	1d19      	adds	r1, r3, #4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	9103      	str	r1, [sp, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bfbb      	ittet	lt
 8008b56:	425b      	neglt	r3, r3
 8008b58:	f042 0202 	orrlt.w	r2, r2, #2
 8008b5c:	9307      	strge	r3, [sp, #28]
 8008b5e:	9307      	strlt	r3, [sp, #28]
 8008b60:	bfb8      	it	lt
 8008b62:	9204      	strlt	r2, [sp, #16]
 8008b64:	7823      	ldrb	r3, [r4, #0]
 8008b66:	2b2e      	cmp	r3, #46	; 0x2e
 8008b68:	d10c      	bne.n	8008b84 <_svfiprintf_r+0x130>
 8008b6a:	7863      	ldrb	r3, [r4, #1]
 8008b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b6e:	d135      	bne.n	8008bdc <_svfiprintf_r+0x188>
 8008b70:	9b03      	ldr	r3, [sp, #12]
 8008b72:	1d1a      	adds	r2, r3, #4
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	9203      	str	r2, [sp, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bfb8      	it	lt
 8008b7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b80:	3402      	adds	r4, #2
 8008b82:	9305      	str	r3, [sp, #20]
 8008b84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c50 <_svfiprintf_r+0x1fc>
 8008b88:	7821      	ldrb	r1, [r4, #0]
 8008b8a:	2203      	movs	r2, #3
 8008b8c:	4650      	mov	r0, sl
 8008b8e:	f7f7 fb27 	bl	80001e0 <memchr>
 8008b92:	b140      	cbz	r0, 8008ba6 <_svfiprintf_r+0x152>
 8008b94:	2340      	movs	r3, #64	; 0x40
 8008b96:	eba0 000a 	sub.w	r0, r0, sl
 8008b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8008b9e:	9b04      	ldr	r3, [sp, #16]
 8008ba0:	4303      	orrs	r3, r0
 8008ba2:	3401      	adds	r4, #1
 8008ba4:	9304      	str	r3, [sp, #16]
 8008ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008baa:	4826      	ldr	r0, [pc, #152]	; (8008c44 <_svfiprintf_r+0x1f0>)
 8008bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bb0:	2206      	movs	r2, #6
 8008bb2:	f7f7 fb15 	bl	80001e0 <memchr>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d038      	beq.n	8008c2c <_svfiprintf_r+0x1d8>
 8008bba:	4b23      	ldr	r3, [pc, #140]	; (8008c48 <_svfiprintf_r+0x1f4>)
 8008bbc:	bb1b      	cbnz	r3, 8008c06 <_svfiprintf_r+0x1b2>
 8008bbe:	9b03      	ldr	r3, [sp, #12]
 8008bc0:	3307      	adds	r3, #7
 8008bc2:	f023 0307 	bic.w	r3, r3, #7
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	9303      	str	r3, [sp, #12]
 8008bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bcc:	4433      	add	r3, r6
 8008bce:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd0:	e767      	b.n	8008aa2 <_svfiprintf_r+0x4e>
 8008bd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	2001      	movs	r0, #1
 8008bda:	e7a5      	b.n	8008b28 <_svfiprintf_r+0xd4>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	3401      	adds	r4, #1
 8008be0:	9305      	str	r3, [sp, #20]
 8008be2:	4619      	mov	r1, r3
 8008be4:	f04f 0c0a 	mov.w	ip, #10
 8008be8:	4620      	mov	r0, r4
 8008bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bee:	3a30      	subs	r2, #48	; 0x30
 8008bf0:	2a09      	cmp	r2, #9
 8008bf2:	d903      	bls.n	8008bfc <_svfiprintf_r+0x1a8>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0c5      	beq.n	8008b84 <_svfiprintf_r+0x130>
 8008bf8:	9105      	str	r1, [sp, #20]
 8008bfa:	e7c3      	b.n	8008b84 <_svfiprintf_r+0x130>
 8008bfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c00:	4604      	mov	r4, r0
 8008c02:	2301      	movs	r3, #1
 8008c04:	e7f0      	b.n	8008be8 <_svfiprintf_r+0x194>
 8008c06:	ab03      	add	r3, sp, #12
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <_svfiprintf_r+0x1f8>)
 8008c0e:	a904      	add	r1, sp, #16
 8008c10:	4638      	mov	r0, r7
 8008c12:	f7fc f9e3 	bl	8004fdc <_printf_float>
 8008c16:	1c42      	adds	r2, r0, #1
 8008c18:	4606      	mov	r6, r0
 8008c1a:	d1d6      	bne.n	8008bca <_svfiprintf_r+0x176>
 8008c1c:	89ab      	ldrh	r3, [r5, #12]
 8008c1e:	065b      	lsls	r3, r3, #25
 8008c20:	f53f af2c 	bmi.w	8008a7c <_svfiprintf_r+0x28>
 8008c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c26:	b01d      	add	sp, #116	; 0x74
 8008c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2c:	ab03      	add	r3, sp, #12
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	462a      	mov	r2, r5
 8008c32:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <_svfiprintf_r+0x1f8>)
 8008c34:	a904      	add	r1, sp, #16
 8008c36:	4638      	mov	r0, r7
 8008c38:	f7fc fc74 	bl	8005524 <_printf_i>
 8008c3c:	e7eb      	b.n	8008c16 <_svfiprintf_r+0x1c2>
 8008c3e:	bf00      	nop
 8008c40:	0800a3ec 	.word	0x0800a3ec
 8008c44:	0800a3f6 	.word	0x0800a3f6
 8008c48:	08004fdd 	.word	0x08004fdd
 8008c4c:	0800899d 	.word	0x0800899d
 8008c50:	0800a3f2 	.word	0x0800a3f2

08008c54 <_sungetc_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	1c4b      	adds	r3, r1, #1
 8008c58:	4614      	mov	r4, r2
 8008c5a:	d103      	bne.n	8008c64 <_sungetc_r+0x10>
 8008c5c:	f04f 35ff 	mov.w	r5, #4294967295
 8008c60:	4628      	mov	r0, r5
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	8993      	ldrh	r3, [r2, #12]
 8008c66:	f023 0320 	bic.w	r3, r3, #32
 8008c6a:	8193      	strh	r3, [r2, #12]
 8008c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c6e:	6852      	ldr	r2, [r2, #4]
 8008c70:	b2cd      	uxtb	r5, r1
 8008c72:	b18b      	cbz	r3, 8008c98 <_sungetc_r+0x44>
 8008c74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c76:	4293      	cmp	r3, r2
 8008c78:	dd08      	ble.n	8008c8c <_sungetc_r+0x38>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	1e5a      	subs	r2, r3, #1
 8008c7e:	6022      	str	r2, [r4, #0]
 8008c80:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008c84:	6863      	ldr	r3, [r4, #4]
 8008c86:	3301      	adds	r3, #1
 8008c88:	6063      	str	r3, [r4, #4]
 8008c8a:	e7e9      	b.n	8008c60 <_sungetc_r+0xc>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	f000 fbf5 	bl	800947c <__submore>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d0f1      	beq.n	8008c7a <_sungetc_r+0x26>
 8008c96:	e7e1      	b.n	8008c5c <_sungetc_r+0x8>
 8008c98:	6921      	ldr	r1, [r4, #16]
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	b151      	cbz	r1, 8008cb4 <_sungetc_r+0x60>
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	d208      	bcs.n	8008cb4 <_sungetc_r+0x60>
 8008ca2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008ca6:	42a9      	cmp	r1, r5
 8008ca8:	d104      	bne.n	8008cb4 <_sungetc_r+0x60>
 8008caa:	3b01      	subs	r3, #1
 8008cac:	3201      	adds	r2, #1
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	6062      	str	r2, [r4, #4]
 8008cb2:	e7d5      	b.n	8008c60 <_sungetc_r+0xc>
 8008cb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cbc:	6363      	str	r3, [r4, #52]	; 0x34
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	63a3      	str	r3, [r4, #56]	; 0x38
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e7dc      	b.n	8008c88 <_sungetc_r+0x34>

08008cce <__ssrefill_r>:
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008cd4:	b169      	cbz	r1, 8008cf2 <__ssrefill_r+0x24>
 8008cd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cda:	4299      	cmp	r1, r3
 8008cdc:	d001      	beq.n	8008ce2 <__ssrefill_r+0x14>
 8008cde:	f7ff fdb3 	bl	8008848 <_free_r>
 8008ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ce4:	6063      	str	r3, [r4, #4]
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	6360      	str	r0, [r4, #52]	; 0x34
 8008cea:	b113      	cbz	r3, 8008cf2 <__ssrefill_r+0x24>
 8008cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	bd10      	pop	{r4, pc}
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	f043 0320 	orr.w	r3, r3, #32
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295
 8008d06:	e7f3      	b.n	8008cf0 <__ssrefill_r+0x22>

08008d08 <__ssvfiscanf_r>:
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008d12:	2100      	movs	r1, #0
 8008d14:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008d18:	49b2      	ldr	r1, [pc, #712]	; (8008fe4 <__ssvfiscanf_r+0x2dc>)
 8008d1a:	91a0      	str	r1, [sp, #640]	; 0x280
 8008d1c:	f10d 0804 	add.w	r8, sp, #4
 8008d20:	49b1      	ldr	r1, [pc, #708]	; (8008fe8 <__ssvfiscanf_r+0x2e0>)
 8008d22:	4fb2      	ldr	r7, [pc, #712]	; (8008fec <__ssvfiscanf_r+0x2e4>)
 8008d24:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8008ff0 <__ssvfiscanf_r+0x2e8>
 8008d28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	f892 a000 	ldrb.w	sl, [r2]
 8008d36:	f1ba 0f00 	cmp.w	sl, #0
 8008d3a:	f000 8151 	beq.w	8008fe0 <__ssvfiscanf_r+0x2d8>
 8008d3e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008d42:	f013 0308 	ands.w	r3, r3, #8
 8008d46:	f102 0501 	add.w	r5, r2, #1
 8008d4a:	d019      	beq.n	8008d80 <__ssvfiscanf_r+0x78>
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dd0f      	ble.n	8008d72 <__ssvfiscanf_r+0x6a>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	781a      	ldrb	r2, [r3, #0]
 8008d56:	5cba      	ldrb	r2, [r7, r2]
 8008d58:	0712      	lsls	r2, r2, #28
 8008d5a:	d401      	bmi.n	8008d60 <__ssvfiscanf_r+0x58>
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	e7e8      	b.n	8008d32 <__ssvfiscanf_r+0x2a>
 8008d60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008d62:	3201      	adds	r2, #1
 8008d64:	9245      	str	r2, [sp, #276]	; 0x114
 8008d66:	6862      	ldr	r2, [r4, #4]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	3a01      	subs	r2, #1
 8008d6c:	6062      	str	r2, [r4, #4]
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	e7ec      	b.n	8008d4c <__ssvfiscanf_r+0x44>
 8008d72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d74:	4621      	mov	r1, r4
 8008d76:	4630      	mov	r0, r6
 8008d78:	4798      	blx	r3
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d0e9      	beq.n	8008d52 <__ssvfiscanf_r+0x4a>
 8008d7e:	e7ed      	b.n	8008d5c <__ssvfiscanf_r+0x54>
 8008d80:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008d84:	f040 8083 	bne.w	8008e8e <__ssvfiscanf_r+0x186>
 8008d88:	9341      	str	r3, [sp, #260]	; 0x104
 8008d8a:	9343      	str	r3, [sp, #268]	; 0x10c
 8008d8c:	7853      	ldrb	r3, [r2, #1]
 8008d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d90:	bf02      	ittt	eq
 8008d92:	2310      	moveq	r3, #16
 8008d94:	1c95      	addeq	r5, r2, #2
 8008d96:	9341      	streq	r3, [sp, #260]	; 0x104
 8008d98:	220a      	movs	r2, #10
 8008d9a:	46ab      	mov	fp, r5
 8008d9c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8008da0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008da4:	2b09      	cmp	r3, #9
 8008da6:	d91d      	bls.n	8008de4 <__ssvfiscanf_r+0xdc>
 8008da8:	4891      	ldr	r0, [pc, #580]	; (8008ff0 <__ssvfiscanf_r+0x2e8>)
 8008daa:	2203      	movs	r2, #3
 8008dac:	f7f7 fa18 	bl	80001e0 <memchr>
 8008db0:	b140      	cbz	r0, 8008dc4 <__ssvfiscanf_r+0xbc>
 8008db2:	2301      	movs	r3, #1
 8008db4:	eba0 0009 	sub.w	r0, r0, r9
 8008db8:	fa03 f000 	lsl.w	r0, r3, r0
 8008dbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008dbe:	4318      	orrs	r0, r3
 8008dc0:	9041      	str	r0, [sp, #260]	; 0x104
 8008dc2:	465d      	mov	r5, fp
 8008dc4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008dc8:	2b78      	cmp	r3, #120	; 0x78
 8008dca:	d806      	bhi.n	8008dda <__ssvfiscanf_r+0xd2>
 8008dcc:	2b57      	cmp	r3, #87	; 0x57
 8008dce:	d810      	bhi.n	8008df2 <__ssvfiscanf_r+0xea>
 8008dd0:	2b25      	cmp	r3, #37	; 0x25
 8008dd2:	d05c      	beq.n	8008e8e <__ssvfiscanf_r+0x186>
 8008dd4:	d856      	bhi.n	8008e84 <__ssvfiscanf_r+0x17c>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d074      	beq.n	8008ec4 <__ssvfiscanf_r+0x1bc>
 8008dda:	2303      	movs	r3, #3
 8008ddc:	9347      	str	r3, [sp, #284]	; 0x11c
 8008dde:	230a      	movs	r3, #10
 8008de0:	9342      	str	r3, [sp, #264]	; 0x108
 8008de2:	e081      	b.n	8008ee8 <__ssvfiscanf_r+0x1e0>
 8008de4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008de6:	fb02 1303 	mla	r3, r2, r3, r1
 8008dea:	3b30      	subs	r3, #48	; 0x30
 8008dec:	9343      	str	r3, [sp, #268]	; 0x10c
 8008dee:	465d      	mov	r5, fp
 8008df0:	e7d3      	b.n	8008d9a <__ssvfiscanf_r+0x92>
 8008df2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008df6:	2a20      	cmp	r2, #32
 8008df8:	d8ef      	bhi.n	8008dda <__ssvfiscanf_r+0xd2>
 8008dfa:	a101      	add	r1, pc, #4	; (adr r1, 8008e00 <__ssvfiscanf_r+0xf8>)
 8008dfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e00:	08008ed3 	.word	0x08008ed3
 8008e04:	08008ddb 	.word	0x08008ddb
 8008e08:	08008ddb 	.word	0x08008ddb
 8008e0c:	08008f31 	.word	0x08008f31
 8008e10:	08008ddb 	.word	0x08008ddb
 8008e14:	08008ddb 	.word	0x08008ddb
 8008e18:	08008ddb 	.word	0x08008ddb
 8008e1c:	08008ddb 	.word	0x08008ddb
 8008e20:	08008ddb 	.word	0x08008ddb
 8008e24:	08008ddb 	.word	0x08008ddb
 8008e28:	08008ddb 	.word	0x08008ddb
 8008e2c:	08008f47 	.word	0x08008f47
 8008e30:	08008f1d 	.word	0x08008f1d
 8008e34:	08008e8b 	.word	0x08008e8b
 8008e38:	08008e8b 	.word	0x08008e8b
 8008e3c:	08008e8b 	.word	0x08008e8b
 8008e40:	08008ddb 	.word	0x08008ddb
 8008e44:	08008f21 	.word	0x08008f21
 8008e48:	08008ddb 	.word	0x08008ddb
 8008e4c:	08008ddb 	.word	0x08008ddb
 8008e50:	08008ddb 	.word	0x08008ddb
 8008e54:	08008ddb 	.word	0x08008ddb
 8008e58:	08008f57 	.word	0x08008f57
 8008e5c:	08008f29 	.word	0x08008f29
 8008e60:	08008ecb 	.word	0x08008ecb
 8008e64:	08008ddb 	.word	0x08008ddb
 8008e68:	08008ddb 	.word	0x08008ddb
 8008e6c:	08008f53 	.word	0x08008f53
 8008e70:	08008ddb 	.word	0x08008ddb
 8008e74:	08008f1d 	.word	0x08008f1d
 8008e78:	08008ddb 	.word	0x08008ddb
 8008e7c:	08008ddb 	.word	0x08008ddb
 8008e80:	08008ed3 	.word	0x08008ed3
 8008e84:	3b45      	subs	r3, #69	; 0x45
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d8a7      	bhi.n	8008dda <__ssvfiscanf_r+0xd2>
 8008e8a:	2305      	movs	r3, #5
 8008e8c:	e02b      	b.n	8008ee6 <__ssvfiscanf_r+0x1de>
 8008e8e:	6863      	ldr	r3, [r4, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dd0d      	ble.n	8008eb0 <__ssvfiscanf_r+0x1a8>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	781a      	ldrb	r2, [r3, #0]
 8008e98:	4552      	cmp	r2, sl
 8008e9a:	f040 80a1 	bne.w	8008fe0 <__ssvfiscanf_r+0x2d8>
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	6862      	ldr	r2, [r4, #4]
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008ea6:	3a01      	subs	r2, #1
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	6062      	str	r2, [r4, #4]
 8008eac:	9345      	str	r3, [sp, #276]	; 0x114
 8008eae:	e755      	b.n	8008d5c <__ssvfiscanf_r+0x54>
 8008eb0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4798      	blx	r3
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d0eb      	beq.n	8008e94 <__ssvfiscanf_r+0x18c>
 8008ebc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f040 8084 	bne.w	8008fcc <__ssvfiscanf_r+0x2c4>
 8008ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec8:	e086      	b.n	8008fd8 <__ssvfiscanf_r+0x2d0>
 8008eca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008ecc:	f042 0220 	orr.w	r2, r2, #32
 8008ed0:	9241      	str	r2, [sp, #260]	; 0x104
 8008ed2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ed8:	9241      	str	r2, [sp, #260]	; 0x104
 8008eda:	2210      	movs	r2, #16
 8008edc:	2b6f      	cmp	r3, #111	; 0x6f
 8008ede:	9242      	str	r2, [sp, #264]	; 0x108
 8008ee0:	bf34      	ite	cc
 8008ee2:	2303      	movcc	r3, #3
 8008ee4:	2304      	movcs	r3, #4
 8008ee6:	9347      	str	r3, [sp, #284]	; 0x11c
 8008ee8:	6863      	ldr	r3, [r4, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dd41      	ble.n	8008f72 <__ssvfiscanf_r+0x26a>
 8008eee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ef0:	0659      	lsls	r1, r3, #25
 8008ef2:	d404      	bmi.n	8008efe <__ssvfiscanf_r+0x1f6>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	781a      	ldrb	r2, [r3, #0]
 8008ef8:	5cba      	ldrb	r2, [r7, r2]
 8008efa:	0712      	lsls	r2, r2, #28
 8008efc:	d440      	bmi.n	8008f80 <__ssvfiscanf_r+0x278>
 8008efe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	dc4f      	bgt.n	8008fa4 <__ssvfiscanf_r+0x29c>
 8008f04:	466b      	mov	r3, sp
 8008f06:	4622      	mov	r2, r4
 8008f08:	a941      	add	r1, sp, #260	; 0x104
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f000 f874 	bl	8008ff8 <_scanf_chars>
 8008f10:	2801      	cmp	r0, #1
 8008f12:	d065      	beq.n	8008fe0 <__ssvfiscanf_r+0x2d8>
 8008f14:	2802      	cmp	r0, #2
 8008f16:	f47f af21 	bne.w	8008d5c <__ssvfiscanf_r+0x54>
 8008f1a:	e7cf      	b.n	8008ebc <__ssvfiscanf_r+0x1b4>
 8008f1c:	220a      	movs	r2, #10
 8008f1e:	e7dd      	b.n	8008edc <__ssvfiscanf_r+0x1d4>
 8008f20:	2300      	movs	r3, #0
 8008f22:	9342      	str	r3, [sp, #264]	; 0x108
 8008f24:	2303      	movs	r3, #3
 8008f26:	e7de      	b.n	8008ee6 <__ssvfiscanf_r+0x1de>
 8008f28:	2308      	movs	r3, #8
 8008f2a:	9342      	str	r3, [sp, #264]	; 0x108
 8008f2c:	2304      	movs	r3, #4
 8008f2e:	e7da      	b.n	8008ee6 <__ssvfiscanf_r+0x1de>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4640      	mov	r0, r8
 8008f34:	f000 f9d8 	bl	80092e8 <__sccl>
 8008f38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f3e:	9341      	str	r3, [sp, #260]	; 0x104
 8008f40:	4605      	mov	r5, r0
 8008f42:	2301      	movs	r3, #1
 8008f44:	e7cf      	b.n	8008ee6 <__ssvfiscanf_r+0x1de>
 8008f46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4c:	9341      	str	r3, [sp, #260]	; 0x104
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e7c9      	b.n	8008ee6 <__ssvfiscanf_r+0x1de>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e7c7      	b.n	8008ee6 <__ssvfiscanf_r+0x1de>
 8008f56:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008f58:	06c3      	lsls	r3, r0, #27
 8008f5a:	f53f aeff 	bmi.w	8008d5c <__ssvfiscanf_r+0x54>
 8008f5e:	9b00      	ldr	r3, [sp, #0]
 8008f60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008f62:	1d19      	adds	r1, r3, #4
 8008f64:	9100      	str	r1, [sp, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	07c0      	lsls	r0, r0, #31
 8008f6a:	bf4c      	ite	mi
 8008f6c:	801a      	strhmi	r2, [r3, #0]
 8008f6e:	601a      	strpl	r2, [r3, #0]
 8008f70:	e6f4      	b.n	8008d5c <__ssvfiscanf_r+0x54>
 8008f72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f74:	4621      	mov	r1, r4
 8008f76:	4630      	mov	r0, r6
 8008f78:	4798      	blx	r3
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d0b7      	beq.n	8008eee <__ssvfiscanf_r+0x1e6>
 8008f7e:	e79d      	b.n	8008ebc <__ssvfiscanf_r+0x1b4>
 8008f80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008f82:	3201      	adds	r2, #1
 8008f84:	9245      	str	r2, [sp, #276]	; 0x114
 8008f86:	6862      	ldr	r2, [r4, #4]
 8008f88:	3a01      	subs	r2, #1
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	6062      	str	r2, [r4, #4]
 8008f8e:	dd02      	ble.n	8008f96 <__ssvfiscanf_r+0x28e>
 8008f90:	3301      	adds	r3, #1
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	e7ae      	b.n	8008ef4 <__ssvfiscanf_r+0x1ec>
 8008f96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4798      	blx	r3
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d0a8      	beq.n	8008ef4 <__ssvfiscanf_r+0x1ec>
 8008fa2:	e78b      	b.n	8008ebc <__ssvfiscanf_r+0x1b4>
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	dc06      	bgt.n	8008fb6 <__ssvfiscanf_r+0x2ae>
 8008fa8:	466b      	mov	r3, sp
 8008faa:	4622      	mov	r2, r4
 8008fac:	a941      	add	r1, sp, #260	; 0x104
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 f87a 	bl	80090a8 <_scanf_i>
 8008fb4:	e7ac      	b.n	8008f10 <__ssvfiscanf_r+0x208>
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <__ssvfiscanf_r+0x2ec>)
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f43f aecf 	beq.w	8008d5c <__ssvfiscanf_r+0x54>
 8008fbe:	466b      	mov	r3, sp
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	a941      	add	r1, sp, #260	; 0x104
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7fc fbd3 	bl	8005770 <_scanf_float>
 8008fca:	e7a1      	b.n	8008f10 <__ssvfiscanf_r+0x208>
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008fd2:	bf18      	it	ne
 8008fd4:	f04f 30ff 	movne.w	r0, #4294967295
 8008fd8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008fe2:	e7f9      	b.n	8008fd8 <__ssvfiscanf_r+0x2d0>
 8008fe4:	08008c55 	.word	0x08008c55
 8008fe8:	08008ccf 	.word	0x08008ccf
 8008fec:	0800a079 	.word	0x0800a079
 8008ff0:	0800a3f2 	.word	0x0800a3f2
 8008ff4:	08005771 	.word	0x08005771

08008ff8 <_scanf_chars>:
 8008ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ffc:	4615      	mov	r5, r2
 8008ffe:	688a      	ldr	r2, [r1, #8]
 8009000:	4680      	mov	r8, r0
 8009002:	460c      	mov	r4, r1
 8009004:	b932      	cbnz	r2, 8009014 <_scanf_chars+0x1c>
 8009006:	698a      	ldr	r2, [r1, #24]
 8009008:	2a00      	cmp	r2, #0
 800900a:	bf0c      	ite	eq
 800900c:	2201      	moveq	r2, #1
 800900e:	f04f 32ff 	movne.w	r2, #4294967295
 8009012:	608a      	str	r2, [r1, #8]
 8009014:	6822      	ldr	r2, [r4, #0]
 8009016:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80090a4 <_scanf_chars+0xac>
 800901a:	06d1      	lsls	r1, r2, #27
 800901c:	bf5f      	itttt	pl
 800901e:	681a      	ldrpl	r2, [r3, #0]
 8009020:	1d11      	addpl	r1, r2, #4
 8009022:	6019      	strpl	r1, [r3, #0]
 8009024:	6816      	ldrpl	r6, [r2, #0]
 8009026:	2700      	movs	r7, #0
 8009028:	69a0      	ldr	r0, [r4, #24]
 800902a:	b188      	cbz	r0, 8009050 <_scanf_chars+0x58>
 800902c:	2801      	cmp	r0, #1
 800902e:	d107      	bne.n	8009040 <_scanf_chars+0x48>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	781a      	ldrb	r2, [r3, #0]
 8009034:	6963      	ldr	r3, [r4, #20]
 8009036:	5c9b      	ldrb	r3, [r3, r2]
 8009038:	b953      	cbnz	r3, 8009050 <_scanf_chars+0x58>
 800903a:	bb27      	cbnz	r7, 8009086 <_scanf_chars+0x8e>
 800903c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009040:	2802      	cmp	r0, #2
 8009042:	d120      	bne.n	8009086 <_scanf_chars+0x8e>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	f813 3009 	ldrb.w	r3, [r3, r9]
 800904c:	071b      	lsls	r3, r3, #28
 800904e:	d41a      	bmi.n	8009086 <_scanf_chars+0x8e>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	06da      	lsls	r2, r3, #27
 8009054:	bf5e      	ittt	pl
 8009056:	682b      	ldrpl	r3, [r5, #0]
 8009058:	781b      	ldrbpl	r3, [r3, #0]
 800905a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800905e:	682a      	ldr	r2, [r5, #0]
 8009060:	686b      	ldr	r3, [r5, #4]
 8009062:	3201      	adds	r2, #1
 8009064:	602a      	str	r2, [r5, #0]
 8009066:	68a2      	ldr	r2, [r4, #8]
 8009068:	3b01      	subs	r3, #1
 800906a:	3a01      	subs	r2, #1
 800906c:	606b      	str	r3, [r5, #4]
 800906e:	3701      	adds	r7, #1
 8009070:	60a2      	str	r2, [r4, #8]
 8009072:	b142      	cbz	r2, 8009086 <_scanf_chars+0x8e>
 8009074:	2b00      	cmp	r3, #0
 8009076:	dcd7      	bgt.n	8009028 <_scanf_chars+0x30>
 8009078:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800907c:	4629      	mov	r1, r5
 800907e:	4640      	mov	r0, r8
 8009080:	4798      	blx	r3
 8009082:	2800      	cmp	r0, #0
 8009084:	d0d0      	beq.n	8009028 <_scanf_chars+0x30>
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	f013 0310 	ands.w	r3, r3, #16
 800908c:	d105      	bne.n	800909a <_scanf_chars+0xa2>
 800908e:	68e2      	ldr	r2, [r4, #12]
 8009090:	3201      	adds	r2, #1
 8009092:	60e2      	str	r2, [r4, #12]
 8009094:	69a2      	ldr	r2, [r4, #24]
 8009096:	b102      	cbz	r2, 800909a <_scanf_chars+0xa2>
 8009098:	7033      	strb	r3, [r6, #0]
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	441f      	add	r7, r3
 800909e:	6127      	str	r7, [r4, #16]
 80090a0:	2000      	movs	r0, #0
 80090a2:	e7cb      	b.n	800903c <_scanf_chars+0x44>
 80090a4:	0800a079 	.word	0x0800a079

080090a8 <_scanf_i>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	4698      	mov	r8, r3
 80090ae:	4b74      	ldr	r3, [pc, #464]	; (8009280 <_scanf_i+0x1d8>)
 80090b0:	460c      	mov	r4, r1
 80090b2:	4682      	mov	sl, r0
 80090b4:	4616      	mov	r6, r2
 80090b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090ba:	b087      	sub	sp, #28
 80090bc:	ab03      	add	r3, sp, #12
 80090be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80090c2:	4b70      	ldr	r3, [pc, #448]	; (8009284 <_scanf_i+0x1dc>)
 80090c4:	69a1      	ldr	r1, [r4, #24]
 80090c6:	4a70      	ldr	r2, [pc, #448]	; (8009288 <_scanf_i+0x1e0>)
 80090c8:	2903      	cmp	r1, #3
 80090ca:	bf18      	it	ne
 80090cc:	461a      	movne	r2, r3
 80090ce:	68a3      	ldr	r3, [r4, #8]
 80090d0:	9201      	str	r2, [sp, #4]
 80090d2:	1e5a      	subs	r2, r3, #1
 80090d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80090d8:	bf88      	it	hi
 80090da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80090de:	4627      	mov	r7, r4
 80090e0:	bf82      	ittt	hi
 80090e2:	eb03 0905 	addhi.w	r9, r3, r5
 80090e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090ea:	60a3      	strhi	r3, [r4, #8]
 80090ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80090f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80090f4:	bf98      	it	ls
 80090f6:	f04f 0900 	movls.w	r9, #0
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	463d      	mov	r5, r7
 80090fe:	f04f 0b00 	mov.w	fp, #0
 8009102:	6831      	ldr	r1, [r6, #0]
 8009104:	ab03      	add	r3, sp, #12
 8009106:	7809      	ldrb	r1, [r1, #0]
 8009108:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800910c:	2202      	movs	r2, #2
 800910e:	f7f7 f867 	bl	80001e0 <memchr>
 8009112:	b328      	cbz	r0, 8009160 <_scanf_i+0xb8>
 8009114:	f1bb 0f01 	cmp.w	fp, #1
 8009118:	d159      	bne.n	80091ce <_scanf_i+0x126>
 800911a:	6862      	ldr	r2, [r4, #4]
 800911c:	b92a      	cbnz	r2, 800912a <_scanf_i+0x82>
 800911e:	6822      	ldr	r2, [r4, #0]
 8009120:	2308      	movs	r3, #8
 8009122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009126:	6063      	str	r3, [r4, #4]
 8009128:	6022      	str	r2, [r4, #0]
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009130:	6022      	str	r2, [r4, #0]
 8009132:	68a2      	ldr	r2, [r4, #8]
 8009134:	1e51      	subs	r1, r2, #1
 8009136:	60a1      	str	r1, [r4, #8]
 8009138:	b192      	cbz	r2, 8009160 <_scanf_i+0xb8>
 800913a:	6832      	ldr	r2, [r6, #0]
 800913c:	1c51      	adds	r1, r2, #1
 800913e:	6031      	str	r1, [r6, #0]
 8009140:	7812      	ldrb	r2, [r2, #0]
 8009142:	f805 2b01 	strb.w	r2, [r5], #1
 8009146:	6872      	ldr	r2, [r6, #4]
 8009148:	3a01      	subs	r2, #1
 800914a:	2a00      	cmp	r2, #0
 800914c:	6072      	str	r2, [r6, #4]
 800914e:	dc07      	bgt.n	8009160 <_scanf_i+0xb8>
 8009150:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009154:	4631      	mov	r1, r6
 8009156:	4650      	mov	r0, sl
 8009158:	4790      	blx	r2
 800915a:	2800      	cmp	r0, #0
 800915c:	f040 8085 	bne.w	800926a <_scanf_i+0x1c2>
 8009160:	f10b 0b01 	add.w	fp, fp, #1
 8009164:	f1bb 0f03 	cmp.w	fp, #3
 8009168:	d1cb      	bne.n	8009102 <_scanf_i+0x5a>
 800916a:	6863      	ldr	r3, [r4, #4]
 800916c:	b90b      	cbnz	r3, 8009172 <_scanf_i+0xca>
 800916e:	230a      	movs	r3, #10
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	6863      	ldr	r3, [r4, #4]
 8009174:	4945      	ldr	r1, [pc, #276]	; (800928c <_scanf_i+0x1e4>)
 8009176:	6960      	ldr	r0, [r4, #20]
 8009178:	1ac9      	subs	r1, r1, r3
 800917a:	f000 f8b5 	bl	80092e8 <__sccl>
 800917e:	f04f 0b00 	mov.w	fp, #0
 8009182:	68a3      	ldr	r3, [r4, #8]
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d03d      	beq.n	8009206 <_scanf_i+0x15e>
 800918a:	6831      	ldr	r1, [r6, #0]
 800918c:	6960      	ldr	r0, [r4, #20]
 800918e:	f891 c000 	ldrb.w	ip, [r1]
 8009192:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009196:	2800      	cmp	r0, #0
 8009198:	d035      	beq.n	8009206 <_scanf_i+0x15e>
 800919a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800919e:	d124      	bne.n	80091ea <_scanf_i+0x142>
 80091a0:	0510      	lsls	r0, r2, #20
 80091a2:	d522      	bpl.n	80091ea <_scanf_i+0x142>
 80091a4:	f10b 0b01 	add.w	fp, fp, #1
 80091a8:	f1b9 0f00 	cmp.w	r9, #0
 80091ac:	d003      	beq.n	80091b6 <_scanf_i+0x10e>
 80091ae:	3301      	adds	r3, #1
 80091b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	6873      	ldr	r3, [r6, #4]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	6073      	str	r3, [r6, #4]
 80091be:	dd1b      	ble.n	80091f8 <_scanf_i+0x150>
 80091c0:	6833      	ldr	r3, [r6, #0]
 80091c2:	3301      	adds	r3, #1
 80091c4:	6033      	str	r3, [r6, #0]
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	60a3      	str	r3, [r4, #8]
 80091cc:	e7d9      	b.n	8009182 <_scanf_i+0xda>
 80091ce:	f1bb 0f02 	cmp.w	fp, #2
 80091d2:	d1ae      	bne.n	8009132 <_scanf_i+0x8a>
 80091d4:	6822      	ldr	r2, [r4, #0]
 80091d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80091da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80091de:	d1bf      	bne.n	8009160 <_scanf_i+0xb8>
 80091e0:	2310      	movs	r3, #16
 80091e2:	6063      	str	r3, [r4, #4]
 80091e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091e8:	e7a2      	b.n	8009130 <_scanf_i+0x88>
 80091ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80091ee:	6022      	str	r2, [r4, #0]
 80091f0:	780b      	ldrb	r3, [r1, #0]
 80091f2:	f805 3b01 	strb.w	r3, [r5], #1
 80091f6:	e7de      	b.n	80091b6 <_scanf_i+0x10e>
 80091f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091fc:	4631      	mov	r1, r6
 80091fe:	4650      	mov	r0, sl
 8009200:	4798      	blx	r3
 8009202:	2800      	cmp	r0, #0
 8009204:	d0df      	beq.n	80091c6 <_scanf_i+0x11e>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	05d9      	lsls	r1, r3, #23
 800920a:	d50d      	bpl.n	8009228 <_scanf_i+0x180>
 800920c:	42bd      	cmp	r5, r7
 800920e:	d909      	bls.n	8009224 <_scanf_i+0x17c>
 8009210:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009218:	4632      	mov	r2, r6
 800921a:	4650      	mov	r0, sl
 800921c:	4798      	blx	r3
 800921e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009222:	464d      	mov	r5, r9
 8009224:	42bd      	cmp	r5, r7
 8009226:	d028      	beq.n	800927a <_scanf_i+0x1d2>
 8009228:	6822      	ldr	r2, [r4, #0]
 800922a:	f012 0210 	ands.w	r2, r2, #16
 800922e:	d113      	bne.n	8009258 <_scanf_i+0x1b0>
 8009230:	702a      	strb	r2, [r5, #0]
 8009232:	6863      	ldr	r3, [r4, #4]
 8009234:	9e01      	ldr	r6, [sp, #4]
 8009236:	4639      	mov	r1, r7
 8009238:	4650      	mov	r0, sl
 800923a:	47b0      	blx	r6
 800923c:	f8d8 3000 	ldr.w	r3, [r8]
 8009240:	6821      	ldr	r1, [r4, #0]
 8009242:	1d1a      	adds	r2, r3, #4
 8009244:	f8c8 2000 	str.w	r2, [r8]
 8009248:	f011 0f20 	tst.w	r1, #32
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	d00f      	beq.n	8009270 <_scanf_i+0x1c8>
 8009250:	6018      	str	r0, [r3, #0]
 8009252:	68e3      	ldr	r3, [r4, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	60e3      	str	r3, [r4, #12]
 8009258:	1bed      	subs	r5, r5, r7
 800925a:	44ab      	add	fp, r5
 800925c:	6925      	ldr	r5, [r4, #16]
 800925e:	445d      	add	r5, fp
 8009260:	6125      	str	r5, [r4, #16]
 8009262:	2000      	movs	r0, #0
 8009264:	b007      	add	sp, #28
 8009266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926a:	f04f 0b00 	mov.w	fp, #0
 800926e:	e7ca      	b.n	8009206 <_scanf_i+0x15e>
 8009270:	07ca      	lsls	r2, r1, #31
 8009272:	bf4c      	ite	mi
 8009274:	8018      	strhmi	r0, [r3, #0]
 8009276:	6018      	strpl	r0, [r3, #0]
 8009278:	e7eb      	b.n	8009252 <_scanf_i+0x1aa>
 800927a:	2001      	movs	r0, #1
 800927c:	e7f2      	b.n	8009264 <_scanf_i+0x1bc>
 800927e:	bf00      	nop
 8009280:	08009fc4 	.word	0x08009fc4
 8009284:	08009479 	.word	0x08009479
 8009288:	08006a21 	.word	0x08006a21
 800928c:	0800a416 	.word	0x0800a416

08009290 <_read_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d07      	ldr	r5, [pc, #28]	; (80092b0 <_read_r+0x20>)
 8009294:	4604      	mov	r4, r0
 8009296:	4608      	mov	r0, r1
 8009298:	4611      	mov	r1, r2
 800929a:	2200      	movs	r2, #0
 800929c:	602a      	str	r2, [r5, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	f7f8 fcfe 	bl	8001ca0 <_read>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_read_r+0x1e>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_read_r+0x1e>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	200003b8 	.word	0x200003b8
 80092b4:	00000000 	.word	0x00000000

080092b8 <nan>:
 80092b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80092c0 <nan+0x8>
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	00000000 	.word	0x00000000
 80092c4:	7ff80000 	.word	0x7ff80000

080092c8 <_sbrk_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d06      	ldr	r5, [pc, #24]	; (80092e4 <_sbrk_r+0x1c>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f7f8 fd52 	bl	8001d7c <_sbrk>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_sbrk_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_sbrk_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	200003b8 	.word	0x200003b8

080092e8 <__sccl>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	780b      	ldrb	r3, [r1, #0]
 80092ec:	4604      	mov	r4, r0
 80092ee:	2b5e      	cmp	r3, #94	; 0x5e
 80092f0:	bf0b      	itete	eq
 80092f2:	784b      	ldrbeq	r3, [r1, #1]
 80092f4:	1c48      	addne	r0, r1, #1
 80092f6:	1c88      	addeq	r0, r1, #2
 80092f8:	2200      	movne	r2, #0
 80092fa:	bf08      	it	eq
 80092fc:	2201      	moveq	r2, #1
 80092fe:	1e61      	subs	r1, r4, #1
 8009300:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009304:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009308:	42a9      	cmp	r1, r5
 800930a:	d1fb      	bne.n	8009304 <__sccl+0x1c>
 800930c:	b90b      	cbnz	r3, 8009312 <__sccl+0x2a>
 800930e:	3801      	subs	r0, #1
 8009310:	bd70      	pop	{r4, r5, r6, pc}
 8009312:	f082 0101 	eor.w	r1, r2, #1
 8009316:	54e1      	strb	r1, [r4, r3]
 8009318:	1c42      	adds	r2, r0, #1
 800931a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800931e:	2d2d      	cmp	r5, #45	; 0x2d
 8009320:	f102 36ff 	add.w	r6, r2, #4294967295
 8009324:	4610      	mov	r0, r2
 8009326:	d006      	beq.n	8009336 <__sccl+0x4e>
 8009328:	2d5d      	cmp	r5, #93	; 0x5d
 800932a:	d0f1      	beq.n	8009310 <__sccl+0x28>
 800932c:	b90d      	cbnz	r5, 8009332 <__sccl+0x4a>
 800932e:	4630      	mov	r0, r6
 8009330:	e7ee      	b.n	8009310 <__sccl+0x28>
 8009332:	462b      	mov	r3, r5
 8009334:	e7ef      	b.n	8009316 <__sccl+0x2e>
 8009336:	7816      	ldrb	r6, [r2, #0]
 8009338:	2e5d      	cmp	r6, #93	; 0x5d
 800933a:	d0fa      	beq.n	8009332 <__sccl+0x4a>
 800933c:	42b3      	cmp	r3, r6
 800933e:	dcf8      	bgt.n	8009332 <__sccl+0x4a>
 8009340:	4618      	mov	r0, r3
 8009342:	3001      	adds	r0, #1
 8009344:	4286      	cmp	r6, r0
 8009346:	5421      	strb	r1, [r4, r0]
 8009348:	dcfb      	bgt.n	8009342 <__sccl+0x5a>
 800934a:	43d8      	mvns	r0, r3
 800934c:	4430      	add	r0, r6
 800934e:	1c5d      	adds	r5, r3, #1
 8009350:	42b3      	cmp	r3, r6
 8009352:	bfa8      	it	ge
 8009354:	2000      	movge	r0, #0
 8009356:	182b      	adds	r3, r5, r0
 8009358:	3202      	adds	r2, #2
 800935a:	e7de      	b.n	800931a <__sccl+0x32>

0800935c <strncmp>:
 800935c:	b510      	push	{r4, lr}
 800935e:	b16a      	cbz	r2, 800937c <strncmp+0x20>
 8009360:	3901      	subs	r1, #1
 8009362:	1884      	adds	r4, r0, r2
 8009364:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009368:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800936c:	4293      	cmp	r3, r2
 800936e:	d103      	bne.n	8009378 <strncmp+0x1c>
 8009370:	42a0      	cmp	r0, r4
 8009372:	d001      	beq.n	8009378 <strncmp+0x1c>
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f5      	bne.n	8009364 <strncmp+0x8>
 8009378:	1a98      	subs	r0, r3, r2
 800937a:	bd10      	pop	{r4, pc}
 800937c:	4610      	mov	r0, r2
 800937e:	e7fc      	b.n	800937a <strncmp+0x1e>

08009380 <_strtoul_l.isra.0>:
 8009380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009384:	4e3b      	ldr	r6, [pc, #236]	; (8009474 <_strtoul_l.isra.0+0xf4>)
 8009386:	4686      	mov	lr, r0
 8009388:	468c      	mov	ip, r1
 800938a:	4660      	mov	r0, ip
 800938c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009390:	5da5      	ldrb	r5, [r4, r6]
 8009392:	f015 0508 	ands.w	r5, r5, #8
 8009396:	d1f8      	bne.n	800938a <_strtoul_l.isra.0+0xa>
 8009398:	2c2d      	cmp	r4, #45	; 0x2d
 800939a:	d134      	bne.n	8009406 <_strtoul_l.isra.0+0x86>
 800939c:	f89c 4000 	ldrb.w	r4, [ip]
 80093a0:	f04f 0801 	mov.w	r8, #1
 80093a4:	f100 0c02 	add.w	ip, r0, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d05e      	beq.n	800946a <_strtoul_l.isra.0+0xea>
 80093ac:	2b10      	cmp	r3, #16
 80093ae:	d10c      	bne.n	80093ca <_strtoul_l.isra.0+0x4a>
 80093b0:	2c30      	cmp	r4, #48	; 0x30
 80093b2:	d10a      	bne.n	80093ca <_strtoul_l.isra.0+0x4a>
 80093b4:	f89c 0000 	ldrb.w	r0, [ip]
 80093b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80093bc:	2858      	cmp	r0, #88	; 0x58
 80093be:	d14f      	bne.n	8009460 <_strtoul_l.isra.0+0xe0>
 80093c0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80093c4:	2310      	movs	r3, #16
 80093c6:	f10c 0c02 	add.w	ip, ip, #2
 80093ca:	f04f 37ff 	mov.w	r7, #4294967295
 80093ce:	2500      	movs	r5, #0
 80093d0:	fbb7 f7f3 	udiv	r7, r7, r3
 80093d4:	fb03 f907 	mul.w	r9, r3, r7
 80093d8:	ea6f 0909 	mvn.w	r9, r9
 80093dc:	4628      	mov	r0, r5
 80093de:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80093e2:	2e09      	cmp	r6, #9
 80093e4:	d818      	bhi.n	8009418 <_strtoul_l.isra.0+0x98>
 80093e6:	4634      	mov	r4, r6
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	dd24      	ble.n	8009436 <_strtoul_l.isra.0+0xb6>
 80093ec:	2d00      	cmp	r5, #0
 80093ee:	db1f      	blt.n	8009430 <_strtoul_l.isra.0+0xb0>
 80093f0:	4287      	cmp	r7, r0
 80093f2:	d31d      	bcc.n	8009430 <_strtoul_l.isra.0+0xb0>
 80093f4:	d101      	bne.n	80093fa <_strtoul_l.isra.0+0x7a>
 80093f6:	45a1      	cmp	r9, r4
 80093f8:	db1a      	blt.n	8009430 <_strtoul_l.isra.0+0xb0>
 80093fa:	fb00 4003 	mla	r0, r0, r3, r4
 80093fe:	2501      	movs	r5, #1
 8009400:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009404:	e7eb      	b.n	80093de <_strtoul_l.isra.0+0x5e>
 8009406:	2c2b      	cmp	r4, #43	; 0x2b
 8009408:	bf08      	it	eq
 800940a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800940e:	46a8      	mov	r8, r5
 8009410:	bf08      	it	eq
 8009412:	f100 0c02 	addeq.w	ip, r0, #2
 8009416:	e7c7      	b.n	80093a8 <_strtoul_l.isra.0+0x28>
 8009418:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800941c:	2e19      	cmp	r6, #25
 800941e:	d801      	bhi.n	8009424 <_strtoul_l.isra.0+0xa4>
 8009420:	3c37      	subs	r4, #55	; 0x37
 8009422:	e7e1      	b.n	80093e8 <_strtoul_l.isra.0+0x68>
 8009424:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009428:	2e19      	cmp	r6, #25
 800942a:	d804      	bhi.n	8009436 <_strtoul_l.isra.0+0xb6>
 800942c:	3c57      	subs	r4, #87	; 0x57
 800942e:	e7db      	b.n	80093e8 <_strtoul_l.isra.0+0x68>
 8009430:	f04f 35ff 	mov.w	r5, #4294967295
 8009434:	e7e4      	b.n	8009400 <_strtoul_l.isra.0+0x80>
 8009436:	2d00      	cmp	r5, #0
 8009438:	da07      	bge.n	800944a <_strtoul_l.isra.0+0xca>
 800943a:	2322      	movs	r3, #34	; 0x22
 800943c:	f8ce 3000 	str.w	r3, [lr]
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	b942      	cbnz	r2, 8009458 <_strtoul_l.isra.0+0xd8>
 8009446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800944a:	f1b8 0f00 	cmp.w	r8, #0
 800944e:	d000      	beq.n	8009452 <_strtoul_l.isra.0+0xd2>
 8009450:	4240      	negs	r0, r0
 8009452:	2a00      	cmp	r2, #0
 8009454:	d0f7      	beq.n	8009446 <_strtoul_l.isra.0+0xc6>
 8009456:	b10d      	cbz	r5, 800945c <_strtoul_l.isra.0+0xdc>
 8009458:	f10c 31ff 	add.w	r1, ip, #4294967295
 800945c:	6011      	str	r1, [r2, #0]
 800945e:	e7f2      	b.n	8009446 <_strtoul_l.isra.0+0xc6>
 8009460:	2430      	movs	r4, #48	; 0x30
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1b1      	bne.n	80093ca <_strtoul_l.isra.0+0x4a>
 8009466:	2308      	movs	r3, #8
 8009468:	e7af      	b.n	80093ca <_strtoul_l.isra.0+0x4a>
 800946a:	2c30      	cmp	r4, #48	; 0x30
 800946c:	d0a2      	beq.n	80093b4 <_strtoul_l.isra.0+0x34>
 800946e:	230a      	movs	r3, #10
 8009470:	e7ab      	b.n	80093ca <_strtoul_l.isra.0+0x4a>
 8009472:	bf00      	nop
 8009474:	0800a079 	.word	0x0800a079

08009478 <_strtoul_r>:
 8009478:	f7ff bf82 	b.w	8009380 <_strtoul_l.isra.0>

0800947c <__submore>:
 800947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009480:	460c      	mov	r4, r1
 8009482:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009488:	4299      	cmp	r1, r3
 800948a:	d11d      	bne.n	80094c8 <__submore+0x4c>
 800948c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009490:	f7ff fa2a 	bl	80088e8 <_malloc_r>
 8009494:	b918      	cbnz	r0, 800949e <__submore+0x22>
 8009496:	f04f 30ff 	mov.w	r0, #4294967295
 800949a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800949e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80094a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80094a8:	6360      	str	r0, [r4, #52]	; 0x34
 80094aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80094ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80094b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80094b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80094ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80094be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80094c2:	6020      	str	r0, [r4, #0]
 80094c4:	2000      	movs	r0, #0
 80094c6:	e7e8      	b.n	800949a <__submore+0x1e>
 80094c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80094ca:	0077      	lsls	r7, r6, #1
 80094cc:	463a      	mov	r2, r7
 80094ce:	f000 fa2d 	bl	800992c <_realloc_r>
 80094d2:	4605      	mov	r5, r0
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d0de      	beq.n	8009496 <__submore+0x1a>
 80094d8:	eb00 0806 	add.w	r8, r0, r6
 80094dc:	4601      	mov	r1, r0
 80094de:	4632      	mov	r2, r6
 80094e0:	4640      	mov	r0, r8
 80094e2:	f7fe fcd9 	bl	8007e98 <memcpy>
 80094e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80094ea:	f8c4 8000 	str.w	r8, [r4]
 80094ee:	e7e9      	b.n	80094c4 <__submore+0x48>

080094f0 <__ascii_wctomb>:
 80094f0:	b149      	cbz	r1, 8009506 <__ascii_wctomb+0x16>
 80094f2:	2aff      	cmp	r2, #255	; 0xff
 80094f4:	bf85      	ittet	hi
 80094f6:	238a      	movhi	r3, #138	; 0x8a
 80094f8:	6003      	strhi	r3, [r0, #0]
 80094fa:	700a      	strbls	r2, [r1, #0]
 80094fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009500:	bf98      	it	ls
 8009502:	2001      	movls	r0, #1
 8009504:	4770      	bx	lr
 8009506:	4608      	mov	r0, r1
 8009508:	4770      	bx	lr
	...

0800950c <__assert_func>:
 800950c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800950e:	4614      	mov	r4, r2
 8009510:	461a      	mov	r2, r3
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <__assert_func+0x2c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4605      	mov	r5, r0
 8009518:	68d8      	ldr	r0, [r3, #12]
 800951a:	b14c      	cbz	r4, 8009530 <__assert_func+0x24>
 800951c:	4b07      	ldr	r3, [pc, #28]	; (800953c <__assert_func+0x30>)
 800951e:	9100      	str	r1, [sp, #0]
 8009520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009524:	4906      	ldr	r1, [pc, #24]	; (8009540 <__assert_func+0x34>)
 8009526:	462b      	mov	r3, r5
 8009528:	f000 f9a6 	bl	8009878 <fiprintf>
 800952c:	f000 fc3e 	bl	8009dac <abort>
 8009530:	4b04      	ldr	r3, [pc, #16]	; (8009544 <__assert_func+0x38>)
 8009532:	461c      	mov	r4, r3
 8009534:	e7f3      	b.n	800951e <__assert_func+0x12>
 8009536:	bf00      	nop
 8009538:	20000010 	.word	0x20000010
 800953c:	0800a418 	.word	0x0800a418
 8009540:	0800a425 	.word	0x0800a425
 8009544:	0800a453 	.word	0x0800a453

08009548 <__sflush_r>:
 8009548:	898a      	ldrh	r2, [r1, #12]
 800954a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954e:	4605      	mov	r5, r0
 8009550:	0710      	lsls	r0, r2, #28
 8009552:	460c      	mov	r4, r1
 8009554:	d458      	bmi.n	8009608 <__sflush_r+0xc0>
 8009556:	684b      	ldr	r3, [r1, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	dc05      	bgt.n	8009568 <__sflush_r+0x20>
 800955c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800955e:	2b00      	cmp	r3, #0
 8009560:	dc02      	bgt.n	8009568 <__sflush_r+0x20>
 8009562:	2000      	movs	r0, #0
 8009564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800956a:	2e00      	cmp	r6, #0
 800956c:	d0f9      	beq.n	8009562 <__sflush_r+0x1a>
 800956e:	2300      	movs	r3, #0
 8009570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009574:	682f      	ldr	r7, [r5, #0]
 8009576:	602b      	str	r3, [r5, #0]
 8009578:	d032      	beq.n	80095e0 <__sflush_r+0x98>
 800957a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	075a      	lsls	r2, r3, #29
 8009580:	d505      	bpl.n	800958e <__sflush_r+0x46>
 8009582:	6863      	ldr	r3, [r4, #4]
 8009584:	1ac0      	subs	r0, r0, r3
 8009586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009588:	b10b      	cbz	r3, 800958e <__sflush_r+0x46>
 800958a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800958c:	1ac0      	subs	r0, r0, r3
 800958e:	2300      	movs	r3, #0
 8009590:	4602      	mov	r2, r0
 8009592:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009594:	6a21      	ldr	r1, [r4, #32]
 8009596:	4628      	mov	r0, r5
 8009598:	47b0      	blx	r6
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	89a3      	ldrh	r3, [r4, #12]
 800959e:	d106      	bne.n	80095ae <__sflush_r+0x66>
 80095a0:	6829      	ldr	r1, [r5, #0]
 80095a2:	291d      	cmp	r1, #29
 80095a4:	d82c      	bhi.n	8009600 <__sflush_r+0xb8>
 80095a6:	4a2a      	ldr	r2, [pc, #168]	; (8009650 <__sflush_r+0x108>)
 80095a8:	40ca      	lsrs	r2, r1
 80095aa:	07d6      	lsls	r6, r2, #31
 80095ac:	d528      	bpl.n	8009600 <__sflush_r+0xb8>
 80095ae:	2200      	movs	r2, #0
 80095b0:	6062      	str	r2, [r4, #4]
 80095b2:	04d9      	lsls	r1, r3, #19
 80095b4:	6922      	ldr	r2, [r4, #16]
 80095b6:	6022      	str	r2, [r4, #0]
 80095b8:	d504      	bpl.n	80095c4 <__sflush_r+0x7c>
 80095ba:	1c42      	adds	r2, r0, #1
 80095bc:	d101      	bne.n	80095c2 <__sflush_r+0x7a>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	b903      	cbnz	r3, 80095c4 <__sflush_r+0x7c>
 80095c2:	6560      	str	r0, [r4, #84]	; 0x54
 80095c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095c6:	602f      	str	r7, [r5, #0]
 80095c8:	2900      	cmp	r1, #0
 80095ca:	d0ca      	beq.n	8009562 <__sflush_r+0x1a>
 80095cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095d0:	4299      	cmp	r1, r3
 80095d2:	d002      	beq.n	80095da <__sflush_r+0x92>
 80095d4:	4628      	mov	r0, r5
 80095d6:	f7ff f937 	bl	8008848 <_free_r>
 80095da:	2000      	movs	r0, #0
 80095dc:	6360      	str	r0, [r4, #52]	; 0x34
 80095de:	e7c1      	b.n	8009564 <__sflush_r+0x1c>
 80095e0:	6a21      	ldr	r1, [r4, #32]
 80095e2:	2301      	movs	r3, #1
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b0      	blx	r6
 80095e8:	1c41      	adds	r1, r0, #1
 80095ea:	d1c7      	bne.n	800957c <__sflush_r+0x34>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0c4      	beq.n	800957c <__sflush_r+0x34>
 80095f2:	2b1d      	cmp	r3, #29
 80095f4:	d001      	beq.n	80095fa <__sflush_r+0xb2>
 80095f6:	2b16      	cmp	r3, #22
 80095f8:	d101      	bne.n	80095fe <__sflush_r+0xb6>
 80095fa:	602f      	str	r7, [r5, #0]
 80095fc:	e7b1      	b.n	8009562 <__sflush_r+0x1a>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	e7ad      	b.n	8009564 <__sflush_r+0x1c>
 8009608:	690f      	ldr	r7, [r1, #16]
 800960a:	2f00      	cmp	r7, #0
 800960c:	d0a9      	beq.n	8009562 <__sflush_r+0x1a>
 800960e:	0793      	lsls	r3, r2, #30
 8009610:	680e      	ldr	r6, [r1, #0]
 8009612:	bf08      	it	eq
 8009614:	694b      	ldreq	r3, [r1, #20]
 8009616:	600f      	str	r7, [r1, #0]
 8009618:	bf18      	it	ne
 800961a:	2300      	movne	r3, #0
 800961c:	eba6 0807 	sub.w	r8, r6, r7
 8009620:	608b      	str	r3, [r1, #8]
 8009622:	f1b8 0f00 	cmp.w	r8, #0
 8009626:	dd9c      	ble.n	8009562 <__sflush_r+0x1a>
 8009628:	6a21      	ldr	r1, [r4, #32]
 800962a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800962c:	4643      	mov	r3, r8
 800962e:	463a      	mov	r2, r7
 8009630:	4628      	mov	r0, r5
 8009632:	47b0      	blx	r6
 8009634:	2800      	cmp	r0, #0
 8009636:	dc06      	bgt.n	8009646 <__sflush_r+0xfe>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800963e:	81a3      	strh	r3, [r4, #12]
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	e78e      	b.n	8009564 <__sflush_r+0x1c>
 8009646:	4407      	add	r7, r0
 8009648:	eba8 0800 	sub.w	r8, r8, r0
 800964c:	e7e9      	b.n	8009622 <__sflush_r+0xda>
 800964e:	bf00      	nop
 8009650:	20400001 	.word	0x20400001

08009654 <_fflush_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	690b      	ldr	r3, [r1, #16]
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
 800965c:	b913      	cbnz	r3, 8009664 <_fflush_r+0x10>
 800965e:	2500      	movs	r5, #0
 8009660:	4628      	mov	r0, r5
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	b118      	cbz	r0, 800966e <_fflush_r+0x1a>
 8009666:	6983      	ldr	r3, [r0, #24]
 8009668:	b90b      	cbnz	r3, 800966e <_fflush_r+0x1a>
 800966a:	f000 f887 	bl	800977c <__sinit>
 800966e:	4b14      	ldr	r3, [pc, #80]	; (80096c0 <_fflush_r+0x6c>)
 8009670:	429c      	cmp	r4, r3
 8009672:	d11b      	bne.n	80096ac <_fflush_r+0x58>
 8009674:	686c      	ldr	r4, [r5, #4]
 8009676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0ef      	beq.n	800965e <_fflush_r+0xa>
 800967e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009680:	07d0      	lsls	r0, r2, #31
 8009682:	d404      	bmi.n	800968e <_fflush_r+0x3a>
 8009684:	0599      	lsls	r1, r3, #22
 8009686:	d402      	bmi.n	800968e <_fflush_r+0x3a>
 8009688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800968a:	f000 f927 	bl	80098dc <__retarget_lock_acquire_recursive>
 800968e:	4628      	mov	r0, r5
 8009690:	4621      	mov	r1, r4
 8009692:	f7ff ff59 	bl	8009548 <__sflush_r>
 8009696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009698:	07da      	lsls	r2, r3, #31
 800969a:	4605      	mov	r5, r0
 800969c:	d4e0      	bmi.n	8009660 <_fflush_r+0xc>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	059b      	lsls	r3, r3, #22
 80096a2:	d4dd      	bmi.n	8009660 <_fflush_r+0xc>
 80096a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096a6:	f000 f91a 	bl	80098de <__retarget_lock_release_recursive>
 80096aa:	e7d9      	b.n	8009660 <_fflush_r+0xc>
 80096ac:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <_fflush_r+0x70>)
 80096ae:	429c      	cmp	r4, r3
 80096b0:	d101      	bne.n	80096b6 <_fflush_r+0x62>
 80096b2:	68ac      	ldr	r4, [r5, #8]
 80096b4:	e7df      	b.n	8009676 <_fflush_r+0x22>
 80096b6:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <_fflush_r+0x74>)
 80096b8:	429c      	cmp	r4, r3
 80096ba:	bf08      	it	eq
 80096bc:	68ec      	ldreq	r4, [r5, #12]
 80096be:	e7da      	b.n	8009676 <_fflush_r+0x22>
 80096c0:	0800a474 	.word	0x0800a474
 80096c4:	0800a494 	.word	0x0800a494
 80096c8:	0800a454 	.word	0x0800a454

080096cc <std>:
 80096cc:	2300      	movs	r3, #0
 80096ce:	b510      	push	{r4, lr}
 80096d0:	4604      	mov	r4, r0
 80096d2:	e9c0 3300 	strd	r3, r3, [r0]
 80096d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096da:	6083      	str	r3, [r0, #8]
 80096dc:	8181      	strh	r1, [r0, #12]
 80096de:	6643      	str	r3, [r0, #100]	; 0x64
 80096e0:	81c2      	strh	r2, [r0, #14]
 80096e2:	6183      	str	r3, [r0, #24]
 80096e4:	4619      	mov	r1, r3
 80096e6:	2208      	movs	r2, #8
 80096e8:	305c      	adds	r0, #92	; 0x5c
 80096ea:	f7fb fbcf 	bl	8004e8c <memset>
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <std+0x38>)
 80096f0:	6263      	str	r3, [r4, #36]	; 0x24
 80096f2:	4b05      	ldr	r3, [pc, #20]	; (8009708 <std+0x3c>)
 80096f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80096f6:	4b05      	ldr	r3, [pc, #20]	; (800970c <std+0x40>)
 80096f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096fa:	4b05      	ldr	r3, [pc, #20]	; (8009710 <std+0x44>)
 80096fc:	6224      	str	r4, [r4, #32]
 80096fe:	6323      	str	r3, [r4, #48]	; 0x30
 8009700:	bd10      	pop	{r4, pc}
 8009702:	bf00      	nop
 8009704:	08005c35 	.word	0x08005c35
 8009708:	08005c5b 	.word	0x08005c5b
 800970c:	08005c93 	.word	0x08005c93
 8009710:	08005cb7 	.word	0x08005cb7

08009714 <_cleanup_r>:
 8009714:	4901      	ldr	r1, [pc, #4]	; (800971c <_cleanup_r+0x8>)
 8009716:	f000 b8c1 	b.w	800989c <_fwalk_reent>
 800971a:	bf00      	nop
 800971c:	08009655 	.word	0x08009655

08009720 <__sfmoreglue>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	1e4a      	subs	r2, r1, #1
 8009724:	2568      	movs	r5, #104	; 0x68
 8009726:	4355      	muls	r5, r2
 8009728:	460e      	mov	r6, r1
 800972a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800972e:	f7ff f8db 	bl	80088e8 <_malloc_r>
 8009732:	4604      	mov	r4, r0
 8009734:	b140      	cbz	r0, 8009748 <__sfmoreglue+0x28>
 8009736:	2100      	movs	r1, #0
 8009738:	e9c0 1600 	strd	r1, r6, [r0]
 800973c:	300c      	adds	r0, #12
 800973e:	60a0      	str	r0, [r4, #8]
 8009740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009744:	f7fb fba2 	bl	8004e8c <memset>
 8009748:	4620      	mov	r0, r4
 800974a:	bd70      	pop	{r4, r5, r6, pc}

0800974c <__sfp_lock_acquire>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__sfp_lock_acquire+0x8>)
 800974e:	f000 b8c5 	b.w	80098dc <__retarget_lock_acquire_recursive>
 8009752:	bf00      	nop
 8009754:	200003c4 	.word	0x200003c4

08009758 <__sfp_lock_release>:
 8009758:	4801      	ldr	r0, [pc, #4]	; (8009760 <__sfp_lock_release+0x8>)
 800975a:	f000 b8c0 	b.w	80098de <__retarget_lock_release_recursive>
 800975e:	bf00      	nop
 8009760:	200003c4 	.word	0x200003c4

08009764 <__sinit_lock_acquire>:
 8009764:	4801      	ldr	r0, [pc, #4]	; (800976c <__sinit_lock_acquire+0x8>)
 8009766:	f000 b8b9 	b.w	80098dc <__retarget_lock_acquire_recursive>
 800976a:	bf00      	nop
 800976c:	200003bf 	.word	0x200003bf

08009770 <__sinit_lock_release>:
 8009770:	4801      	ldr	r0, [pc, #4]	; (8009778 <__sinit_lock_release+0x8>)
 8009772:	f000 b8b4 	b.w	80098de <__retarget_lock_release_recursive>
 8009776:	bf00      	nop
 8009778:	200003bf 	.word	0x200003bf

0800977c <__sinit>:
 800977c:	b510      	push	{r4, lr}
 800977e:	4604      	mov	r4, r0
 8009780:	f7ff fff0 	bl	8009764 <__sinit_lock_acquire>
 8009784:	69a3      	ldr	r3, [r4, #24]
 8009786:	b11b      	cbz	r3, 8009790 <__sinit+0x14>
 8009788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800978c:	f7ff bff0 	b.w	8009770 <__sinit_lock_release>
 8009790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009794:	6523      	str	r3, [r4, #80]	; 0x50
 8009796:	4b13      	ldr	r3, [pc, #76]	; (80097e4 <__sinit+0x68>)
 8009798:	4a13      	ldr	r2, [pc, #76]	; (80097e8 <__sinit+0x6c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	62a2      	str	r2, [r4, #40]	; 0x28
 800979e:	42a3      	cmp	r3, r4
 80097a0:	bf04      	itt	eq
 80097a2:	2301      	moveq	r3, #1
 80097a4:	61a3      	streq	r3, [r4, #24]
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 f820 	bl	80097ec <__sfp>
 80097ac:	6060      	str	r0, [r4, #4]
 80097ae:	4620      	mov	r0, r4
 80097b0:	f000 f81c 	bl	80097ec <__sfp>
 80097b4:	60a0      	str	r0, [r4, #8]
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 f818 	bl	80097ec <__sfp>
 80097bc:	2200      	movs	r2, #0
 80097be:	60e0      	str	r0, [r4, #12]
 80097c0:	2104      	movs	r1, #4
 80097c2:	6860      	ldr	r0, [r4, #4]
 80097c4:	f7ff ff82 	bl	80096cc <std>
 80097c8:	68a0      	ldr	r0, [r4, #8]
 80097ca:	2201      	movs	r2, #1
 80097cc:	2109      	movs	r1, #9
 80097ce:	f7ff ff7d 	bl	80096cc <std>
 80097d2:	68e0      	ldr	r0, [r4, #12]
 80097d4:	2202      	movs	r2, #2
 80097d6:	2112      	movs	r1, #18
 80097d8:	f7ff ff78 	bl	80096cc <std>
 80097dc:	2301      	movs	r3, #1
 80097de:	61a3      	str	r3, [r4, #24]
 80097e0:	e7d2      	b.n	8009788 <__sinit+0xc>
 80097e2:	bf00      	nop
 80097e4:	08009fe8 	.word	0x08009fe8
 80097e8:	08009715 	.word	0x08009715

080097ec <__sfp>:
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	4607      	mov	r7, r0
 80097f0:	f7ff ffac 	bl	800974c <__sfp_lock_acquire>
 80097f4:	4b1e      	ldr	r3, [pc, #120]	; (8009870 <__sfp+0x84>)
 80097f6:	681e      	ldr	r6, [r3, #0]
 80097f8:	69b3      	ldr	r3, [r6, #24]
 80097fa:	b913      	cbnz	r3, 8009802 <__sfp+0x16>
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff ffbd 	bl	800977c <__sinit>
 8009802:	3648      	adds	r6, #72	; 0x48
 8009804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009808:	3b01      	subs	r3, #1
 800980a:	d503      	bpl.n	8009814 <__sfp+0x28>
 800980c:	6833      	ldr	r3, [r6, #0]
 800980e:	b30b      	cbz	r3, 8009854 <__sfp+0x68>
 8009810:	6836      	ldr	r6, [r6, #0]
 8009812:	e7f7      	b.n	8009804 <__sfp+0x18>
 8009814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009818:	b9d5      	cbnz	r5, 8009850 <__sfp+0x64>
 800981a:	4b16      	ldr	r3, [pc, #88]	; (8009874 <__sfp+0x88>)
 800981c:	60e3      	str	r3, [r4, #12]
 800981e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009822:	6665      	str	r5, [r4, #100]	; 0x64
 8009824:	f000 f859 	bl	80098da <__retarget_lock_init_recursive>
 8009828:	f7ff ff96 	bl	8009758 <__sfp_lock_release>
 800982c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009834:	6025      	str	r5, [r4, #0]
 8009836:	61a5      	str	r5, [r4, #24]
 8009838:	2208      	movs	r2, #8
 800983a:	4629      	mov	r1, r5
 800983c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009840:	f7fb fb24 	bl	8004e8c <memset>
 8009844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800984c:	4620      	mov	r0, r4
 800984e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009850:	3468      	adds	r4, #104	; 0x68
 8009852:	e7d9      	b.n	8009808 <__sfp+0x1c>
 8009854:	2104      	movs	r1, #4
 8009856:	4638      	mov	r0, r7
 8009858:	f7ff ff62 	bl	8009720 <__sfmoreglue>
 800985c:	4604      	mov	r4, r0
 800985e:	6030      	str	r0, [r6, #0]
 8009860:	2800      	cmp	r0, #0
 8009862:	d1d5      	bne.n	8009810 <__sfp+0x24>
 8009864:	f7ff ff78 	bl	8009758 <__sfp_lock_release>
 8009868:	230c      	movs	r3, #12
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	e7ee      	b.n	800984c <__sfp+0x60>
 800986e:	bf00      	nop
 8009870:	08009fe8 	.word	0x08009fe8
 8009874:	ffff0001 	.word	0xffff0001

08009878 <fiprintf>:
 8009878:	b40e      	push	{r1, r2, r3}
 800987a:	b503      	push	{r0, r1, lr}
 800987c:	4601      	mov	r1, r0
 800987e:	ab03      	add	r3, sp, #12
 8009880:	4805      	ldr	r0, [pc, #20]	; (8009898 <fiprintf+0x20>)
 8009882:	f853 2b04 	ldr.w	r2, [r3], #4
 8009886:	6800      	ldr	r0, [r0, #0]
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	f000 f89f 	bl	80099cc <_vfiprintf_r>
 800988e:	b002      	add	sp, #8
 8009890:	f85d eb04 	ldr.w	lr, [sp], #4
 8009894:	b003      	add	sp, #12
 8009896:	4770      	bx	lr
 8009898:	20000010 	.word	0x20000010

0800989c <_fwalk_reent>:
 800989c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a0:	4606      	mov	r6, r0
 80098a2:	4688      	mov	r8, r1
 80098a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098a8:	2700      	movs	r7, #0
 80098aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098ae:	f1b9 0901 	subs.w	r9, r9, #1
 80098b2:	d505      	bpl.n	80098c0 <_fwalk_reent+0x24>
 80098b4:	6824      	ldr	r4, [r4, #0]
 80098b6:	2c00      	cmp	r4, #0
 80098b8:	d1f7      	bne.n	80098aa <_fwalk_reent+0xe>
 80098ba:	4638      	mov	r0, r7
 80098bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c0:	89ab      	ldrh	r3, [r5, #12]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d907      	bls.n	80098d6 <_fwalk_reent+0x3a>
 80098c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098ca:	3301      	adds	r3, #1
 80098cc:	d003      	beq.n	80098d6 <_fwalk_reent+0x3a>
 80098ce:	4629      	mov	r1, r5
 80098d0:	4630      	mov	r0, r6
 80098d2:	47c0      	blx	r8
 80098d4:	4307      	orrs	r7, r0
 80098d6:	3568      	adds	r5, #104	; 0x68
 80098d8:	e7e9      	b.n	80098ae <_fwalk_reent+0x12>

080098da <__retarget_lock_init_recursive>:
 80098da:	4770      	bx	lr

080098dc <__retarget_lock_acquire_recursive>:
 80098dc:	4770      	bx	lr

080098de <__retarget_lock_release_recursive>:
 80098de:	4770      	bx	lr

080098e0 <memmove>:
 80098e0:	4288      	cmp	r0, r1
 80098e2:	b510      	push	{r4, lr}
 80098e4:	eb01 0402 	add.w	r4, r1, r2
 80098e8:	d902      	bls.n	80098f0 <memmove+0x10>
 80098ea:	4284      	cmp	r4, r0
 80098ec:	4623      	mov	r3, r4
 80098ee:	d807      	bhi.n	8009900 <memmove+0x20>
 80098f0:	1e43      	subs	r3, r0, #1
 80098f2:	42a1      	cmp	r1, r4
 80098f4:	d008      	beq.n	8009908 <memmove+0x28>
 80098f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098fe:	e7f8      	b.n	80098f2 <memmove+0x12>
 8009900:	4402      	add	r2, r0
 8009902:	4601      	mov	r1, r0
 8009904:	428a      	cmp	r2, r1
 8009906:	d100      	bne.n	800990a <memmove+0x2a>
 8009908:	bd10      	pop	{r4, pc}
 800990a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800990e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009912:	e7f7      	b.n	8009904 <memmove+0x24>

08009914 <__malloc_lock>:
 8009914:	4801      	ldr	r0, [pc, #4]	; (800991c <__malloc_lock+0x8>)
 8009916:	f7ff bfe1 	b.w	80098dc <__retarget_lock_acquire_recursive>
 800991a:	bf00      	nop
 800991c:	200003c0 	.word	0x200003c0

08009920 <__malloc_unlock>:
 8009920:	4801      	ldr	r0, [pc, #4]	; (8009928 <__malloc_unlock+0x8>)
 8009922:	f7ff bfdc 	b.w	80098de <__retarget_lock_release_recursive>
 8009926:	bf00      	nop
 8009928:	200003c0 	.word	0x200003c0

0800992c <_realloc_r>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	4607      	mov	r7, r0
 8009930:	4614      	mov	r4, r2
 8009932:	460e      	mov	r6, r1
 8009934:	b921      	cbnz	r1, 8009940 <_realloc_r+0x14>
 8009936:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800993a:	4611      	mov	r1, r2
 800993c:	f7fe bfd4 	b.w	80088e8 <_malloc_r>
 8009940:	b922      	cbnz	r2, 800994c <_realloc_r+0x20>
 8009942:	f7fe ff81 	bl	8008848 <_free_r>
 8009946:	4625      	mov	r5, r4
 8009948:	4628      	mov	r0, r5
 800994a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800994c:	f000 fa9a 	bl	8009e84 <_malloc_usable_size_r>
 8009950:	42a0      	cmp	r0, r4
 8009952:	d20f      	bcs.n	8009974 <_realloc_r+0x48>
 8009954:	4621      	mov	r1, r4
 8009956:	4638      	mov	r0, r7
 8009958:	f7fe ffc6 	bl	80088e8 <_malloc_r>
 800995c:	4605      	mov	r5, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	d0f2      	beq.n	8009948 <_realloc_r+0x1c>
 8009962:	4631      	mov	r1, r6
 8009964:	4622      	mov	r2, r4
 8009966:	f7fe fa97 	bl	8007e98 <memcpy>
 800996a:	4631      	mov	r1, r6
 800996c:	4638      	mov	r0, r7
 800996e:	f7fe ff6b 	bl	8008848 <_free_r>
 8009972:	e7e9      	b.n	8009948 <_realloc_r+0x1c>
 8009974:	4635      	mov	r5, r6
 8009976:	e7e7      	b.n	8009948 <_realloc_r+0x1c>

08009978 <__sfputc_r>:
 8009978:	6893      	ldr	r3, [r2, #8]
 800997a:	3b01      	subs	r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	b410      	push	{r4}
 8009980:	6093      	str	r3, [r2, #8]
 8009982:	da08      	bge.n	8009996 <__sfputc_r+0x1e>
 8009984:	6994      	ldr	r4, [r2, #24]
 8009986:	42a3      	cmp	r3, r4
 8009988:	db01      	blt.n	800998e <__sfputc_r+0x16>
 800998a:	290a      	cmp	r1, #10
 800998c:	d103      	bne.n	8009996 <__sfputc_r+0x1e>
 800998e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009992:	f000 b94b 	b.w	8009c2c <__swbuf_r>
 8009996:	6813      	ldr	r3, [r2, #0]
 8009998:	1c58      	adds	r0, r3, #1
 800999a:	6010      	str	r0, [r2, #0]
 800999c:	7019      	strb	r1, [r3, #0]
 800999e:	4608      	mov	r0, r1
 80099a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <__sfputs_r>:
 80099a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a8:	4606      	mov	r6, r0
 80099aa:	460f      	mov	r7, r1
 80099ac:	4614      	mov	r4, r2
 80099ae:	18d5      	adds	r5, r2, r3
 80099b0:	42ac      	cmp	r4, r5
 80099b2:	d101      	bne.n	80099b8 <__sfputs_r+0x12>
 80099b4:	2000      	movs	r0, #0
 80099b6:	e007      	b.n	80099c8 <__sfputs_r+0x22>
 80099b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099bc:	463a      	mov	r2, r7
 80099be:	4630      	mov	r0, r6
 80099c0:	f7ff ffda 	bl	8009978 <__sfputc_r>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d1f3      	bne.n	80099b0 <__sfputs_r+0xa>
 80099c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099cc <_vfiprintf_r>:
 80099cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	460d      	mov	r5, r1
 80099d2:	b09d      	sub	sp, #116	; 0x74
 80099d4:	4614      	mov	r4, r2
 80099d6:	4698      	mov	r8, r3
 80099d8:	4606      	mov	r6, r0
 80099da:	b118      	cbz	r0, 80099e4 <_vfiprintf_r+0x18>
 80099dc:	6983      	ldr	r3, [r0, #24]
 80099de:	b90b      	cbnz	r3, 80099e4 <_vfiprintf_r+0x18>
 80099e0:	f7ff fecc 	bl	800977c <__sinit>
 80099e4:	4b89      	ldr	r3, [pc, #548]	; (8009c0c <_vfiprintf_r+0x240>)
 80099e6:	429d      	cmp	r5, r3
 80099e8:	d11b      	bne.n	8009a22 <_vfiprintf_r+0x56>
 80099ea:	6875      	ldr	r5, [r6, #4]
 80099ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ee:	07d9      	lsls	r1, r3, #31
 80099f0:	d405      	bmi.n	80099fe <_vfiprintf_r+0x32>
 80099f2:	89ab      	ldrh	r3, [r5, #12]
 80099f4:	059a      	lsls	r2, r3, #22
 80099f6:	d402      	bmi.n	80099fe <_vfiprintf_r+0x32>
 80099f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099fa:	f7ff ff6f 	bl	80098dc <__retarget_lock_acquire_recursive>
 80099fe:	89ab      	ldrh	r3, [r5, #12]
 8009a00:	071b      	lsls	r3, r3, #28
 8009a02:	d501      	bpl.n	8009a08 <_vfiprintf_r+0x3c>
 8009a04:	692b      	ldr	r3, [r5, #16]
 8009a06:	b9eb      	cbnz	r3, 8009a44 <_vfiprintf_r+0x78>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f000 f960 	bl	8009cd0 <__swsetup_r>
 8009a10:	b1c0      	cbz	r0, 8009a44 <_vfiprintf_r+0x78>
 8009a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a14:	07dc      	lsls	r4, r3, #31
 8009a16:	d50e      	bpl.n	8009a36 <_vfiprintf_r+0x6a>
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	b01d      	add	sp, #116	; 0x74
 8009a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a22:	4b7b      	ldr	r3, [pc, #492]	; (8009c10 <_vfiprintf_r+0x244>)
 8009a24:	429d      	cmp	r5, r3
 8009a26:	d101      	bne.n	8009a2c <_vfiprintf_r+0x60>
 8009a28:	68b5      	ldr	r5, [r6, #8]
 8009a2a:	e7df      	b.n	80099ec <_vfiprintf_r+0x20>
 8009a2c:	4b79      	ldr	r3, [pc, #484]	; (8009c14 <_vfiprintf_r+0x248>)
 8009a2e:	429d      	cmp	r5, r3
 8009a30:	bf08      	it	eq
 8009a32:	68f5      	ldreq	r5, [r6, #12]
 8009a34:	e7da      	b.n	80099ec <_vfiprintf_r+0x20>
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	0598      	lsls	r0, r3, #22
 8009a3a:	d4ed      	bmi.n	8009a18 <_vfiprintf_r+0x4c>
 8009a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a3e:	f7ff ff4e 	bl	80098de <__retarget_lock_release_recursive>
 8009a42:	e7e9      	b.n	8009a18 <_vfiprintf_r+0x4c>
 8009a44:	2300      	movs	r3, #0
 8009a46:	9309      	str	r3, [sp, #36]	; 0x24
 8009a48:	2320      	movs	r3, #32
 8009a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a52:	2330      	movs	r3, #48	; 0x30
 8009a54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c18 <_vfiprintf_r+0x24c>
 8009a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a5c:	f04f 0901 	mov.w	r9, #1
 8009a60:	4623      	mov	r3, r4
 8009a62:	469a      	mov	sl, r3
 8009a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a68:	b10a      	cbz	r2, 8009a6e <_vfiprintf_r+0xa2>
 8009a6a:	2a25      	cmp	r2, #37	; 0x25
 8009a6c:	d1f9      	bne.n	8009a62 <_vfiprintf_r+0x96>
 8009a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a72:	d00b      	beq.n	8009a8c <_vfiprintf_r+0xc0>
 8009a74:	465b      	mov	r3, fp
 8009a76:	4622      	mov	r2, r4
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff ff93 	bl	80099a6 <__sfputs_r>
 8009a80:	3001      	adds	r0, #1
 8009a82:	f000 80aa 	beq.w	8009bda <_vfiprintf_r+0x20e>
 8009a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a88:	445a      	add	r2, fp
 8009a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 80a2 	beq.w	8009bda <_vfiprintf_r+0x20e>
 8009a96:	2300      	movs	r3, #0
 8009a98:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa0:	f10a 0a01 	add.w	sl, sl, #1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	9307      	str	r3, [sp, #28]
 8009aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aac:	931a      	str	r3, [sp, #104]	; 0x68
 8009aae:	4654      	mov	r4, sl
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab6:	4858      	ldr	r0, [pc, #352]	; (8009c18 <_vfiprintf_r+0x24c>)
 8009ab8:	f7f6 fb92 	bl	80001e0 <memchr>
 8009abc:	9a04      	ldr	r2, [sp, #16]
 8009abe:	b9d8      	cbnz	r0, 8009af8 <_vfiprintf_r+0x12c>
 8009ac0:	06d1      	lsls	r1, r2, #27
 8009ac2:	bf44      	itt	mi
 8009ac4:	2320      	movmi	r3, #32
 8009ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aca:	0713      	lsls	r3, r2, #28
 8009acc:	bf44      	itt	mi
 8009ace:	232b      	movmi	r3, #43	; 0x2b
 8009ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8009ada:	d015      	beq.n	8009b08 <_vfiprintf_r+0x13c>
 8009adc:	9a07      	ldr	r2, [sp, #28]
 8009ade:	4654      	mov	r4, sl
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	f04f 0c0a 	mov.w	ip, #10
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aec:	3b30      	subs	r3, #48	; 0x30
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d94e      	bls.n	8009b90 <_vfiprintf_r+0x1c4>
 8009af2:	b1b0      	cbz	r0, 8009b22 <_vfiprintf_r+0x156>
 8009af4:	9207      	str	r2, [sp, #28]
 8009af6:	e014      	b.n	8009b22 <_vfiprintf_r+0x156>
 8009af8:	eba0 0308 	sub.w	r3, r0, r8
 8009afc:	fa09 f303 	lsl.w	r3, r9, r3
 8009b00:	4313      	orrs	r3, r2
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	46a2      	mov	sl, r4
 8009b06:	e7d2      	b.n	8009aae <_vfiprintf_r+0xe2>
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	1d19      	adds	r1, r3, #4
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	9103      	str	r1, [sp, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	bfbb      	ittet	lt
 8009b14:	425b      	neglt	r3, r3
 8009b16:	f042 0202 	orrlt.w	r2, r2, #2
 8009b1a:	9307      	strge	r3, [sp, #28]
 8009b1c:	9307      	strlt	r3, [sp, #28]
 8009b1e:	bfb8      	it	lt
 8009b20:	9204      	strlt	r2, [sp, #16]
 8009b22:	7823      	ldrb	r3, [r4, #0]
 8009b24:	2b2e      	cmp	r3, #46	; 0x2e
 8009b26:	d10c      	bne.n	8009b42 <_vfiprintf_r+0x176>
 8009b28:	7863      	ldrb	r3, [r4, #1]
 8009b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2c:	d135      	bne.n	8009b9a <_vfiprintf_r+0x1ce>
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	1d1a      	adds	r2, r3, #4
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	9203      	str	r2, [sp, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfb8      	it	lt
 8009b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b3e:	3402      	adds	r4, #2
 8009b40:	9305      	str	r3, [sp, #20]
 8009b42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c28 <_vfiprintf_r+0x25c>
 8009b46:	7821      	ldrb	r1, [r4, #0]
 8009b48:	2203      	movs	r2, #3
 8009b4a:	4650      	mov	r0, sl
 8009b4c:	f7f6 fb48 	bl	80001e0 <memchr>
 8009b50:	b140      	cbz	r0, 8009b64 <_vfiprintf_r+0x198>
 8009b52:	2340      	movs	r3, #64	; 0x40
 8009b54:	eba0 000a 	sub.w	r0, r0, sl
 8009b58:	fa03 f000 	lsl.w	r0, r3, r0
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	4303      	orrs	r3, r0
 8009b60:	3401      	adds	r4, #1
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b68:	482c      	ldr	r0, [pc, #176]	; (8009c1c <_vfiprintf_r+0x250>)
 8009b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b6e:	2206      	movs	r2, #6
 8009b70:	f7f6 fb36 	bl	80001e0 <memchr>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d03f      	beq.n	8009bf8 <_vfiprintf_r+0x22c>
 8009b78:	4b29      	ldr	r3, [pc, #164]	; (8009c20 <_vfiprintf_r+0x254>)
 8009b7a:	bb1b      	cbnz	r3, 8009bc4 <_vfiprintf_r+0x1f8>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	3307      	adds	r3, #7
 8009b80:	f023 0307 	bic.w	r3, r3, #7
 8009b84:	3308      	adds	r3, #8
 8009b86:	9303      	str	r3, [sp, #12]
 8009b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8a:	443b      	add	r3, r7
 8009b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b8e:	e767      	b.n	8009a60 <_vfiprintf_r+0x94>
 8009b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b94:	460c      	mov	r4, r1
 8009b96:	2001      	movs	r0, #1
 8009b98:	e7a5      	b.n	8009ae6 <_vfiprintf_r+0x11a>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	9305      	str	r3, [sp, #20]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f04f 0c0a 	mov.w	ip, #10
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bac:	3a30      	subs	r2, #48	; 0x30
 8009bae:	2a09      	cmp	r2, #9
 8009bb0:	d903      	bls.n	8009bba <_vfiprintf_r+0x1ee>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0c5      	beq.n	8009b42 <_vfiprintf_r+0x176>
 8009bb6:	9105      	str	r1, [sp, #20]
 8009bb8:	e7c3      	b.n	8009b42 <_vfiprintf_r+0x176>
 8009bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e7f0      	b.n	8009ba6 <_vfiprintf_r+0x1da>
 8009bc4:	ab03      	add	r3, sp, #12
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4b16      	ldr	r3, [pc, #88]	; (8009c24 <_vfiprintf_r+0x258>)
 8009bcc:	a904      	add	r1, sp, #16
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7fb fa04 	bl	8004fdc <_printf_float>
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	1c78      	adds	r0, r7, #1
 8009bd8:	d1d6      	bne.n	8009b88 <_vfiprintf_r+0x1bc>
 8009bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bdc:	07d9      	lsls	r1, r3, #31
 8009bde:	d405      	bmi.n	8009bec <_vfiprintf_r+0x220>
 8009be0:	89ab      	ldrh	r3, [r5, #12]
 8009be2:	059a      	lsls	r2, r3, #22
 8009be4:	d402      	bmi.n	8009bec <_vfiprintf_r+0x220>
 8009be6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009be8:	f7ff fe79 	bl	80098de <__retarget_lock_release_recursive>
 8009bec:	89ab      	ldrh	r3, [r5, #12]
 8009bee:	065b      	lsls	r3, r3, #25
 8009bf0:	f53f af12 	bmi.w	8009a18 <_vfiprintf_r+0x4c>
 8009bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bf6:	e711      	b.n	8009a1c <_vfiprintf_r+0x50>
 8009bf8:	ab03      	add	r3, sp, #12
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <_vfiprintf_r+0x258>)
 8009c00:	a904      	add	r1, sp, #16
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7fb fc8e 	bl	8005524 <_printf_i>
 8009c08:	e7e4      	b.n	8009bd4 <_vfiprintf_r+0x208>
 8009c0a:	bf00      	nop
 8009c0c:	0800a474 	.word	0x0800a474
 8009c10:	0800a494 	.word	0x0800a494
 8009c14:	0800a454 	.word	0x0800a454
 8009c18:	0800a3ec 	.word	0x0800a3ec
 8009c1c:	0800a3f6 	.word	0x0800a3f6
 8009c20:	08004fdd 	.word	0x08004fdd
 8009c24:	080099a7 	.word	0x080099a7
 8009c28:	0800a3f2 	.word	0x0800a3f2

08009c2c <__swbuf_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	460e      	mov	r6, r1
 8009c30:	4614      	mov	r4, r2
 8009c32:	4605      	mov	r5, r0
 8009c34:	b118      	cbz	r0, 8009c3e <__swbuf_r+0x12>
 8009c36:	6983      	ldr	r3, [r0, #24]
 8009c38:	b90b      	cbnz	r3, 8009c3e <__swbuf_r+0x12>
 8009c3a:	f7ff fd9f 	bl	800977c <__sinit>
 8009c3e:	4b21      	ldr	r3, [pc, #132]	; (8009cc4 <__swbuf_r+0x98>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	d12b      	bne.n	8009c9c <__swbuf_r+0x70>
 8009c44:	686c      	ldr	r4, [r5, #4]
 8009c46:	69a3      	ldr	r3, [r4, #24]
 8009c48:	60a3      	str	r3, [r4, #8]
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	071a      	lsls	r2, r3, #28
 8009c4e:	d52f      	bpl.n	8009cb0 <__swbuf_r+0x84>
 8009c50:	6923      	ldr	r3, [r4, #16]
 8009c52:	b36b      	cbz	r3, 8009cb0 <__swbuf_r+0x84>
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	6820      	ldr	r0, [r4, #0]
 8009c58:	1ac0      	subs	r0, r0, r3
 8009c5a:	6963      	ldr	r3, [r4, #20]
 8009c5c:	b2f6      	uxtb	r6, r6
 8009c5e:	4283      	cmp	r3, r0
 8009c60:	4637      	mov	r7, r6
 8009c62:	dc04      	bgt.n	8009c6e <__swbuf_r+0x42>
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f7ff fcf4 	bl	8009654 <_fflush_r>
 8009c6c:	bb30      	cbnz	r0, 8009cbc <__swbuf_r+0x90>
 8009c6e:	68a3      	ldr	r3, [r4, #8]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	60a3      	str	r3, [r4, #8]
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	6022      	str	r2, [r4, #0]
 8009c7a:	701e      	strb	r6, [r3, #0]
 8009c7c:	6963      	ldr	r3, [r4, #20]
 8009c7e:	3001      	adds	r0, #1
 8009c80:	4283      	cmp	r3, r0
 8009c82:	d004      	beq.n	8009c8e <__swbuf_r+0x62>
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	07db      	lsls	r3, r3, #31
 8009c88:	d506      	bpl.n	8009c98 <__swbuf_r+0x6c>
 8009c8a:	2e0a      	cmp	r6, #10
 8009c8c:	d104      	bne.n	8009c98 <__swbuf_r+0x6c>
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	f7ff fcdf 	bl	8009654 <_fflush_r>
 8009c96:	b988      	cbnz	r0, 8009cbc <__swbuf_r+0x90>
 8009c98:	4638      	mov	r0, r7
 8009c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <__swbuf_r+0x9c>)
 8009c9e:	429c      	cmp	r4, r3
 8009ca0:	d101      	bne.n	8009ca6 <__swbuf_r+0x7a>
 8009ca2:	68ac      	ldr	r4, [r5, #8]
 8009ca4:	e7cf      	b.n	8009c46 <__swbuf_r+0x1a>
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <__swbuf_r+0xa0>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	bf08      	it	eq
 8009cac:	68ec      	ldreq	r4, [r5, #12]
 8009cae:	e7ca      	b.n	8009c46 <__swbuf_r+0x1a>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	f000 f80c 	bl	8009cd0 <__swsetup_r>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d0cb      	beq.n	8009c54 <__swbuf_r+0x28>
 8009cbc:	f04f 37ff 	mov.w	r7, #4294967295
 8009cc0:	e7ea      	b.n	8009c98 <__swbuf_r+0x6c>
 8009cc2:	bf00      	nop
 8009cc4:	0800a474 	.word	0x0800a474
 8009cc8:	0800a494 	.word	0x0800a494
 8009ccc:	0800a454 	.word	0x0800a454

08009cd0 <__swsetup_r>:
 8009cd0:	4b32      	ldr	r3, [pc, #200]	; (8009d9c <__swsetup_r+0xcc>)
 8009cd2:	b570      	push	{r4, r5, r6, lr}
 8009cd4:	681d      	ldr	r5, [r3, #0]
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	460c      	mov	r4, r1
 8009cda:	b125      	cbz	r5, 8009ce6 <__swsetup_r+0x16>
 8009cdc:	69ab      	ldr	r3, [r5, #24]
 8009cde:	b913      	cbnz	r3, 8009ce6 <__swsetup_r+0x16>
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f7ff fd4b 	bl	800977c <__sinit>
 8009ce6:	4b2e      	ldr	r3, [pc, #184]	; (8009da0 <__swsetup_r+0xd0>)
 8009ce8:	429c      	cmp	r4, r3
 8009cea:	d10f      	bne.n	8009d0c <__swsetup_r+0x3c>
 8009cec:	686c      	ldr	r4, [r5, #4]
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cf4:	0719      	lsls	r1, r3, #28
 8009cf6:	d42c      	bmi.n	8009d52 <__swsetup_r+0x82>
 8009cf8:	06dd      	lsls	r5, r3, #27
 8009cfa:	d411      	bmi.n	8009d20 <__swsetup_r+0x50>
 8009cfc:	2309      	movs	r3, #9
 8009cfe:	6033      	str	r3, [r6, #0]
 8009d00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d04:	81a3      	strh	r3, [r4, #12]
 8009d06:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0a:	e03e      	b.n	8009d8a <__swsetup_r+0xba>
 8009d0c:	4b25      	ldr	r3, [pc, #148]	; (8009da4 <__swsetup_r+0xd4>)
 8009d0e:	429c      	cmp	r4, r3
 8009d10:	d101      	bne.n	8009d16 <__swsetup_r+0x46>
 8009d12:	68ac      	ldr	r4, [r5, #8]
 8009d14:	e7eb      	b.n	8009cee <__swsetup_r+0x1e>
 8009d16:	4b24      	ldr	r3, [pc, #144]	; (8009da8 <__swsetup_r+0xd8>)
 8009d18:	429c      	cmp	r4, r3
 8009d1a:	bf08      	it	eq
 8009d1c:	68ec      	ldreq	r4, [r5, #12]
 8009d1e:	e7e6      	b.n	8009cee <__swsetup_r+0x1e>
 8009d20:	0758      	lsls	r0, r3, #29
 8009d22:	d512      	bpl.n	8009d4a <__swsetup_r+0x7a>
 8009d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d26:	b141      	cbz	r1, 8009d3a <__swsetup_r+0x6a>
 8009d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d2c:	4299      	cmp	r1, r3
 8009d2e:	d002      	beq.n	8009d36 <__swsetup_r+0x66>
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7fe fd89 	bl	8008848 <_free_r>
 8009d36:	2300      	movs	r3, #0
 8009d38:	6363      	str	r3, [r4, #52]	; 0x34
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	2300      	movs	r3, #0
 8009d44:	6063      	str	r3, [r4, #4]
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f043 0308 	orr.w	r3, r3, #8
 8009d50:	81a3      	strh	r3, [r4, #12]
 8009d52:	6923      	ldr	r3, [r4, #16]
 8009d54:	b94b      	cbnz	r3, 8009d6a <__swsetup_r+0x9a>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d60:	d003      	beq.n	8009d6a <__swsetup_r+0x9a>
 8009d62:	4621      	mov	r1, r4
 8009d64:	4630      	mov	r0, r6
 8009d66:	f000 f84d 	bl	8009e04 <__smakebuf_r>
 8009d6a:	89a0      	ldrh	r0, [r4, #12]
 8009d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d70:	f010 0301 	ands.w	r3, r0, #1
 8009d74:	d00a      	beq.n	8009d8c <__swsetup_r+0xbc>
 8009d76:	2300      	movs	r3, #0
 8009d78:	60a3      	str	r3, [r4, #8]
 8009d7a:	6963      	ldr	r3, [r4, #20]
 8009d7c:	425b      	negs	r3, r3
 8009d7e:	61a3      	str	r3, [r4, #24]
 8009d80:	6923      	ldr	r3, [r4, #16]
 8009d82:	b943      	cbnz	r3, 8009d96 <__swsetup_r+0xc6>
 8009d84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d88:	d1ba      	bne.n	8009d00 <__swsetup_r+0x30>
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	0781      	lsls	r1, r0, #30
 8009d8e:	bf58      	it	pl
 8009d90:	6963      	ldrpl	r3, [r4, #20]
 8009d92:	60a3      	str	r3, [r4, #8]
 8009d94:	e7f4      	b.n	8009d80 <__swsetup_r+0xb0>
 8009d96:	2000      	movs	r0, #0
 8009d98:	e7f7      	b.n	8009d8a <__swsetup_r+0xba>
 8009d9a:	bf00      	nop
 8009d9c:	20000010 	.word	0x20000010
 8009da0:	0800a474 	.word	0x0800a474
 8009da4:	0800a494 	.word	0x0800a494
 8009da8:	0800a454 	.word	0x0800a454

08009dac <abort>:
 8009dac:	b508      	push	{r3, lr}
 8009dae:	2006      	movs	r0, #6
 8009db0:	f000 f898 	bl	8009ee4 <raise>
 8009db4:	2001      	movs	r0, #1
 8009db6:	f7f7 ff69 	bl	8001c8c <_exit>

08009dba <__swhatbuf_r>:
 8009dba:	b570      	push	{r4, r5, r6, lr}
 8009dbc:	460e      	mov	r6, r1
 8009dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc2:	2900      	cmp	r1, #0
 8009dc4:	b096      	sub	sp, #88	; 0x58
 8009dc6:	4614      	mov	r4, r2
 8009dc8:	461d      	mov	r5, r3
 8009dca:	da07      	bge.n	8009ddc <__swhatbuf_r+0x22>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	602b      	str	r3, [r5, #0]
 8009dd0:	89b3      	ldrh	r3, [r6, #12]
 8009dd2:	061a      	lsls	r2, r3, #24
 8009dd4:	d410      	bmi.n	8009df8 <__swhatbuf_r+0x3e>
 8009dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dda:	e00e      	b.n	8009dfa <__swhatbuf_r+0x40>
 8009ddc:	466a      	mov	r2, sp
 8009dde:	f000 f89d 	bl	8009f1c <_fstat_r>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	dbf2      	blt.n	8009dcc <__swhatbuf_r+0x12>
 8009de6:	9a01      	ldr	r2, [sp, #4]
 8009de8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009df0:	425a      	negs	r2, r3
 8009df2:	415a      	adcs	r2, r3
 8009df4:	602a      	str	r2, [r5, #0]
 8009df6:	e7ee      	b.n	8009dd6 <__swhatbuf_r+0x1c>
 8009df8:	2340      	movs	r3, #64	; 0x40
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	b016      	add	sp, #88	; 0x58
 8009e00:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e04 <__smakebuf_r>:
 8009e04:	898b      	ldrh	r3, [r1, #12]
 8009e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e08:	079d      	lsls	r5, r3, #30
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	d507      	bpl.n	8009e20 <__smakebuf_r+0x1c>
 8009e10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	6123      	str	r3, [r4, #16]
 8009e18:	2301      	movs	r3, #1
 8009e1a:	6163      	str	r3, [r4, #20]
 8009e1c:	b002      	add	sp, #8
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
 8009e20:	ab01      	add	r3, sp, #4
 8009e22:	466a      	mov	r2, sp
 8009e24:	f7ff ffc9 	bl	8009dba <__swhatbuf_r>
 8009e28:	9900      	ldr	r1, [sp, #0]
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f7fe fd5b 	bl	80088e8 <_malloc_r>
 8009e32:	b948      	cbnz	r0, 8009e48 <__smakebuf_r+0x44>
 8009e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e38:	059a      	lsls	r2, r3, #22
 8009e3a:	d4ef      	bmi.n	8009e1c <__smakebuf_r+0x18>
 8009e3c:	f023 0303 	bic.w	r3, r3, #3
 8009e40:	f043 0302 	orr.w	r3, r3, #2
 8009e44:	81a3      	strh	r3, [r4, #12]
 8009e46:	e7e3      	b.n	8009e10 <__smakebuf_r+0xc>
 8009e48:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <__smakebuf_r+0x7c>)
 8009e4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	6020      	str	r0, [r4, #0]
 8009e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e54:	81a3      	strh	r3, [r4, #12]
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	6163      	str	r3, [r4, #20]
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	6120      	str	r0, [r4, #16]
 8009e5e:	b15b      	cbz	r3, 8009e78 <__smakebuf_r+0x74>
 8009e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e64:	4630      	mov	r0, r6
 8009e66:	f000 f86b 	bl	8009f40 <_isatty_r>
 8009e6a:	b128      	cbz	r0, 8009e78 <__smakebuf_r+0x74>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	f043 0301 	orr.w	r3, r3, #1
 8009e76:	81a3      	strh	r3, [r4, #12]
 8009e78:	89a0      	ldrh	r0, [r4, #12]
 8009e7a:	4305      	orrs	r5, r0
 8009e7c:	81a5      	strh	r5, [r4, #12]
 8009e7e:	e7cd      	b.n	8009e1c <__smakebuf_r+0x18>
 8009e80:	08009715 	.word	0x08009715

08009e84 <_malloc_usable_size_r>:
 8009e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e88:	1f18      	subs	r0, r3, #4
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	bfbc      	itt	lt
 8009e8e:	580b      	ldrlt	r3, [r1, r0]
 8009e90:	18c0      	addlt	r0, r0, r3
 8009e92:	4770      	bx	lr

08009e94 <_raise_r>:
 8009e94:	291f      	cmp	r1, #31
 8009e96:	b538      	push	{r3, r4, r5, lr}
 8009e98:	4604      	mov	r4, r0
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	d904      	bls.n	8009ea8 <_raise_r+0x14>
 8009e9e:	2316      	movs	r3, #22
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009eaa:	b112      	cbz	r2, 8009eb2 <_raise_r+0x1e>
 8009eac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009eb0:	b94b      	cbnz	r3, 8009ec6 <_raise_r+0x32>
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 f830 	bl	8009f18 <_getpid_r>
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4601      	mov	r1, r0
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ec2:	f000 b817 	b.w	8009ef4 <_kill_r>
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d00a      	beq.n	8009ee0 <_raise_r+0x4c>
 8009eca:	1c59      	adds	r1, r3, #1
 8009ecc:	d103      	bne.n	8009ed6 <_raise_r+0x42>
 8009ece:	2316      	movs	r3, #22
 8009ed0:	6003      	str	r3, [r0, #0]
 8009ed2:	2001      	movs	r0, #1
 8009ed4:	e7e7      	b.n	8009ea6 <_raise_r+0x12>
 8009ed6:	2400      	movs	r4, #0
 8009ed8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009edc:	4628      	mov	r0, r5
 8009ede:	4798      	blx	r3
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e7e0      	b.n	8009ea6 <_raise_r+0x12>

08009ee4 <raise>:
 8009ee4:	4b02      	ldr	r3, [pc, #8]	; (8009ef0 <raise+0xc>)
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	f7ff bfd3 	b.w	8009e94 <_raise_r>
 8009eee:	bf00      	nop
 8009ef0:	20000010 	.word	0x20000010

08009ef4 <_kill_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d07      	ldr	r5, [pc, #28]	; (8009f14 <_kill_r+0x20>)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	4611      	mov	r1, r2
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	f7f7 feb3 	bl	8001c6c <_kill>
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d102      	bne.n	8009f10 <_kill_r+0x1c>
 8009f0a:	682b      	ldr	r3, [r5, #0]
 8009f0c:	b103      	cbz	r3, 8009f10 <_kill_r+0x1c>
 8009f0e:	6023      	str	r3, [r4, #0]
 8009f10:	bd38      	pop	{r3, r4, r5, pc}
 8009f12:	bf00      	nop
 8009f14:	200003b8 	.word	0x200003b8

08009f18 <_getpid_r>:
 8009f18:	f7f7 bea0 	b.w	8001c5c <_getpid>

08009f1c <_fstat_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	; (8009f3c <_fstat_r+0x20>)
 8009f20:	2300      	movs	r3, #0
 8009f22:	4604      	mov	r4, r0
 8009f24:	4608      	mov	r0, r1
 8009f26:	4611      	mov	r1, r2
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	f7f7 fefe 	bl	8001d2a <_fstat>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	d102      	bne.n	8009f38 <_fstat_r+0x1c>
 8009f32:	682b      	ldr	r3, [r5, #0]
 8009f34:	b103      	cbz	r3, 8009f38 <_fstat_r+0x1c>
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	bd38      	pop	{r3, r4, r5, pc}
 8009f3a:	bf00      	nop
 8009f3c:	200003b8 	.word	0x200003b8

08009f40 <_isatty_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4d06      	ldr	r5, [pc, #24]	; (8009f5c <_isatty_r+0x1c>)
 8009f44:	2300      	movs	r3, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	4608      	mov	r0, r1
 8009f4a:	602b      	str	r3, [r5, #0]
 8009f4c:	f7f7 fefd 	bl	8001d4a <_isatty>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_isatty_r+0x1a>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_isatty_r+0x1a>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	200003b8 	.word	0x200003b8

08009f60 <_init>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	bf00      	nop
 8009f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f66:	bc08      	pop	{r3}
 8009f68:	469e      	mov	lr, r3
 8009f6a:	4770      	bx	lr

08009f6c <_fini>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	bf00      	nop
 8009f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f72:	bc08      	pop	{r3}
 8009f74:	469e      	mov	lr, r3
 8009f76:	4770      	bx	lr
